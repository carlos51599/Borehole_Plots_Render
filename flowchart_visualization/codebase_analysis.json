{
  "metadata": {
    "project_name": "Geo_Borehole_Sections_Render",
    "root_path": "C:\\Users\\dea29431.RSKGAD\\OneDrive - Rsk Group Limited\\Documents\\Geotech\\AGS Section\\Geo_Borehole_Sections_Render",
    "analysis_timestamp": "2025-07-21T09:40:41.006135",
    "total_files": 70,
    "total_lines": 20872,
    "total_complexity": 2423,
    "analyzer_version": "2.0.0"
  },
  "files": {
    "analyze_codebase.py": {
      "path": "analyze_codebase.py",
      "name": "analyze_codebase.py",
      "size_bytes": 9140,
      "total_lines": 236,
      "code_lines": 181,
      "comment_lines": 16,
      "blank_lines": 39,
      "complexity": 43,
      "avg_complexity": 4.3,
      "modified": 1753086853.3355649,
      "type": "core",
      "functions_count": 10,
      "classes_count": 1,
      "imports_count": 8,
      "content_preview": "#!/usr/bin/env python3\n\"\"\"\nCodebase Analysis Script for Interactive Flowchart Generation\n\nThis script analyzes the project structure, imports, and dependencies\nto generate data for the interactive HTML flowchart.\n\"\"\"\n\nimport os\nimport ast\nimport json\nimport re\nfrom pathlib import Path\nfrom collections import defaultdict\nimport importlib.util\n\n# Configuration\nIGNORE_DIRS = {'.git', '__pycache__', '.vscode', 'node_modules', '.pytest_cache', 'archive'}\nPYTHON_EXTENSIONS = {'.py'}\nANALYSIS_OUTPUT = ...",
      "git_info": {
        "commit_count": 0
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 0,
        "in_degree": 0,
        "out_degree": 0
      }
    },
    "analyze_debug_log.py": {
      "path": "analyze_debug_log.py",
      "name": "analyze_debug_log.py",
      "size_bytes": 20686,
      "total_lines": 574,
      "code_lines": 406,
      "comment_lines": 61,
      "blank_lines": 107,
      "complexity": 52,
      "avg_complexity": 17.33,
      "modified": 1753043205.3315651,
      "type": "core",
      "functions_count": 3,
      "classes_count": 0,
      "imports_count": 4,
      "content_preview": "#!/usr/bin/env python3\n\"\"\"\nLog Analysis Script for Geotechnical Borehole Visualization Application\nParses app_debug.log to extract performance metrics and generate optimization report.\n\"\"\"\nimport re\nfrom datetime import datetime, timedelta\nfrom collections import defaultdict, Counter\nimport json\n\n\ndef parse_timestamp(line):\n    \"\"\"Extract timestamp from log line.\"\"\"\n    match = re.match(r\"^(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2},\\d{3})\", line)\n    return datetime.strptime(match.group(1), \"%Y-%m-%d ...",
      "git_info": {
        "last_commit": "41c333fd",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 22:00:20 +0100",
        "last_message": "debug optimisation"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 0,
        "in_degree": 0,
        "out_degree": 0
      }
    },
    "app.py": {
      "path": "app.py",
      "name": "app.py",
      "size_bytes": 23575,
      "total_lines": 559,
      "code_lines": 493,
      "comment_lines": 32,
      "blank_lines": 34,
      "complexity": 12,
      "avg_complexity": 6.0,
      "modified": 1753044981.3313973,
      "type": "main",
      "functions_count": 2,
      "classes_count": 0,
      "imports_count": 9,
      "content_preview": "import dash\nfrom dash import html, dcc\nimport dash_leaflet as dl\nfrom dash_leaflet import EditControl\n\nimport logging\nimport sys\nimport webbrowser\nfrom datetime import datetime\n\nimport config  # Import UI configuration\nfrom callbacks_split import register_callbacks  # Import callback registration\nfrom app_factory import create_app_with_duplicate_callbacks  # Import app factory\n\n# Set up enhanced logging format with detailed context\nlogfile = \"app_debug.log\"\nlogging.basicConfig(\n    level=logging...",
      "git_info": {
        "last_commit": "41c333fd",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 22:00:20 +0100",
        "last_message": "debug optimisation"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 3,
        "in_degree": 0,
        "out_degree": 3
      }
    },
    "app_constants.py": {
      "path": "app_constants.py",
      "name": "app_constants.py",
      "size_bytes": 8903,
      "total_lines": 291,
      "code_lines": 159,
      "comment_lines": 61,
      "blank_lines": 71,
      "complexity": 0,
      "avg_complexity": 0,
      "modified": 1753031378.7931626,
      "type": "config",
      "functions_count": 0,
      "classes_count": 8,
      "imports_count": 0,
      "content_preview": "\"\"\"\nApplication Constants Configuration\n\nThis module centralizes all hardcoded values, magic numbers, and configuration\nconstants used throughout the application, improving maintainability and\nmaking configuration changes easier.\n\nUsage:\n    from app_constants import MAP_CONFIG, PLOT_CONFIG, FILE_LIMITS\n\"\"\"\n\n# ====================================================================\n# FILE PROCESSING LIMITS\n# ====================================================================\n\n\nclass FileLimits:\n   ...",
      "git_info": {
        "last_commit": "c9ce286d",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 18:17:54 +0100",
        "last_message": "10.1 - app works"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.139,
        "degree": 9,
        "in_degree": 9,
        "out_degree": 0
      }
    },
    "app_factory.py": {
      "path": "app_factory.py",
      "name": "app_factory.py",
      "size_bytes": 595,
      "total_lines": 19,
      "code_lines": 15,
      "comment_lines": 1,
      "blank_lines": 3,
      "complexity": 1,
      "avg_complexity": 1.0,
      "modified": 1753024227.3536782,
      "type": "core",
      "functions_count": 1,
      "classes_count": 0,
      "imports_count": 1,
      "content_preview": "\"\"\"\nHelper module for dealing with duplicate callbacks.\nThis file should be imported before any other file that contains callbacks.\n\"\"\"\n\nimport dash\n\n\n# Define a special function to set up an app with proper duplicate callback handling\ndef create_app_with_duplicate_callbacks():\n    \"\"\"\n    Create a Dash app with settings to handle duplicate callbacks properly.\n    \"\"\"\n    app = dash.Dash(\n        __name__,\n        suppress_callback_exceptions=True,\n        prevent_initial_callbacks=\"initial_dupl...",
      "git_info": {
        "last_commit": "e9626bb3",
        "last_author": "carlos51599",
        "last_date": "2025-07-08 15:29:57 +0100",
        "last_message": "6"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.014,
        "degree": 1,
        "in_degree": 1,
        "out_degree": 0
      }
    },
    "borehole_log_professional.py": {
      "path": "borehole_log_professional.py",
      "name": "borehole_log_professional.py",
      "size_bytes": 64983,
      "total_lines": 1779,
      "code_lines": 1393,
      "comment_lines": 187,
      "blank_lines": 199,
      "complexity": 162,
      "avg_complexity": 10.12,
      "modified": 1753044984.2126176,
      "type": "core",
      "functions_count": 16,
      "classes_count": 1,
      "imports_count": 12,
      "content_preview": "\"\"\"\nProfessional borehole log plotting module matching Openground style standards.\n\nThis module creates professional borehole logs with separate columns for\nlithology, depth, and layer description using color and hatch patterns\nfrom CSV geology code mapping with Openground-style formatting and layout.\n\nUpdated to include multi-page support, professional headers, and proper A4 formatting\nbased on the dummy3 implementation.\n\"\"\"\n\n# Import shared geology code mapping utility (move to top for lint co...",
      "git_info": {
        "last_commit": "41c333fd",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 22:00:20 +0100",
        "last_message": "debug optimisation"
      },
      "network_metrics": {
        "betweenness_centrality": 0.007,
        "closeness_centrality": 0.266,
        "degree": 20,
        "in_degree": 18,
        "out_degree": 2
      }
    },
    "callbacks_split.py": {
      "path": "callbacks_split.py",
      "name": "callbacks_split.py",
      "size_bytes": 99903,
      "total_lines": 2399,
      "code_lines": 1899,
      "comment_lines": 207,
      "blank_lines": 293,
      "complexity": 466,
      "avg_complexity": 16.64,
      "modified": 1753044988.3331041,
      "type": "core",
      "functions_count": 28,
      "classes_count": 1,
      "imports_count": 23,
      "content_preview": "# ====================================================================\n# SPLIT CALLBACKS - Clean, Focused, Easy to Edit\n# ====================================================================\n\nimport dash\nfrom dash import html, dcc, Output, Input, State\nimport dash_leaflet as dl\nimport pandas as pd\nimport logging\nimport statistics\nimport base64\nimport io\nfrom sklearn.decomposition import PCA\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\nimport config\nfrom data_l...",
      "git_info": {
        "last_commit": "41c333fd",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 22:00:20 +0100",
        "last_message": "debug optimisation"
      },
      "network_metrics": {
        "betweenness_centrality": 0.009,
        "closeness_centrality": 0.058,
        "degree": 15,
        "in_degree": 4,
        "out_degree": 11
      }
    },
    "comprehensive_optimization_validation.py": {
      "path": "comprehensive_optimization_validation.py",
      "name": "comprehensive_optimization_validation.py",
      "size_bytes": 25309,
      "total_lines": 667,
      "code_lines": 500,
      "comment_lines": 57,
      "blank_lines": 110,
      "complexity": 63,
      "avg_complexity": 7.0,
      "modified": 1753044992.056,
      "type": "core",
      "functions_count": 9,
      "classes_count": 0,
      "imports_count": 12,
      "content_preview": "#!/usr/bin/env python3\n\"\"\"\nComprehensive validation test for all implemented optimizations.\n\nThis script tests the specific optimizations mentioned in the requirements:\n1. Reduce Matplotlib Logging Verbosity\n2. Optimize Marker Click Logging\n3. Batch Coordinate Transformations\n4. Optimize DataFrame Operations\n5. Enhance Error Handling\n6. Asynchronous Processing (where applicable)\n\"\"\"\n\nimport logging\nimport time\nimport sys\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom...",
      "git_info": {
        "last_commit": "41c333fd",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 22:00:20 +0100",
        "last_message": "debug optimisation"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 4,
        "in_degree": 0,
        "out_degree": 4
      }
    },
    "config.py": {
      "path": "config.py",
      "name": "config.py",
      "size_bytes": 24500,
      "total_lines": 836,
      "code_lines": 618,
      "comment_lines": 90,
      "blank_lines": 128,
      "complexity": 0,
      "avg_complexity": 0,
      "modified": 1751906326.6184306,
      "type": "config",
      "functions_count": 0,
      "classes_count": 0,
      "imports_count": 0,
      "content_preview": "# Configuration for Dash app\n# Copy or adapt settings from ../config.py as needed\n\n# ===== FIGURE/PLOT CONFIGURATION =====\n# Map display size\nMAP_HEIGHT = 500  # in pixels\nMAP_WIDTH = \"100%\"  # Use percentage for responsive width\n\n# Individual borehole log figure size\nLOG_FIG_HEIGHT = 4\nLOG_FIG_WIDTH = 2.5\n\n# Section plot figure size (cross-section showing multiple boreholes)\nSECTION_BASE_HEIGHT = 5\nSECTION_MAX_HEIGHT = 6\nSECTION_MIN_WIDTH = 8\nSECTION_WIDTH_PER_BH = 1.5\n\n# Individual borehole lo...",
      "git_info": {
        "last_commit": "d66eecd3",
        "last_author": "carlos51599",
        "last_date": "2025-07-07 17:40:59 +0100",
        "last_message": "config, UI controls expansion"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.139,
        "degree": 9,
        "in_degree": 9,
        "out_degree": 0
      }
    },
    "coordinate_service.py": {
      "path": "coordinate_service.py",
      "name": "coordinate_service.py",
      "size_bytes": 14096,
      "total_lines": 406,
      "code_lines": 291,
      "comment_lines": 30,
      "blank_lines": 85,
      "complexity": 36,
      "avg_complexity": 2.57,
      "modified": 1753042030.519094,
      "type": "service",
      "functions_count": 14,
      "classes_count": 2,
      "imports_count": 6,
      "content_preview": "\"\"\"\nCentralized Coordinate Transformation Service\n\nThis module provides a unified interface for all coordinate transformations\nused throughout the application, eliminating duplication and ensuring consistency.\n\nFeatures:\n- Cached transformers for performance\n- Batch transformation support\n- Comprehensive error handling\n- Automatic UTM zone detection\n- Validation of transformed coordinates\n\"\"\"\n\nimport logging\nimport numpy as np\nimport pandas as pd\nimport pyproj\nfrom functools import lru_cache\nfro...",
      "git_info": {
        "last_commit": "b7eb5165",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 21:11:29 +0100",
        "last_message": "10.2 leftovers-app works"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.233,
        "degree": 16,
        "in_degree": 16,
        "out_degree": 0
      }
    },
    "dataframe_optimizer.py": {
      "path": "dataframe_optimizer.py",
      "name": "dataframe_optimizer.py",
      "size_bytes": 11309,
      "total_lines": 314,
      "code_lines": 232,
      "comment_lines": 19,
      "blank_lines": 63,
      "complexity": 32,
      "avg_complexity": 8.0,
      "modified": 1753044989.932505,
      "type": "model",
      "functions_count": 4,
      "classes_count": 0,
      "imports_count": 4,
      "content_preview": "\"\"\"\nDataFrame optimization utilities for the geotechnical borehole application.\n\nThis module provides functions to optimize pandas DataFrames for memory usage\nand performance, specifically targeting categorical data and numeric precision.\n\"\"\"\n\nimport pandas as pd\nimport numpy as np\nimport logging\nfrom typing import Dict, List, Optional\n\nlogger = logging.getLogger(__name__)\n\n\ndef optimize_dataframe_memory(\n    df: pd.DataFrame, categorical_threshold: float = 0.5\n) -> pd.DataFrame:\n    \"\"\"\n    Opt...",
      "git_info": {
        "last_commit": "41c333fd",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 22:00:20 +0100",
        "last_message": "debug optimisation"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.052,
        "degree": 2,
        "in_degree": 2,
        "out_degree": 0
      }
    },
    "data_loader.py": {
      "path": "data_loader.py",
      "name": "data_loader.py",
      "size_bytes": 1785,
      "total_lines": 55,
      "code_lines": 48,
      "comment_lines": 0,
      "blank_lines": 7,
      "complexity": 21,
      "avg_complexity": 10.5,
      "modified": 1751649263.13779,
      "type": "model",
      "functions_count": 2,
      "classes_count": 0,
      "imports_count": 3,
      "content_preview": "import csv\nimport pandas as pd\nimport os\n\n\ndef parse_group(content, group_name):\n    lines = content.splitlines()\n    parsed = list(csv.reader(lines, delimiter=\",\", quotechar='\"'))\n    headings = []\n    data = []\n    in_group = False\n    for row in parsed:\n        if row and row[0] == \"GROUP\" and len(row) > 1 and row[1] == group_name:\n            in_group = True\n            continue\n        if in_group and row and row[0] == \"HEADING\":\n            headings = row[1:]\n            continue\n        i...",
      "git_info": {
        "last_commit": "cb667d03",
        "last_author": "carlos51599",
        "last_date": "2025-07-06 09:03:08 +0100",
        "last_message": "working"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.084,
        "degree": 4,
        "in_degree": 4,
        "out_degree": 0
      }
    },
    "debug_module.py": {
      "path": "debug_module.py",
      "name": "debug_module.py",
      "size_bytes": 1202,
      "total_lines": 56,
      "code_lines": 38,
      "comment_lines": 0,
      "blank_lines": 18,
      "complexity": 1,
      "avg_complexity": 1.0,
      "modified": 1753024227.4536796,
      "type": "core",
      "functions_count": 1,
      "classes_count": 0,
      "imports_count": 5,
      "content_preview": "\"\"\"Debug version of professional borehole log\"\"\"\n\nprint(\"Starting module import...\")\n\ntry:\n    import matplotlib.pyplot as plt\n\n    print(\"\u2713 matplotlib imported\")\nexcept Exception as e:\n    print(f\"\u2717 matplotlib error: {e}\")\n\ntry:\n    import matplotlib.patches as patches\n\n    print(\"\u2713 patches imported\")\nexcept Exception as e:\n    print(f\"\u2717 patches error: {e}\")\n\ntry:\n    import pandas as pd\n\n    print(\"\u2713 pandas imported\")\nexcept Exception as e:\n    print(f\"\u2717 pandas error: {e}\")\n\ntry:\n    import lo...",
      "git_info": {
        "last_commit": "342e2596",
        "last_author": "carlos51599",
        "last_date": "2025-07-16 17:02:51 +0100",
        "last_message": "professional borehole log"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 1,
        "in_degree": 0,
        "out_degree": 1
      }
    },
    "debug_offset_layout.py": {
      "path": "debug_offset_layout.py",
      "name": "debug_offset_layout.py",
      "size_bytes": 1878,
      "total_lines": 62,
      "code_lines": 45,
      "comment_lines": 5,
      "blank_lines": 12,
      "complexity": 0,
      "avg_complexity": 0,
      "modified": 1753024227.4536796,
      "type": "core",
      "functions_count": 0,
      "classes_count": 0,
      "imports_count": 4,
      "content_preview": "#!/usr/bin/env python3\n\"\"\"\nDebug script to test for offset_layout issue\n\"\"\"\n\nimport traceback\nimport sys\nimport logging\n\n# Set up logging to see detailed error messages\nlogging.basicConfig(\n    level=logging.DEBUG, format=\"%(asctime)s - %(levelname)s - %(message)s\"\n)\n\ntry:\n    print(\"Testing import of borehole_log_professional...\")\n    from borehole_log_professional import plot_borehole_log_from_ags_content\n\n    print(\"\u2713 Import successful\")\n\n    # Test a simple call\n    print(\"Testing plot_boreh...",
      "git_info": {
        "last_commit": "610cd5aa",
        "last_author": "carlos51599",
        "last_date": "2025-07-19 16:56:11 +0100",
        "last_message": "14"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 1,
        "in_degree": 0,
        "out_degree": 1
      }
    },
    "enhanced_error_handling.py": {
      "path": "enhanced_error_handling.py",
      "name": "enhanced_error_handling.py",
      "size_bytes": 12757,
      "total_lines": 386,
      "code_lines": 289,
      "comment_lines": 13,
      "blank_lines": 84,
      "complexity": 56,
      "avg_complexity": 3.29,
      "modified": 1753044990.5851877,
      "type": "core",
      "functions_count": 17,
      "classes_count": 3,
      "imports_count": 8,
      "content_preview": "\"\"\"\nEnhanced error handling utilities for the geotechnical borehole application.\n\nThis module provides robust error handling mechanisms including retry logic,\ngraceful degradation, and improved user feedback for various error scenarios.\n\"\"\"\n\nimport logging\nimport time\nimport functools\nfrom typing import Any, Callable, Optional, Union, List\nfrom dataclasses import dataclass\nfrom enum import Enum\n\nlogger = logging.getLogger(__name__)\n\n\nclass ErrorSeverity(Enum):\n    \"\"\"Error severity levels for ca...",
      "git_info": {
        "last_commit": "41c333fd",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 22:00:20 +0100",
        "last_message": "debug optimisation"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.014,
        "degree": 3,
        "in_degree": 1,
        "out_degree": 2
      }
    },
    "error_handling.py": {
      "path": "error_handling.py",
      "name": "error_handling.py",
      "size_bytes": 13439,
      "total_lines": 387,
      "code_lines": 292,
      "comment_lines": 20,
      "blank_lines": 75,
      "complexity": 56,
      "avg_complexity": 3.29,
      "modified": 1753034339.9097612,
      "type": "core",
      "functions_count": 17,
      "classes_count": 4,
      "imports_count": 7,
      "content_preview": "\"\"\"\nEnhanced Error Handling System\n\nThis module provides a comprehensive, standardized error handling system\nto replace the inconsistent error handling patterns identified in the\ncodebase health report.\n\"\"\"\n\nimport logging\nimport traceback\nfrom enum import Enum\nfrom dataclasses import dataclass\nfrom typing import Optional, Dict, Any, List, Union\nfrom datetime import datetime\nimport dash\nfrom dash import html\n\nlogger = logging.getLogger(__name__)\n\n\nclass ErrorSeverity(Enum):\n    \"\"\"Error severity...",
      "git_info": {
        "last_commit": "da3fd18f",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 19:09:44 +0100",
        "last_message": "10.2 - app works"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.101,
        "degree": 7,
        "in_degree": 7,
        "out_degree": 0
      }
    },
    "error_recovery.py": {
      "path": "error_recovery.py",
      "name": "error_recovery.py",
      "size_bytes": 17348,
      "total_lines": 485,
      "code_lines": 385,
      "comment_lines": 14,
      "blank_lines": 86,
      "complexity": 56,
      "avg_complexity": 1.93,
      "modified": 1753031381.8895888,
      "type": "core",
      "functions_count": 29,
      "classes_count": 6,
      "imports_count": 7,
      "content_preview": "\"\"\"\nError Recovery and Graceful Degradation System\n\nProvides comprehensive error recovery mechanisms, graceful degradation,\nand user-friendly error handling throughout the application.\n\nFeatures:\n- Automatic retry with exponential backoff\n- Graceful degradation for non-critical features\n- User-friendly error messages and recovery suggestions\n- Error logging and reporting\n- Circuit breaker pattern for external dependencies\n\"\"\"\n\nimport logging\nimport time\nimport traceback\nimport functools\nfrom typ...",
      "git_info": {
        "last_commit": "c9ce286d",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 18:17:54 +0100",
        "last_message": "10.1 - app works"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.029,
        "degree": 3,
        "in_degree": 2,
        "out_degree": 1
      }
    },
    "generate_dependency_graph.py": {
      "path": "generate_dependency_graph.py",
      "name": "generate_dependency_graph.py",
      "size_bytes": 3439,
      "total_lines": 107,
      "code_lines": 75,
      "comment_lines": 10,
      "blank_lines": 22,
      "complexity": 20,
      "avg_complexity": 6.67,
      "modified": 1753024227.4536796,
      "type": "core",
      "functions_count": 3,
      "classes_count": 0,
      "imports_count": 6,
      "content_preview": "import os\nimport subprocess\nimport glob\nimport sys\nimport ast\nfrom pathlib import Path\n\n\ndef extract_imports(file_path):\n    \"\"\"Extract imports from a Python file.\"\"\"\n    try:\n        with open(file_path, \"r\", encoding=\"utf-8\") as f:\n            content = f.read()\n\n        tree = ast.parse(content)\n        imports = []\n\n        for node in ast.walk(tree):\n            if isinstance(node, ast.Import):\n                for alias in node.names:\n                    imports.append(alias.name.split(\".\")...",
      "git_info": {
        "last_commit": "6d247995",
        "last_author": "carlos51599",
        "last_date": "2025-07-19 14:33:29 +0100",
        "last_message": "12"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 0,
        "in_degree": 0,
        "out_degree": 0
      }
    },
    "generate_flowchart_data.py": {
      "path": "generate_flowchart_data.py",
      "name": "generate_flowchart_data.py",
      "size_bytes": 19629,
      "total_lines": 471,
      "code_lines": 348,
      "comment_lines": 43,
      "blank_lines": 80,
      "complexity": 107,
      "avg_complexity": 9.73,
      "modified": 1753087194.229179,
      "type": "model",
      "functions_count": 11,
      "classes_count": 1,
      "imports_count": 10,
      "content_preview": "#!/usr/bin/env python3\n\"\"\"\nEnhanced Flowchart Data Generator\n\nCreates comprehensive analysis data for the interactive flowchart including:\n- File relationships and dependencies\n- Function call graphs\n- Module interconnections\n- Code metrics and complexity analysis\n- Git history and change information\n\"\"\"\n\nimport os\nimport ast\nimport json\nimport re\nimport subprocess\nfrom pathlib import Path\nfrom collections import defaultdict, Counter\nfrom datetime import datetime\nimport importlib.util\n\nclass Enh...",
      "git_info": {
        "commit_count": 0
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 0,
        "in_degree": 0,
        "out_degree": 0
      }
    },
    "geology_code_utils.py": {
      "path": "geology_code_utils.py",
      "name": "geology_code_utils.py",
      "size_bytes": 1845,
      "total_lines": 50,
      "code_lines": 37,
      "comment_lines": 3,
      "blank_lines": 10,
      "complexity": 8,
      "avg_complexity": 2.67,
      "modified": 1753024227.4536796,
      "type": "utility",
      "functions_count": 3,
      "classes_count": 0,
      "imports_count": 2,
      "content_preview": "import csv\nimport os\n\n# Utility to load geology code mappings from a CSV file with header: Code,Description,Color,Hatch\n\n\ndef load_geology_code_mappings(csv_filename=None):\n    \"\"\"\n    Load geology code mappings from a CSV file.\n    Returns two dicts: code -> color, code -> pattern\n    \"\"\"\n    color_map = {}\n    pattern_map = {}\n    if csv_filename is None:\n        csv_filename = os.path.join(os.path.dirname(__file__), \"Geology Codes BGS.csv\")\n\n    print(f\"[DEBUG] Loading geology codes from: {cs...",
      "git_info": {
        "last_commit": "08f3af5c",
        "last_author": "carlos51599",
        "last_date": "2025-07-18 22:37:41 +0100",
        "last_message": "11"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.185,
        "degree": 4,
        "in_degree": 4,
        "out_degree": 0
      }
    },
    "health_check.py": {
      "path": "health_check.py",
      "name": "health_check.py",
      "size_bytes": 18910,
      "total_lines": 536,
      "code_lines": 423,
      "comment_lines": 24,
      "blank_lines": 89,
      "complexity": 62,
      "avg_complexity": 2.95,
      "modified": 1753031383.2584968,
      "type": "core",
      "functions_count": 21,
      "classes_count": 5,
      "imports_count": 12,
      "content_preview": "\"\"\"\nApplication Health Check System\n\nProvides comprehensive health monitoring, system diagnostics, and status reporting\nfor the Geo Borehole Sections Render application.\n\nFeatures:\n- System resource monitoring\n- Service health checks\n- Performance metrics\n- Error rate tracking\n- Configuration validation\n- Dependency status checks\n\"\"\"\n\nimport logging\nimport time\nimport os\nimport sys\nimport psutil\nimport platform\nfrom typing import Dict, Any, List, Optional\nfrom datetime import datetime, timedelta...",
      "git_info": {
        "last_commit": "c9ce286d",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 18:17:54 +0100",
        "last_message": "10.1 - app works"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.014,
        "degree": 4,
        "in_degree": 1,
        "out_degree": 3
      }
    },
    "lazy_marker_manager.py": {
      "path": "lazy_marker_manager.py",
      "name": "lazy_marker_manager.py",
      "size_bytes": 16911,
      "total_lines": 474,
      "code_lines": 352,
      "comment_lines": 32,
      "blank_lines": 90,
      "complexity": 45,
      "avg_complexity": 3.0,
      "modified": 1753042034.3374124,
      "type": "core",
      "functions_count": 15,
      "classes_count": 3,
      "imports_count": 5,
      "content_preview": "\"\"\"\nLazy Marker Management Module\n\nThis module implements viewport-based lazy loading for map markers to improve performance\nwith large datasets by only rendering markers that are visible or relevant to the user.\n\"\"\"\n\nimport logging\nimport pandas as pd\nimport dash_leaflet as dl\nfrom typing import List, Dict, Tuple, Optional\nfrom dataclasses import dataclass\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass ViewportBounds:\n    \"\"\"Represents the visible area of the map.\"\"\"\n\n    north: float...",
      "git_info": {
        "last_commit": "b7eb5165",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 21:11:29 +0100",
        "last_message": "10.2 leftovers-app works"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.062,
        "degree": 3,
        "in_degree": 3,
        "out_degree": 0
      }
    },
    "loading_indicators.py": {
      "path": "loading_indicators.py",
      "name": "loading_indicators.py",
      "size_bytes": 14708,
      "total_lines": 420,
      "code_lines": 356,
      "comment_lines": 5,
      "blank_lines": 59,
      "complexity": 22,
      "avg_complexity": 1.22,
      "modified": 1753031379.8203168,
      "type": "core",
      "functions_count": 18,
      "classes_count": 2,
      "imports_count": 4,
      "content_preview": "\"\"\"\nLoading Indicator Components\n\nProvides centralized loading indicators and progress feedback for long-running operations.\nImproves user experience by providing clear feedback during data processing, file uploads,\nand plot generation.\n\nFeatures:\n- Spinner with customizable messages\n- Progress bars for file operations\n- Toast notifications for completion\n- Non-blocking loading states\n\"\"\"\n\nimport dash\nfrom dash import html, dcc\nimport time\nfrom typing import Optional, Dict, Any\n\nfrom app_constan...",
      "git_info": {
        "last_commit": "c9ce286d",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 18:17:54 +0100",
        "last_message": "10.1 - app works"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.045,
        "degree": 3,
        "in_degree": 2,
        "out_degree": 1
      }
    },
    "map_utils.py": {
      "path": "map_utils.py",
      "name": "map_utils.py",
      "size_bytes": 12706,
      "total_lines": 301,
      "code_lines": 225,
      "comment_lines": 31,
      "blank_lines": 45,
      "complexity": 38,
      "avg_complexity": 19.0,
      "modified": 1753042029.9663045,
      "type": "utility",
      "functions_count": 2,
      "classes_count": 0,
      "imports_count": 4,
      "content_preview": "import pandas as pd\nimport logging\nfrom shapely.geometry import Point, Polygon, LineString\nfrom shapely.ops import transform as shapely_transform\nimport pyproj\n\n\ndef filter_selection_by_shape(loca_df, drawn_geojson):\n    \"\"\"Filter borehole data by drawn shape with extensive logging\"\"\"\n    logging.info(\"====== FILTER_SELECTION_BY_SHAPE CALLED ======\")\n    logging.info(f\"loca_df type: {type(loca_df)}\")\n    logging.info(f\"drawn_geojson type: {type(drawn_geojson)}\")\n\n    # Validate inputs\n    if loc...",
      "git_info": {
        "last_commit": "b7eb5165",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 21:11:29 +0100",
        "last_message": "10.2 leftovers-app works"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.065,
        "degree": 3,
        "in_degree": 3,
        "out_degree": 0
      }
    },
    "memory_manager.py": {
      "path": "memory_manager.py",
      "name": "memory_manager.py",
      "size_bytes": 14533,
      "total_lines": 417,
      "code_lines": 302,
      "comment_lines": 20,
      "blank_lines": 95,
      "complexity": 52,
      "avg_complexity": 3.06,
      "modified": 1753042036.0977294,
      "type": "core",
      "functions_count": 17,
      "classes_count": 2,
      "imports_count": 10,
      "content_preview": "\"\"\"\nMemory Management Module\n\nThis module provides comprehensive memory monitoring, cleanup routines, and optimization\nutilities for the Geo Borehole Sections Render application.\n\"\"\"\n\nimport gc\nimport logging\nimport psutil\nimport sys\nfrom typing import Dict, List, Optional, Any\nfrom datetime import datetime, timedelta\nfrom dataclasses import dataclass\nimport pandas as pd\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass MemoryStats:\n    \"\"\"Memory usage statistics.\"\"\"\n\n    rss_mb: float  #...",
      "git_info": {
        "last_commit": "b7eb5165",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 21:11:29 +0100",
        "last_message": "10.2 leftovers-app works"
      },
      "network_metrics": {
        "betweenness_centrality": 0.001,
        "closeness_centrality": 0.065,
        "degree": 5,
        "in_degree": 3,
        "out_degree": 2
      }
    },
    "optimization_baseline_test.py": {
      "path": "optimization_baseline_test.py",
      "name": "optimization_baseline_test.py",
      "size_bytes": 21183,
      "total_lines": 551,
      "code_lines": 410,
      "comment_lines": 41,
      "blank_lines": 100,
      "complexity": 69,
      "avg_complexity": 8.62,
      "modified": 1753044980.0549886,
      "type": "test",
      "functions_count": 8,
      "classes_count": 0,
      "imports_count": 10,
      "content_preview": "#!/usr/bin/env python3\n\"\"\"\nOptimization Baseline Test Script\n\nThis script tests the current performance and behavior of key application components\nbefore implementing optimizations, providing a baseline for comparison.\n\nTests covered:\n1. Matplotlib logging verbosity and font loading\n2. Marker click handler logging efficiency\n3. Coordinate transformation performance (individual vs batch)\n4. DataFrame memory usage and optimization\n5. Error handling behavior\n\"\"\"\n\nimport logging\nimport time\nimport p...",
      "git_info": {
        "last_commit": "41c333fd",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 22:00:20 +0100",
        "last_message": "debug optimisation"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 2,
        "in_degree": 0,
        "out_degree": 2
      }
    },
    "polyline_utils.py": {
      "path": "polyline_utils.py",
      "name": "polyline_utils.py",
      "size_bytes": 15598,
      "total_lines": 427,
      "code_lines": 322,
      "comment_lines": 35,
      "blank_lines": 70,
      "complexity": 59,
      "avg_complexity": 7.38,
      "modified": 1753031376.7282724,
      "type": "utility",
      "functions_count": 8,
      "classes_count": 0,
      "imports_count": 7,
      "content_preview": "\"\"\"\nFunctions for creating buffer zones around polylines\n\"\"\"\n\nimport logging\nimport pyproj\nfrom shapely.geometry import Point, LineString\nfrom shapely.ops import transform as shapely_transform\nimport dash_leaflet as dl\nimport numpy as np\nfrom coordinate_service import get_coordinate_service\n\n\ndef create_buffer_polygon(polyline_coords, buffer_meters=50):\n    \"\"\"\n    Create a buffer polygon around a polyline for visualization\n\n    Args:\n        polyline_coords: List of [lat, lon] coordinates\n     ...",
      "git_info": {
        "last_commit": "c9ce286d",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 18:17:54 +0100",
        "last_message": "10.1 - app works"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.052,
        "degree": 3,
        "in_degree": 2,
        "out_degree": 1
      }
    },
    "section_plot_professional.py": {
      "path": "section_plot_professional.py",
      "name": "section_plot_professional.py",
      "size_bytes": 22473,
      "total_lines": 612,
      "code_lines": 488,
      "comment_lines": 51,
      "blank_lines": 73,
      "complexity": 110,
      "avg_complexity": 27.5,
      "modified": 1753024227.4695652,
      "type": "core",
      "functions_count": 4,
      "classes_count": 0,
      "imports_count": 8,
      "content_preview": "from geology_code_utils import (\n    get_geology_color,\n    get_geology_pattern,\n)\nimport csv\nimport pandas as pd\nimport numpy as np\nimport pyproj\nimport re\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nfrom matplotlib.patches import Patch\n\n# Define missing constants if not already defined\nSECTION_MIN_WIDTH = 10\nSECTION_WIDTH_PER_BH = 2\nSECTION_BASE_HEIGHT = 6\nSECTION_MAX_HEIGHT = 20\nSECTION_PLOT_AXIS_FONTSIZE = 10\n\n\ndef parse_ags_geol_section_from_string(content):\n    \"\"\"Pa...",
      "git_info": {
        "last_commit": "6d247995",
        "last_author": "carlos51599",
        "last_date": "2025-07-19 14:33:29 +0100",
        "last_message": "12"
      },
      "network_metrics": {
        "betweenness_centrality": 0.001,
        "closeness_centrality": 0.178,
        "degree": 4,
        "in_degree": 3,
        "out_degree": 1
      }
    },
    "test_ags_integration.py": {
      "path": "test_ags_integration.py",
      "name": "test_ags_integration.py",
      "size_bytes": 1649,
      "total_lines": 51,
      "code_lines": 38,
      "comment_lines": 3,
      "blank_lines": 10,
      "complexity": 3,
      "avg_complexity": 3.0,
      "modified": 1753024227.4695652,
      "type": "test",
      "functions_count": 1,
      "classes_count": 0,
      "imports_count": 1,
      "content_preview": "#!/usr/bin/env python3\n\"\"\"\nTest script to verify AGS integration with geology code mapping.\n\"\"\"\n\nfrom borehole_log_professional import plot_borehole_log_from_ags_content\n\n\ndef test_ags_integration():\n    \"\"\"Test AGS integration with geology code mapping.\"\"\"\n\n    # Create minimal test AGS content\n    test_ags_content = \"\"\"\nGROUP,GEOL\nHEADING,LOCA_ID,GEOL_TOP,GEOL_BASE,GEOL_LEG,GEOL_DESC\nDATA,BH01,0.0,1.5,101,TOPSOIL - Brown organic topsoil\nDATA,BH01,1.5,3.0,203,Sandy CLAY - Firm brown sandy clay\n...",
      "git_info": {
        "last_commit": "6d247995",
        "last_author": "carlos51599",
        "last_date": "2025-07-19 14:33:29 +0100",
        "last_message": "12"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 1,
        "in_degree": 0,
        "out_degree": 1
      }
    },
    "test_alignment.py": {
      "path": "test_alignment.py",
      "name": "test_alignment.py",
      "size_bytes": 2584,
      "total_lines": 71,
      "code_lines": 55,
      "comment_lines": 3,
      "blank_lines": 13,
      "complexity": 3,
      "avg_complexity": 3.0,
      "modified": 1753024227.479557,
      "type": "test",
      "functions_count": 1,
      "classes_count": 0,
      "imports_count": 5,
      "content_preview": "#!/usr/bin/env python3\n\"\"\"\nTest script to verify text box alignment with geological layers\n\"\"\"\n\nimport pandas as pd\nimport logging\nfrom borehole_log_professional import create_professional_borehole_log\nimport base64\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\n\n\ndef test_layer_alignment():\n    \"\"\"Test text box alignment with geological layer boundaries\"\"\"\n\n    # Create test data with varying layer thicknesses and description lengths\n    alignment_data = pd.DataFrame(\n        {\n  ...",
      "git_info": {
        "last_commit": "6d247995",
        "last_author": "carlos51599",
        "last_date": "2025-07-19 14:33:29 +0100",
        "last_message": "12"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 1,
        "in_degree": 0,
        "out_degree": 1
      }
    },
    "test_callback_refactoring_comprehensive.py": {
      "path": "test_callback_refactoring_comprehensive.py",
      "name": "test_callback_refactoring_comprehensive.py",
      "size_bytes": 8529,
      "total_lines": 258,
      "code_lines": 184,
      "comment_lines": 18,
      "blank_lines": 56,
      "complexity": 19,
      "avg_complexity": 2.11,
      "modified": 1753034347.8613484,
      "type": "test",
      "functions_count": 9,
      "classes_count": 1,
      "imports_count": 7,
      "content_preview": "\"\"\"\nComprehensive Callback Refactoring Validation Test\n\nThis test validates that all the refactored callback modules work correctly\nand that the new architecture is functioning as intended.\n\"\"\"\n\nimport logging\nimport sys\nimport traceback\n\n# Configure logging for test output\nlogging.basicConfig(level=logging.INFO, format=\"%(levelname)s:%(name)s:%(message)s\")\n\n\ndef test_all_callback_imports():\n    \"\"\"Test that all callback modules can be imported successfully.\"\"\"\n    print(\"\ud83e\uddea Testing all callback ...",
      "git_info": {
        "last_commit": "da3fd18f",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 19:09:44 +0100",
        "last_message": "10.2 - app works"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 2,
        "in_degree": 0,
        "out_degree": 2
      }
    },
    "test_cascading.py": {
      "path": "test_cascading.py",
      "name": "test_cascading.py",
      "size_bytes": 2855,
      "total_lines": 67,
      "code_lines": 51,
      "comment_lines": 5,
      "blank_lines": 11,
      "complexity": 2,
      "avg_complexity": 2.0,
      "modified": 1753024227.4951925,
      "type": "test",
      "functions_count": 1,
      "classes_count": 0,
      "imports_count": 3,
      "content_preview": "#!/usr/bin/env python3\n\"\"\"\nTest script to verify cascading text box push-down behavior.\nThis test specifically checks if a very long first text box properly pushes\nall subsequent text boxes down in a cascading manner.\n\"\"\"\n\nimport pandas as pd\nfrom borehole_log_professional import create_professional_borehole_log\n\n\ndef test_cascading_pushdown():\n    \"\"\"Test cascading push-down behavior with a very long first description.\"\"\"\n\n    print(\"Creating test to verify cascading text box push-down behavior...",
      "git_info": {
        "last_commit": "6d247995",
        "last_author": "carlos51599",
        "last_date": "2025-07-19 14:33:29 +0100",
        "last_message": "12"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 1,
        "in_degree": 0,
        "out_degree": 1
      }
    },
    "test_column_width_diagnostic.py": {
      "path": "test_column_width_diagnostic.py",
      "name": "test_column_width_diagnostic.py",
      "size_bytes": 0,
      "total_lines": 0,
      "code_lines": 0,
      "comment_lines": 0,
      "blank_lines": 0,
      "complexity": 0,
      "avg_complexity": 0,
      "modified": 1753024227.5037057,
      "type": "test",
      "functions_count": 0,
      "classes_count": 0,
      "imports_count": 0,
      "content_preview": "",
      "git_info": {
        "last_commit": "7cb34655",
        "last_author": "carlos51599",
        "last_date": "2025-07-19 15:46:14 +0100",
        "last_message": "13"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 0,
        "in_degree": 0,
        "out_degree": 0
      }
    },
    "test_comprehensive_text_boxes.py": {
      "path": "test_comprehensive_text_boxes.py",
      "name": "test_comprehensive_text_boxes.py",
      "size_bytes": 5213,
      "total_lines": 124,
      "code_lines": 102,
      "comment_lines": 5,
      "blank_lines": 17,
      "complexity": 5,
      "avg_complexity": 5.0,
      "modified": 1753024227.5037057,
      "type": "test",
      "functions_count": 1,
      "classes_count": 0,
      "imports_count": 4,
      "content_preview": "#!/usr/bin/env python3\n\"\"\"\nComprehensive test script for the text box implementation in borehole_log_professional.py\nTests various scenarios including short/long descriptions and edge cases.\n\"\"\"\n\nimport pandas as pd\nimport logging\nfrom borehole_log_professional import create_professional_borehole_log\nimport base64\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\n\n\ndef test_comprehensive_text_boxes():\n    \"\"\"Test the text box implementation with various scenarios\"\"\"\n\n    # Test case 1...",
      "git_info": {
        "last_commit": "6d247995",
        "last_author": "carlos51599",
        "last_date": "2025-07-19 14:33:29 +0100",
        "last_message": "12"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 1,
        "in_degree": 0,
        "out_degree": 1
      }
    },
    "test_coordinate_service.py": {
      "path": "test_coordinate_service.py",
      "name": "test_coordinate_service.py",
      "size_bytes": 7481,
      "total_lines": 218,
      "code_lines": 152,
      "comment_lines": 22,
      "blank_lines": 44,
      "complexity": 17,
      "avg_complexity": 5.67,
      "modified": 1753031377.7527266,
      "type": "test",
      "functions_count": 3,
      "classes_count": 0,
      "imports_count": 6,
      "content_preview": "\"\"\"\nTest script to validate coordinate transformation service integration\n\"\"\"\n\nimport logging\nimport numpy as np\nimport sys\nimport os\n\n# Add the project root to Python path\nsys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))\n\nfrom coordinate_service import get_coordinate_service\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO, format=\"%(asctime)s - %(levelname)s - %(message)s\"\n)\nlogger = logging.getLogger(__name__)\n\n\ndef test_coordinate_service():\n    \"\"\"Test the coor...",
      "git_info": {
        "last_commit": "c9ce286d",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 18:17:54 +0100",
        "last_message": "10.1 - app works"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 2,
        "in_degree": 0,
        "out_degree": 2
      }
    },
    "test_enhanced_text_boxes.py": {
      "path": "test_enhanced_text_boxes.py",
      "name": "test_enhanced_text_boxes.py",
      "size_bytes": 3460,
      "total_lines": 81,
      "code_lines": 62,
      "comment_lines": 5,
      "blank_lines": 14,
      "complexity": 4,
      "avg_complexity": 4.0,
      "modified": 1753024227.5037057,
      "type": "test",
      "functions_count": 1,
      "classes_count": 0,
      "imports_count": 4,
      "content_preview": "#!/usr/bin/env python3\n\"\"\"\nTest script to verify the modified text box rendering with shortened boundaries\nand diagonal connector lines in borehole_log_professional.py\n\"\"\"\n\nimport pandas as pd\nimport logging\nfrom borehole_log_professional import create_professional_borehole_log\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\n\n\ndef test_enhanced_text_boxes():\n    \"\"\"Test the enhanced text box rendering with connector lines.\"\"\"\n\n    # Create sample data with varying layer thicknesses ...",
      "git_info": {
        "last_commit": "610cd5aa",
        "last_author": "carlos51599",
        "last_date": "2025-07-19 16:56:11 +0100",
        "last_message": "14"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 1,
        "in_degree": 0,
        "out_degree": 1
      }
    },
    "test_forced_overlap.py": {
      "path": "test_forced_overlap.py",
      "name": "test_forced_overlap.py",
      "size_bytes": 2534,
      "total_lines": 56,
      "code_lines": 39,
      "comment_lines": 6,
      "blank_lines": 11,
      "complexity": 2,
      "avg_complexity": 2.0,
      "modified": 1753024227.5194635,
      "type": "test",
      "functions_count": 1,
      "classes_count": 0,
      "imports_count": 3,
      "content_preview": "#!/usr/bin/env python3\n\"\"\"\nTest script with forced overlap to debug cascading behavior.\n\"\"\"\n\nimport pandas as pd\nfrom borehole_log_professional import create_professional_borehole_log\n\n\ndef test_forced_overlap():\n    \"\"\"Test with forced overlap to verify push-down behavior.\"\"\"\n\n    print(\"Creating test with forced overlap...\")\n\n    # Create test data where multiple descriptions will clearly overlap\n    test_data = pd.DataFrame(\n        {\n            \"Depth_Top\": [0.0, 0.5, 1.0, 1.5, 2.0],  # Tig...",
      "git_info": {
        "last_commit": "6d247995",
        "last_author": "carlos51599",
        "last_date": "2025-07-19 14:33:29 +0100",
        "last_message": "12"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 1,
        "in_degree": 0,
        "out_degree": 1
      }
    },
    "test_implementation_validation.py": {
      "path": "test_implementation_validation.py",
      "name": "test_implementation_validation.py",
      "size_bytes": 22573,
      "total_lines": 683,
      "code_lines": 557,
      "comment_lines": 34,
      "blank_lines": 92,
      "complexity": 70,
      "avg_complexity": 5.38,
      "modified": 1753031385.0113494,
      "type": "test",
      "functions_count": 13,
      "classes_count": 1,
      "imports_count": 13,
      "content_preview": "\"\"\"\nComprehensive Implementation Validation Test\n\nTests all 8 immediate actions implemented in the codebase health improvement project.\nValidates that each improvement is working correctly and provides detailed reporting.\n\nImmediate Actions Tested:\n1. Memory leak fixes\n2. File size validation\n3. Error handling standardization\n4. Coordinate transformation service\n5. Constants extraction\n6. Loading indicators\n7. Error recovery mechanisms\n8. Health check endpoint\n\"\"\"\n\nimport logging\nimport time\nimp...",
      "git_info": {
        "last_commit": "c9ce286d",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 18:17:54 +0100",
        "last_message": "10.1 - app works"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 7,
        "in_degree": 0,
        "out_degree": 7
      }
    },
    "test_layer_order.py": {
      "path": "test_layer_order.py",
      "name": "test_layer_order.py",
      "size_bytes": 2450,
      "total_lines": 72,
      "code_lines": 54,
      "comment_lines": 4,
      "blank_lines": 14,
      "complexity": 4,
      "avg_complexity": 4.0,
      "modified": 1753024227.5317457,
      "type": "test",
      "functions_count": 1,
      "classes_count": 0,
      "imports_count": 5,
      "content_preview": "#!/usr/bin/env python3\n\"\"\"\nTest script with numbered layers to verify correct stacking order\n\"\"\"\n\nimport pandas as pd\nimport logging\nfrom borehole_log_professional import create_professional_borehole_log\nimport base64\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\n\n\ndef test_numbered_layers():\n    \"\"\"Test with simple numbered layers to verify stacking order\"\"\"\n\n    # Create simple test data with numbered layers\n    numbered_data = pd.DataFrame(\n        {\n            \"Depth_Top\": [0...",
      "git_info": {
        "last_commit": "6d247995",
        "last_author": "carlos51599",
        "last_date": "2025-07-19 14:33:29 +0100",
        "last_message": "12"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 1,
        "in_degree": 0,
        "out_degree": 1
      }
    },
    "test_legend_mapping.py": {
      "path": "test_legend_mapping.py",
      "name": "test_legend_mapping.py",
      "size_bytes": 2208,
      "total_lines": 66,
      "code_lines": 51,
      "comment_lines": 4,
      "blank_lines": 11,
      "complexity": 3,
      "avg_complexity": 3.0,
      "modified": 1753024227.5330796,
      "type": "test",
      "functions_count": 1,
      "classes_count": 0,
      "imports_count": 3,
      "content_preview": "#!/usr/bin/env python3\n\"\"\"\nTest script to verify geology code color and hatch mapping works correctly.\n\"\"\"\n\nimport pandas as pd\nfrom borehole_log_professional import create_professional_borehole_log\nfrom geology_code_utils import get_geology_color, get_geology_pattern\n\n\ndef test_geology_mapping():\n    \"\"\"Test that geology code mapping works correctly.\"\"\"\n\n    # Test codes that should exist in the CSV\n    test_codes = [\"101\", \"203\", \"501\", \"202\", \"801\"]\n\n    print(\"Testing geology code mapping:\")...",
      "git_info": {
        "last_commit": "6d247995",
        "last_author": "carlos51599",
        "last_date": "2025-07-19 14:33:29 +0100",
        "last_message": "12"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 2,
        "in_degree": 0,
        "out_degree": 2
      }
    },
    "test_optimizations.py": {
      "path": "test_optimizations.py",
      "name": "test_optimizations.py",
      "size_bytes": 5799,
      "total_lines": 185,
      "code_lines": 130,
      "comment_lines": 8,
      "blank_lines": 47,
      "complexity": 14,
      "avg_complexity": 2.33,
      "modified": 1753042041.5779774,
      "type": "test",
      "functions_count": 6,
      "classes_count": 0,
      "imports_count": 9,
      "content_preview": "#!/usr/bin/env python3\n\"\"\"\nTest script to validate all optimization systems are working correctly\n\"\"\"\n\nimport pandas as pd\nimport numpy as np\nimport sys\nimport os\n\n\ndef test_memory_optimization():\n    \"\"\"Test DataFrame memory optimization\"\"\"\n    print(\"=== Testing DataFrame Memory Optimization ===\")\n\n    try:\n        from memory_manager import optimize_dataframe_memory, monitor_memory_usage\n\n        # Create test DataFrame\n        test_df = pd.DataFrame(\n            {\n                \"string_col...",
      "git_info": {
        "last_commit": "b7eb5165",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 21:11:29 +0100",
        "last_message": "10.2 leftovers-app works"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 3,
        "in_degree": 0,
        "out_degree": 3
      }
    },
    "test_overflow.py": {
      "path": "test_overflow.py",
      "name": "test_overflow.py",
      "size_bytes": 0,
      "total_lines": 0,
      "code_lines": 0,
      "comment_lines": 0,
      "blank_lines": 0,
      "complexity": 0,
      "avg_complexity": 0,
      "modified": 1753024227.557807,
      "type": "test",
      "functions_count": 0,
      "classes_count": 0,
      "imports_count": 0,
      "content_preview": "",
      "git_info": {
        "last_commit": "7cb34655",
        "last_author": "carlos51599",
        "last_date": "2025-07-19 15:46:14 +0100",
        "last_message": "13"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 0,
        "in_degree": 0,
        "out_degree": 0
      }
    },
    "test_overflow_management.py": {
      "path": "test_overflow_management.py",
      "name": "test_overflow_management.py",
      "size_bytes": 7368,
      "total_lines": 187,
      "code_lines": 153,
      "comment_lines": 6,
      "blank_lines": 28,
      "complexity": 11,
      "avg_complexity": 5.5,
      "modified": 1753024227.560806,
      "type": "test",
      "functions_count": 2,
      "classes_count": 0,
      "imports_count": 5,
      "content_preview": "#!/usr/bin/env python3\n\"\"\"\nComprehensive test for the new text box overflow management system.\nTests both layer-continues and layer-complete overflow scenarios.\n\"\"\"\n\nimport pandas as pd\nimport logging\nfrom borehole_log_professional import create_professional_borehole_log\nimport base64\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\n\n\ndef test_overflow_management_system():\n    \"\"\"\n    Test the comprehensive overflow management system with various scenarios.\n    \"\"\"\n\n    # Create test...",
      "git_info": {
        "last_commit": "7cb34655",
        "last_author": "carlos51599",
        "last_date": "2025-07-19 15:46:14 +0100",
        "last_message": "13"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 1,
        "in_degree": 0,
        "out_degree": 1
      }
    },
    "test_pushdown_extension.py": {
      "path": "test_pushdown_extension.py",
      "name": "test_pushdown_extension.py",
      "size_bytes": 6025,
      "total_lines": 157,
      "code_lines": 125,
      "comment_lines": 7,
      "blank_lines": 25,
      "complexity": 9,
      "avg_complexity": 4.5,
      "modified": 1753024227.5660968,
      "type": "test",
      "functions_count": 2,
      "classes_count": 0,
      "imports_count": 5,
      "content_preview": "#!/usr/bin/env python3\n\"\"\"\nTest script to verify that text boxes extend to match their layer's bottom boundary\nin all scenarios, including when they are pushed down due to conflicts but remain\nwithin their layer boundaries.\n\"\"\"\n\nimport pandas as pd\nimport logging\nfrom borehole_log_professional import create_professional_borehole_log\nimport base64\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\n\n\ndef test_pushed_down_extension():\n    \"\"\"\n    Test that text boxes extend to layer bound...",
      "git_info": {
        "last_commit": "7cb34655",
        "last_author": "carlos51599",
        "last_date": "2025-07-19 15:46:14 +0100",
        "last_message": "13"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 1,
        "in_degree": 0,
        "out_degree": 1
      }
    },
    "test_refactoring_validation.py": {
      "path": "test_refactoring_validation.py",
      "name": "test_refactoring_validation.py",
      "size_bytes": 8897,
      "total_lines": 294,
      "code_lines": 200,
      "comment_lines": 19,
      "blank_lines": 75,
      "complexity": 12,
      "avg_complexity": 1.33,
      "modified": 1753034344.100445,
      "type": "test",
      "functions_count": 9,
      "classes_count": 1,
      "imports_count": 10,
      "content_preview": "\"\"\"\nTest for State Management and Callback Refactoring\n\nThis test validates that the new state management system and\ncallback refactoring work correctly.\n\"\"\"\n\nimport logging\nimport pytest\nfrom unittest.mock import Mock, patch\nimport pandas as pd\n\n# Set up logging for tests\nlogging.basicConfig(level=logging.INFO)\n\n\ndef test_state_management_creation():\n    \"\"\"Test that state management objects can be created.\"\"\"\n\n    from state_management import get_app_state_manager, AppState\n    from state_mana...",
      "git_info": {
        "last_commit": "da3fd18f",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 19:09:44 +0100",
        "last_message": "10.2 - app works"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 2,
        "in_degree": 0,
        "out_degree": 2
      }
    },
    "test_short_text_alignment.py": {
      "path": "test_short_text_alignment.py",
      "name": "test_short_text_alignment.py",
      "size_bytes": 0,
      "total_lines": 0,
      "code_lines": 0,
      "comment_lines": 0,
      "blank_lines": 0,
      "complexity": 0,
      "avg_complexity": 0,
      "modified": 1753024227.5708835,
      "type": "test",
      "functions_count": 0,
      "classes_count": 0,
      "imports_count": 0,
      "content_preview": "",
      "git_info": {
        "last_commit": "7cb34655",
        "last_author": "carlos51599",
        "last_date": "2025-07-19 15:46:14 +0100",
        "last_message": "13"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 0,
        "in_degree": 0,
        "out_degree": 0
      }
    },
    "test_text_boxes.py": {
      "path": "test_text_boxes.py",
      "name": "test_text_boxes.py",
      "size_bytes": 2470,
      "total_lines": 69,
      "code_lines": 49,
      "comment_lines": 6,
      "blank_lines": 14,
      "complexity": 4,
      "avg_complexity": 4.0,
      "modified": 1753024227.578432,
      "type": "test",
      "functions_count": 1,
      "classes_count": 0,
      "imports_count": 5,
      "content_preview": "#!/usr/bin/env python3\n\"\"\"\nTest script for the new text box implementation in borehole_log_professional.py\n\"\"\"\n\nimport pandas as pd\nimport logging\nfrom borehole_log_professional import create_professional_borehole_log\nimport base64\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\n\n\ndef test_text_box_implementation():\n    \"\"\"Test the new text box implementation with sample data\"\"\"\n\n    # Create sample data with some long descriptions to test wrapping\n    sample_data = pd.DataFrame(\n  ...",
      "git_info": {
        "last_commit": "6d247995",
        "last_author": "carlos51599",
        "last_date": "2025-07-19 14:33:29 +0100",
        "last_message": "12"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 1,
        "in_degree": 0,
        "out_degree": 1
      }
    },
    "test_text_box_extension.py": {
      "path": "test_text_box_extension.py",
      "name": "test_text_box_extension.py",
      "size_bytes": 3413,
      "total_lines": 90,
      "code_lines": 70,
      "comment_lines": 6,
      "blank_lines": 14,
      "complexity": 5,
      "avg_complexity": 5.0,
      "modified": 1753024227.5708835,
      "type": "test",
      "functions_count": 1,
      "classes_count": 0,
      "imports_count": 5,
      "content_preview": "#!/usr/bin/env python3\n\"\"\"\nTest script to verify that text boxes extend to match their layer's bottom boundary\nwhen the description is short.\n\"\"\"\n\nimport pandas as pd\nimport logging\nfrom borehole_log_professional import create_professional_borehole_log\nimport base64\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\n\n\ndef test_text_box_extension():\n    \"\"\"Test that text boxes extend to match layer boundaries when descriptions are short\"\"\"\n\n    # Create sample data with mixed descriptio...",
      "git_info": {
        "last_commit": "7cb34655",
        "last_author": "carlos51599",
        "last_date": "2025-07-19 15:46:14 +0100",
        "last_message": "13"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 1,
        "in_degree": 0,
        "out_degree": 1
      }
    },
    "test_verification.py": {
      "path": "test_verification.py",
      "name": "test_verification.py",
      "size_bytes": 1834,
      "total_lines": 65,
      "code_lines": 49,
      "comment_lines": 3,
      "blank_lines": 13,
      "complexity": 3,
      "avg_complexity": 3.0,
      "modified": 1753024227.578432,
      "type": "test",
      "functions_count": 1,
      "classes_count": 0,
      "imports_count": 5,
      "content_preview": "#!/usr/bin/env python3\n\"\"\"\nSimple verification test with obvious layer names\n\"\"\"\n\nimport pandas as pd\nimport logging\nfrom borehole_log_professional import create_professional_borehole_log\nimport base64\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\n\n\ndef test_simple_verification():\n    \"\"\"Test with very simple, obvious layer names\"\"\"\n\n    # Create very simple test data\n    simple_data = pd.DataFrame(\n        {\n            \"Depth_Top\": [0.0, 1.0, 2.0],\n            \"Depth_Base\": [1.0...",
      "git_info": {
        "last_commit": "6d247995",
        "last_author": "carlos51599",
        "last_date": "2025-07-19 14:33:29 +0100",
        "last_message": "12"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 1,
        "in_degree": 0,
        "out_degree": 1
      }
    },
    "utils.py": {
      "path": "utils.py",
      "name": "utils.py",
      "size_bytes": 88,
      "total_lines": 2,
      "code_lines": 0,
      "comment_lines": 2,
      "blank_lines": 0,
      "complexity": 0,
      "avg_complexity": 0,
      "modified": 1751648946.844632,
      "type": "utility",
      "functions_count": 0,
      "classes_count": 0,
      "imports_count": 0,
      "content_preview": "# Utility functions for Dash app\n# Copy or adapt functions from ../utils.py as needed\n",
      "git_info": {
        "last_commit": "cb667d03",
        "last_author": "carlos51599",
        "last_date": "2025-07-06 09:03:08 +0100",
        "last_message": "working"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.014,
        "degree": 1,
        "in_degree": 1,
        "out_degree": 0
      }
    },
    "callbacks\\base.py": {
      "path": "callbacks\\base.py",
      "name": "base.py",
      "size_bytes": 1586,
      "total_lines": 58,
      "code_lines": 37,
      "comment_lines": 0,
      "blank_lines": 21,
      "complexity": 8,
      "avg_complexity": 1.14,
      "modified": 1753034347.2559276,
      "type": "event",
      "functions_count": 7,
      "classes_count": 6,
      "imports_count": 2,
      "content_preview": "\"\"\"\nBase Callback Classes\n\nThis module contains the base classes for all callback types,\nseparated to avoid circular import issues.\n\"\"\"\n\nimport logging\nfrom abc import ABC, abstractmethod\n\n\nclass CallbackBase(ABC):\n    \"\"\"Abstract base class for all callbacks.\"\"\"\n\n    def __init__(self, name: str, category: str = None):\n        self.name = name\n        self.category = category or self.__class__.__name__.lower()\n        self.logger = logging.getLogger(f\"callbacks.{self.name}\")\n\n    @abstractmetho...",
      "git_info": {
        "last_commit": "da3fd18f",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 19:09:44 +0100",
        "last_message": "10.2 - app works"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 0,
        "in_degree": 0,
        "out_degree": 0
      }
    },
    "callbacks\\file_upload.py": {
      "path": "callbacks\\file_upload.py",
      "name": "file_upload.py",
      "size_bytes": 17922,
      "total_lines": 511,
      "code_lines": 384,
      "comment_lines": 27,
      "blank_lines": 100,
      "complexity": 60,
      "avg_complexity": 4.0,
      "modified": 1753034341.4525416,
      "type": "core",
      "functions_count": 15,
      "classes_count": 1,
      "imports_count": 15,
      "content_preview": "\"\"\"\nFile Upload Callbacks\n\nThis module handles all file upload related callbacks, extracted from\nthe monolithic callbacks_split.py file for better organization and maintainability.\n\"\"\"\n\nimport logging\nimport base64\nimport statistics\nfrom datetime import datetime\nfrom typing import List, Tuple, Any, Optional\nimport pandas as pd\nfrom dash import html, dcc, Output, Input, State, callback_context\nimport dash\n\nfrom .base import FileUploadCallbackBase\nfrom data_loader import load_all_loca_data\nfrom co...",
      "git_info": {
        "last_commit": "da3fd18f",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 19:09:44 +0100",
        "last_message": "10.2 - app works"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 5,
        "in_degree": 0,
        "out_degree": 5
      }
    },
    "callbacks\\map_interactions.py": {
      "path": "callbacks\\map_interactions.py",
      "name": "map_interactions.py",
      "size_bytes": 24008,
      "total_lines": 671,
      "code_lines": 516,
      "comment_lines": 40,
      "blank_lines": 115,
      "complexity": 72,
      "avg_complexity": 3.43,
      "modified": 1753042035.1872334,
      "type": "core",
      "functions_count": 21,
      "classes_count": 1,
      "imports_count": 16,
      "content_preview": "\"\"\"\nMap Interaction Callbacks\n\nThis module handles all map interaction related callbacks, including drawing,\nPCA line calculation, marker color updates, and selection management.\n\"\"\"\n\nimport logging\nfrom datetime import datetime\nfrom typing import List, Tuple, Any, Optional, Dict\nimport pandas as pd\nfrom dash import html, Output, Input, State, callback_context\nimport dash\nfrom sklearn.decomposition import PCA\nimport dash_leaflet as dl\n\nfrom .base import MapInteractionCallbackBase\nfrom map_utils ...",
      "git_info": {
        "last_commit": "b7eb5165",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 21:11:29 +0100",
        "last_message": "10.2 leftovers-app works"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 7,
        "in_degree": 0,
        "out_degree": 7
      }
    },
    "callbacks\\marker_handling.py": {
      "path": "callbacks\\marker_handling.py",
      "name": "marker_handling.py",
      "size_bytes": 13056,
      "total_lines": 325,
      "code_lines": 258,
      "comment_lines": 22,
      "blank_lines": 45,
      "complexity": 48,
      "avg_complexity": 4.8,
      "modified": 1753034346.9754417,
      "type": "event",
      "functions_count": 10,
      "classes_count": 1,
      "imports_count": 9,
      "content_preview": "\"\"\"\nMarker Handling Callbacks Module\n\nThis module handles all borehole marker interactions and click functionality,\nrefactored from the original monolithic callbacks_split.py file.\n\nResponsibilities:\n- Marker click handling for borehole log generation\n- Marker color state management (active/inactive)\n- Borehole log generation and display\n- Selection shape visualization\n\"\"\"\n\nimport logging\nimport dash\nfrom dash import Output, Input, State, html, no_update\nimport pandas as pd\nimport dash_leaflet a...",
      "git_info": {
        "last_commit": "da3fd18f",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 19:09:44 +0100",
        "last_message": "10.2 - app works"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 3,
        "in_degree": 0,
        "out_degree": 3
      }
    },
    "callbacks\\plot_generation.py": {
      "path": "callbacks\\plot_generation.py",
      "name": "plot_generation.py",
      "size_bytes": 11335,
      "total_lines": 269,
      "code_lines": 212,
      "comment_lines": 15,
      "blank_lines": 42,
      "complexity": 31,
      "avg_complexity": 3.1,
      "modified": 1753034344.9403644,
      "type": "event",
      "functions_count": 10,
      "classes_count": 1,
      "imports_count": 15,
      "content_preview": "\"\"\"\nPlot Generation Callbacks Module\n\nThis module handles all plot generation and download functionality,\nrefactored from the original monolithic callbacks_split.py file.\n\nResponsibilities:\n- Section plot generation from AGS data\n- Plot download functionality\n- Coordinate transformation for polyline sections\n- Memory management for matplotlib figures\n\"\"\"\n\nimport logging\nimport io\nimport base64\nfrom datetime import datetime\nimport dash\nfrom dash import Output, Input, State, dcc, html\nimport panda...",
      "git_info": {
        "last_commit": "da3fd18f",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 19:09:44 +0100",
        "last_message": "10.2 - app works"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 5,
        "in_degree": 0,
        "out_degree": 5
      }
    },
    "callbacks\\search_functionality.py": {
      "path": "callbacks\\search_functionality.py",
      "name": "search_functionality.py",
      "size_bytes": 12819,
      "total_lines": 329,
      "code_lines": 266,
      "comment_lines": 14,
      "blank_lines": 49,
      "complexity": 43,
      "avg_complexity": 3.91,
      "modified": 1753034345.9866972,
      "type": "core",
      "functions_count": 11,
      "classes_count": 1,
      "imports_count": 9,
      "content_preview": "\"\"\"\nSearch Functionality Callbacks Module\n\nThis module handles all borehole search and navigation functionality,\nrefactored from the original monolithic callbacks_split.py file.\n\nResponsibilities:\n- Search dropdown population and updates\n- Borehole search navigation\n- Map centering on selected boreholes\n- Search feedback and validation\n\"\"\"\n\nimport logging\nfrom dash import Output, Input, State, html, no_update\nimport pandas as pd\n\nfrom .base import SearchCallbackBase\nfrom state_management import ...",
      "git_info": {
        "last_commit": "da3fd18f",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 19:09:44 +0100",
        "last_message": "10.2 - app works"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 4,
        "in_degree": 0,
        "out_degree": 4
      }
    },
    "callbacks\\__init__.py": {
      "path": "callbacks\\__init__.py",
      "name": "__init__.py",
      "size_bytes": 4365,
      "total_lines": 140,
      "code_lines": 102,
      "comment_lines": 11,
      "blank_lines": 27,
      "complexity": 13,
      "avg_complexity": 2.17,
      "modified": 1753034340.175248,
      "type": "event",
      "functions_count": 6,
      "classes_count": 1,
      "imports_count": 8,
      "content_preview": "\"\"\"\nCallbacks Package\n\nThis package contains all the callback handling functionality for the Dash application,\norganized into focused modules for better maintainability and testing.\n\nThe package provides:\n- Base callback classes with common functionality\n- Centralized callback management and registration\n- Specialized callback modules for different application areas\n- Error handling and state management integration\n\"\"\"\n\nimport logging\nfrom typing import Any, Dict, List, Optional\n\n# Import base c...",
      "git_info": {
        "last_commit": "da3fd18f",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 19:09:44 +0100",
        "last_message": "10.2 - app works"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 0,
        "in_degree": 0,
        "out_degree": 0
      }
    },
    "old_streamlit_files\\app.py": {
      "path": "old_streamlit_files\\app.py",
      "name": "app.py",
      "size_bytes": 12939,
      "total_lines": 314,
      "code_lines": 251,
      "comment_lines": 25,
      "blank_lines": 38,
      "complexity": 11,
      "avg_complexity": 2.75,
      "modified": 1751662409.3682926,
      "type": "core",
      "functions_count": 4,
      "classes_count": 0,
      "imports_count": 14,
      "content_preview": "# --- Listen for select_bh event and draw a tiny circle to select the borehole ---\n# This must be placed after all imports and after loca_df is defined\n\n\ndef setup_bh_circle_event_bridge(loca_df):\n    import streamlit.components.v1 as components\n    import json\n    from map_utils import filter_selection_by_shape\n\n    components.html(\n        \"\"\"\n        <script>\n        window.addEventListener('message', function(event) {\n            if (event.data && event.data.type === 'select_bh') {\n         ...",
      "git_info": {
        "last_commit": "cb667d03",
        "last_author": "carlos51599",
        "last_date": "2025-07-06 09:03:08 +0100",
        "last_message": "working"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 3,
        "in_degree": 0,
        "out_degree": 3
      }
    },
    "old_streamlit_files\\borehole_log.py": {
      "path": "old_streamlit_files\\borehole_log.py",
      "name": "borehole_log.py",
      "size_bytes": 7663,
      "total_lines": 183,
      "code_lines": 154,
      "comment_lines": 23,
      "blank_lines": 6,
      "complexity": 28,
      "avg_complexity": 28.0,
      "modified": 1751662409.415172,
      "type": "core",
      "functions_count": 1,
      "classes_count": 0,
      "imports_count": 7,
      "content_preview": "import streamlit as st\n\n\nfrom config import LOG_FIG_HEIGHT, LOG_FIG_WIDTH\n\n\ndef render_borehole_log(\n    loca_id,\n    filename_map,\n    ags_files,\n    show_labels=True,\n    fig_height=LOG_FIG_HEIGHT,\n    fig_width=LOG_FIG_WIDTH,\n):\n    \"\"\"Display a simple borehole log for the selected LOCA_ID.\"\"\"\n    # Find which AGS file this borehole belongs to\n    ags_file = None\n    # If filename_map is a dict of (filename, content) pairs, but ags_files is a list of (filename, content),\n    # ensure we can a...",
      "git_info": {
        "last_commit": "cb667d03",
        "last_author": "carlos51599",
        "last_date": "2025-07-06 09:03:08 +0100",
        "last_message": "working"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 1,
        "in_degree": 0,
        "out_degree": 1
      }
    },
    "old_streamlit_files\\borehole_selection.py": {
      "path": "old_streamlit_files\\borehole_selection.py",
      "name": "borehole_selection.py",
      "size_bytes": 604,
      "total_lines": 18,
      "code_lines": 16,
      "comment_lines": 0,
      "blank_lines": 2,
      "complexity": 5,
      "avg_complexity": 5.0,
      "modified": 1751662409.4271324,
      "type": "core",
      "functions_count": 1,
      "classes_count": 0,
      "imports_count": 1,
      "content_preview": "import streamlit as st\n\n\ndef render_checkbox_grid(selected):\n    selected_ids = selected[\"LOCA_ID\"].tolist()\n    checked_ids = []\n    rows = (len(selected_ids) // 6) + 1\n    for i in range(rows):\n        cols = st.columns(6)\n        for j in range(6):\n            idx = i * 6 + j\n            if idx >= len(selected_ids):\n                break\n            with cols[j]:\n                bh = selected_ids[idx]\n                checked = st.checkbox(bh, value=True, key=f\"bh_{bh}\")\n                checke...",
      "git_info": {
        "last_commit": "cb667d03",
        "last_author": "carlos51599",
        "last_date": "2025-07-06 09:03:08 +0100",
        "last_message": "working"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 0,
        "in_degree": 0,
        "out_degree": 0
      }
    },
    "old_streamlit_files\\config.py": {
      "path": "old_streamlit_files\\config.py",
      "name": "config.py",
      "size_bytes": 366,
      "total_lines": 16,
      "code_lines": 8,
      "comment_lines": 5,
      "blank_lines": 3,
      "complexity": 0,
      "avg_complexity": 0,
      "modified": 1751662409.4341369,
      "type": "config",
      "functions_count": 0,
      "classes_count": 0,
      "imports_count": 0,
      "content_preview": "# config.py\n# Centralized configuration for figure and map sizes\n\n# Map display size\nMAP_HEIGHT = 400\nMAP_WIDTH = None  # Use None for full width in Streamlit\n\n# Borehole log figure size\nLOG_FIG_HEIGHT = 4\nLOG_FIG_WIDTH = 2.5\n\n# Section plot figure size\nSECTION_BASE_HEIGHT = 5\nSECTION_MAX_HEIGHT = 6\nSECTION_MIN_WIDTH = 8\nSECTION_WIDTH_PER_BH = 1.5\n",
      "git_info": {
        "last_commit": "cb667d03",
        "last_author": "carlos51599",
        "last_date": "2025-07-06 09:03:08 +0100",
        "last_message": "working"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 0,
        "in_degree": 0,
        "out_degree": 0
      }
    },
    "old_streamlit_files\\data_loader.py": {
      "path": "old_streamlit_files\\data_loader.py",
      "name": "data_loader.py",
      "size_bytes": 1838,
      "total_lines": 56,
      "code_lines": 49,
      "comment_lines": 0,
      "blank_lines": 7,
      "complexity": 21,
      "avg_complexity": 10.5,
      "modified": 1751662409.4426408,
      "type": "model",
      "functions_count": 2,
      "classes_count": 0,
      "imports_count": 4,
      "content_preview": "import csv\nimport pandas as pd\nimport os\nfrom utils import get_session_state, safe_temp_path\n\n\ndef parse_group(content, group_name):\n    lines = content.splitlines()\n    parsed = list(csv.reader(lines, delimiter=\",\", quotechar='\"'))\n    headings = []\n    data = []\n    in_group = False\n    for row in parsed:\n        if row and row[0] == \"GROUP\" and len(row) > 1 and row[1] == group_name:\n            in_group = True\n            continue\n        if in_group and row and row[0] == \"HEADING\":\n         ...",
      "git_info": {
        "last_commit": "cb667d03",
        "last_author": "carlos51599",
        "last_date": "2025-07-06 09:03:08 +0100",
        "last_message": "working"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 1,
        "in_degree": 0,
        "out_degree": 1
      }
    },
    "old_streamlit_files\\map_render.py": {
      "path": "old_streamlit_files\\map_render.py",
      "name": "map_render.py",
      "size_bytes": 8052,
      "total_lines": 187,
      "code_lines": 163,
      "comment_lines": 12,
      "blank_lines": 12,
      "complexity": 29,
      "avg_complexity": 29.0,
      "modified": 1751662409.50513,
      "type": "core",
      "functions_count": 1,
      "classes_count": 0,
      "imports_count": 8,
      "content_preview": "import folium\nfrom folium.plugins import Draw\nfrom folium import Marker, Icon, TileLayer, LayerControl, PolyLine\nfrom sklearn.decomposition import PCA\nimport streamlit as st\n\n\ndef render_map(loca_df, transformer, selected_boreholes):\n    map_center = st.session_state.get(\"map_center\")\n    map_zoom = st.session_state.get(\"map_zoom\", 17)\n    if not map_center:\n        map_center = [loca_df[\"lat\"].median(), loca_df[\"lon\"].median()]\n    m = folium.Map(location=map_center, zoom_start=map_zoom, tiles=...",
      "git_info": {
        "last_commit": "cb667d03",
        "last_author": "carlos51599",
        "last_date": "2025-07-06 09:03:08 +0100",
        "last_message": "working"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 0,
        "in_degree": 0,
        "out_degree": 0
      }
    },
    "old_streamlit_files\\map_utils.py": {
      "path": "old_streamlit_files\\map_utils.py",
      "name": "map_utils.py",
      "size_bytes": 1899,
      "total_lines": 49,
      "code_lines": 47,
      "comment_lines": 0,
      "blank_lines": 2,
      "complexity": 9,
      "avg_complexity": 9.0,
      "modified": 1751662409.5192218,
      "type": "utility",
      "functions_count": 1,
      "classes_count": 0,
      "imports_count": 3,
      "content_preview": "import pandas as pd\nfrom shapely.geometry import Point, Polygon, LineString\nfrom shapely.ops import transform as shapely_transform\nimport pyproj\n\n\ndef filter_selection_by_shape(geom, loca_df):\n    if geom is None:\n        return pd.DataFrame()\n    if geom[\"type\"] == \"Rectangle\":\n        coords = geom[\"coordinates\"][0]\n        lons = [pt[0] for pt in coords]\n        lats = [pt[1] for pt in coords]\n        min_lat, max_lat = min(lats), max(lats)\n        min_lon, max_lon = min(lons), max(lons)\n    ...",
      "git_info": {
        "last_commit": "cb667d03",
        "last_author": "carlos51599",
        "last_date": "2025-07-06 09:03:08 +0100",
        "last_message": "working"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 0,
        "in_degree": 0,
        "out_degree": 0
      }
    },
    "old_streamlit_files\\section_logic.py": {
      "path": "old_streamlit_files\\section_logic.py",
      "name": "section_logic.py",
      "size_bytes": 2464,
      "total_lines": 61,
      "code_lines": 58,
      "comment_lines": 0,
      "blank_lines": 3,
      "complexity": 17,
      "avg_complexity": 17.0,
      "modified": 1751662409.5473642,
      "type": "core",
      "functions_count": 1,
      "classes_count": 0,
      "imports_count": 6,
      "content_preview": "import streamlit as st\nfrom section_plot import plot_section_from_ags\nfrom sklearn.decomposition import PCA\nimport pyproj\nimport os\nimport tempfile\n\n\ndef generate_section_plot(filtered_ids, selected, filename_map, show_labels=True):\n    section_fig = None\n    id_to_file = selected.set_index(\"LOCA_ID\")[\"ags_file\"].to_dict()\n    section_line = None\n    last_shape = st.session_state.get(\"last_drawn_shape\", {})\n    if last_shape.get(\"type\") == \"LineString\":\n        coords = last_shape.get(\"coordinat...",
      "git_info": {
        "last_commit": "cb667d03",
        "last_author": "carlos51599",
        "last_date": "2025-07-06 09:03:08 +0100",
        "last_message": "working"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 0,
        "in_degree": 0,
        "out_degree": 0
      }
    },
    "old_streamlit_files\\section_plot.py": {
      "path": "old_streamlit_files\\section_plot.py",
      "name": "section_plot.py",
      "size_bytes": 19196,
      "total_lines": 467,
      "code_lines": 397,
      "comment_lines": 48,
      "blank_lines": 22,
      "complexity": 108,
      "avg_complexity": 27.0,
      "modified": 1751662409.6690588,
      "type": "core",
      "functions_count": 4,
      "classes_count": 0,
      "imports_count": 10,
      "content_preview": "# Required libraries: matplotlib, pandas\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom config import (\n    SECTION_BASE_HEIGHT,\n    SECTION_MAX_HEIGHT,\n    SECTION_MIN_WIDTH,\n    SECTION_WIDTH_PER_BH,\n)\nimport csv\nimport numpy as np\nimport os\nimport re\n\n# Path to AGS file (robust to script location)\nSCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))\nAGS_FILE = r\"C:\\Users\\dea29431.RSKGAD\\OneDrive - Rsk Group Limited\\Documents\\Geotech\\AGS Section\\FLRG - 2025-05-20 1711 - Preliminar...",
      "git_info": {
        "last_commit": "cb667d03",
        "last_author": "carlos51599",
        "last_date": "2025-07-06 09:03:08 +0100",
        "last_message": "working"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 1,
        "in_degree": 0,
        "out_degree": 1
      }
    },
    "old_streamlit_files\\utils.py": {
      "path": "old_streamlit_files\\utils.py",
      "name": "utils.py",
      "size_bytes": 1435,
      "total_lines": 44,
      "code_lines": 29,
      "comment_lines": 0,
      "blank_lines": 15,
      "complexity": 8,
      "avg_complexity": 1.33,
      "modified": 1751662409.687354,
      "type": "utility",
      "functions_count": 6,
      "classes_count": 0,
      "imports_count": 5,
      "content_preview": "from pyproj import Transformer\nimport streamlit as st\n\n\ndef latlon_to_osgb36(lon, lat):\n    \"\"\"Convert WGS84 lon/lat to OSGB36 easting/northing (EPSG:27700).\"\"\"\n    transformer = Transformer.from_crs(\"epsg:4326\", \"epsg:27700\", always_xy=True)\n    return transformer.transform(lon, lat)\n\n\ndef osgb36_to_latlon(easting, northing):\n    \"\"\"Convert OSGB36 easting/northing to WGS84 lat/lon.\"\"\"\n    transformer = Transformer.from_crs(\"epsg:27700\", \"epsg:4326\", always_xy=True)\n    return transformer.transf...",
      "git_info": {
        "last_commit": "cb667d03",
        "last_author": "carlos51599",
        "last_date": "2025-07-06 09:03:08 +0100",
        "last_message": "working"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 0,
        "in_degree": 0,
        "out_degree": 0
      }
    },
    "state_management\\app_state.py": {
      "path": "state_management\\app_state.py",
      "name": "app_state.py",
      "size_bytes": 10944,
      "total_lines": 298,
      "code_lines": 233,
      "comment_lines": 6,
      "blank_lines": 59,
      "complexity": 50,
      "avg_complexity": 2.38,
      "modified": 1753034339.0715258,
      "type": "core",
      "functions_count": 21,
      "classes_count": 1,
      "imports_count": 6,
      "content_preview": "\"\"\"\nCentralized Application State Manager\n\nThis module provides a singleton state manager that maintains all application state\nin a centralized, thread-safe manner. This replaces the chaotic \"State Spaghetti\"\npattern identified in the health report.\n\"\"\"\n\nimport logging\nimport threading\nfrom typing import Optional, Dict, Any, List\nfrom datetime import datetime\n\nfrom .state_models import (\n    BoreholeData,\n    MapState,\n    SelectionState,\n    PlotState,\n    UploadState,\n)\n\nlogger = logging.getLo...",
      "git_info": {
        "last_commit": "da3fd18f",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 19:09:44 +0100",
        "last_message": "10.2 - app works"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 0,
        "in_degree": 0,
        "out_degree": 0
      }
    },
    "state_management\\state_models.py": {
      "path": "state_management\\state_models.py",
      "name": "state_models.py",
      "size_bytes": 6160,
      "total_lines": 178,
      "code_lines": 144,
      "comment_lines": 0,
      "blank_lines": 34,
      "complexity": 23,
      "avg_complexity": 1.64,
      "modified": 1753034338.203584,
      "type": "model",
      "functions_count": 14,
      "classes_count": 5,
      "imports_count": 4,
      "content_preview": "\"\"\"\nState Models\n\nThis module defines the data models for managing application state.\nThese models provide type safety, validation, and clear interfaces\nfor state management throughout the application.\n\"\"\"\n\nfrom dataclasses import dataclass, field\nfrom typing import Optional, List, Dict, Any, Tuple\nimport pandas as pd\nfrom datetime import datetime\n\n\n@dataclass\nclass BoreholeData:\n    \"\"\"Model for borehole data management.\"\"\"\n\n    loca_df: Optional[pd.DataFrame] = None\n    filename_map: Dict[str,...",
      "git_info": {
        "last_commit": "da3fd18f",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 19:09:44 +0100",
        "last_message": "10.2 - app works"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 0,
        "in_degree": 0,
        "out_degree": 0
      }
    },
    "state_management\\__init__.py": {
      "path": "state_management\\__init__.py",
      "name": "__init__.py",
      "size_bytes": 538,
      "total_lines": 25,
      "code_lines": 22,
      "comment_lines": 0,
      "blank_lines": 3,
      "complexity": 0,
      "avg_complexity": 0,
      "modified": 1753034337.84344,
      "type": "core",
      "functions_count": 0,
      "classes_count": 0,
      "imports_count": 2,
      "content_preview": "\"\"\"\nState Management Package\n\nThis package provides centralized state management for the application,\neliminating the chaotic \"State Spaghetti\" pattern identified in the health report.\n\"\"\"\n\nfrom .app_state import AppState, get_app_state_manager\nfrom .state_models import (\n    BoreholeData,\n    MapState,\n    SelectionState,\n    PlotState,\n    UploadState,\n)\n\n__all__ = [\n    \"AppState\",\n    \"get_app_state_manager\",\n    \"BoreholeData\",\n    \"MapState\",\n    \"SelectionState\",\n    \"PlotState\",\n    \"Upl...",
      "git_info": {
        "last_commit": "da3fd18f",
        "last_author": "carlos51599",
        "last_date": "2025-07-20 19:09:44 +0100",
        "last_message": "10.2 - app works"
      },
      "network_metrics": {
        "betweenness_centrality": 0.0,
        "closeness_centrality": 0.0,
        "degree": 0,
        "in_degree": 0,
        "out_degree": 0
      }
    }
  },
  "functions": {
    "analyze_codebase.py": [
      {
        "name": "main",
        "line": 221,
        "end_line": 231,
        "docstring": "Main analysis function",
        "args": [],
        "complexity": 1,
        "calls": [
          "CodeAnalyzer",
          "print",
          "analyze_project",
          "generate_analysis_report",
          "save_analysis",
          "Path"
        ],
        "decorators": []
      },
      {
        "name": "__init__",
        "line": 23,
        "end_line": 29,
        "docstring": null,
        "args": [
          "self",
          "root_path"
        ],
        "complexity": 1,
        "calls": [
          "Path",
          "defaultdict",
          "defaultdict",
          "defaultdict",
          "defaultdict"
        ],
        "decorators": []
      },
      {
        "name": "should_analyze_file",
        "line": 31,
        "end_line": 39,
        "docstring": "Check if file should be analyzed",
        "args": [
          "self",
          "file_path"
        ],
        "complexity": 3,
        "calls": [],
        "decorators": []
      },
      {
        "name": "extract_imports",
        "line": 41,
        "end_line": 58,
        "docstring": "Extract import statements from Python file",
        "args": [
          "self",
          "content",
          "file_path"
        ],
        "complexity": 7,
        "calls": [
          "parse",
          "set",
          "walk",
          "isinstance",
          "print",
          "set",
          "isinstance",
          "add",
          "add",
          "split",
          "split"
        ],
        "decorators": []
      },
      {
        "name": "extract_functions_and_classes",
        "line": 60,
        "end_line": 95,
        "docstring": "Extract function and class definitions",
        "args": [
          "self",
          "content",
          "file_path"
        ],
        "complexity": 8,
        "calls": [
          "parse",
          "walk",
          "isinstance",
          "print",
          "append",
          "isinstance",
          "append",
          "get_docstring",
          "isinstance",
          "append",
          "get_docstring",
          "get_docstring"
        ],
        "decorators": []
      },
      {
        "name": "get_file_info",
        "line": 97,
        "end_line": 120,
        "docstring": "Get basic file information",
        "args": [
          "self",
          "file_path"
        ],
        "complexity": 2,
        "calls": [
          "stat",
          "len",
          "open",
          "read",
          "splitlines",
          "count",
          "str",
          "print",
          "count",
          "relative_to",
          "count",
          "count",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "analyze_file",
        "line": 122,
        "end_line": 153,
        "docstring": "Analyze a single file",
        "args": [
          "self",
          "file_path"
        ],
        "complexity": 5,
        "calls": [
          "get_file_info",
          "relative_to",
          "extract_imports",
          "extract_functions_and_classes",
          "open",
          "read",
          "str",
          "str",
          "str",
          "str",
          "exists",
          "print",
          "add",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "analyze_project",
        "line": 155,
        "end_line": 168,
        "docstring": "Analyze the entire project",
        "args": [
          "self"
        ],
        "complexity": 5,
        "calls": [
          "print",
          "walk",
          "should_analyze_file",
          "Path",
          "print",
          "analyze_file",
          "relative_to"
        ],
        "decorators": []
      },
      {
        "name": "generate_analysis_report",
        "line": 170,
        "end_line": 193,
        "docstring": "Generate analysis report",
        "args": [
          "self"
        ],
        "complexity": 6,
        "calls": [
          "len",
          "sum",
          "sum",
          "sum",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "sorted",
          "print",
          "len",
          "len",
          "items",
          "values",
          "values",
          "values",
          "sum",
          "len",
          "values"
        ],
        "decorators": []
      },
      {
        "name": "save_analysis",
        "line": 195,
        "end_line": 219,
        "docstring": "Save analysis results to JSON",
        "args": [
          "self",
          "output_file"
        ],
        "complexity": 5,
        "calls": [
          "print",
          "dict",
          "dict",
          "open",
          "dump",
          "str",
          "len",
          "sum",
          "isoformat",
          "list",
          "list",
          "items",
          "items",
          "now",
          "values"
        ],
        "decorators": []
      }
    ],
    "analyze_debug_log.py": [
      {
        "name": "parse_timestamp",
        "line": 12,
        "end_line": 15,
        "docstring": "Extract timestamp from log line.",
        "args": [
          "line"
        ],
        "complexity": 1,
        "calls": [
          "match",
          "strptime",
          "group"
        ],
        "decorators": []
      },
      {
        "name": "analyze_log",
        "line": 18,
        "end_line": 226,
        "docstring": "Analyze the debug log and generate comprehensive report.",
        "args": [],
        "complexity": 28,
        "calls": [
          "defaultdict",
          "generate_report",
          "print",
          "compile",
          "compile",
          "compile",
          "compile",
          "compile",
          "compile",
          "compile",
          "compile",
          "compile",
          "compile",
          "compile",
          "print",
          "enumerate",
          "total_seconds",
          "len",
          "open",
          "write",
          "open",
          "readlines",
          "parse_timestamp",
          "search",
          "print",
          "search",
          "append",
          "search",
          "search",
          "append",
          "search",
          "append",
          "search",
          "len",
          "len",
          "search",
          "int",
          "append",
          "group",
          "append",
          "int",
          "append",
          "int",
          "append",
          "append",
          "groups",
          "append",
          "group",
          "group",
          "group",
          "strip",
          "strip",
          "float"
        ],
        "decorators": []
      },
      {
        "name": "generate_report",
        "line": 229,
        "end_line": 570,
        "docstring": "Generate comprehensive markdown report.",
        "args": [
          "start_time",
          "end_time",
          "session_duration",
          "operations",
          "user_interactions",
          "errors",
          "coordinate_transformations",
          "shape_operations",
          "plot_generations",
          "search_operations",
          "memory_events",
          "total_lines"
        ],
        "complexity": 23,
        "calls": [
          "items",
          "append",
          "enumerate",
          "enumerate",
          "len",
          "len",
          "strftime",
          "strftime",
          "strftime",
          "len",
          "len",
          "len",
          "len",
          "len",
          "len",
          "len",
          "strftime",
          "strftime",
          "title",
          "len",
          "len",
          "strftime",
          "strftime",
          "len",
          "now",
          "strftime",
          "get",
          "strftime",
          "strftime",
          "strftime",
          "strftime",
          "title",
          "strftime",
          "now",
          "strftime",
          "replace"
        ],
        "decorators": []
      }
    ],
    "app.py": [
      {
        "name": "log_layout_ids",
        "line": 349,
        "end_line": 361,
        "docstring": "Recursively log all component IDs in the layout",
        "args": [
          "component",
          "prefix"
        ],
        "complexity": 8,
        "calls": [
          "hasattr",
          "hasattr",
          "info",
          "isinstance",
          "warning",
          "log_layout_ids",
          "log_layout_ids"
        ],
        "decorators": []
      },
      {
        "name": "store_upload_data",
        "line": 459,
        "end_line": 475,
        "docstring": "Store uploaded file data in a dcc.Store component",
        "args": [
          "contents",
          "filenames"
        ],
        "complexity": 4,
        "calls": [
          "callback",
          "Output",
          "Input",
          "State",
          "info",
          "info",
          "isinstance",
          "info",
          "info",
          "error",
          "len",
          "str"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A568D510>"
        ]
      }
    ],
    "app_constants.py": [],
    "app_factory.py": [
      {
        "name": "create_app_with_duplicate_callbacks",
        "line": 10,
        "end_line": 19,
        "docstring": "Create a Dash app with settings to handle duplicate callbacks properly.",
        "args": [],
        "complexity": 1,
        "calls": [
          "Dash"
        ],
        "decorators": []
      }
    ],
    "borehole_log_professional.py": [
      {
        "name": "matplotlib_figure",
        "line": 53,
        "end_line": 67,
        "docstring": "Context manager for matplotlib figures to ensure proper cleanup.\n\nUsage:\n    with matplotlib_figure(figsize=(8, 6)) as fig:\n        # work with figure\n        pass\n# Figure is automatically closed here",
        "args": [],
        "complexity": 1,
        "calls": [
          "figure",
          "close"
        ],
        "decorators": [
          "contextmanager"
        ]
      },
      {
        "name": "safe_close_figure",
        "line": 70,
        "end_line": 81,
        "docstring": "Safely close a matplotlib figure with error handling.\n\nArgs:\n    fig: matplotlib Figure object or None",
        "args": [
          "fig"
        ],
        "complexity": 3,
        "calls": [
          "close",
          "warning"
        ],
        "decorators": []
      },
      {
        "name": "classify_text_box_overflow",
        "line": 84,
        "end_line": 158,
        "docstring": "Classify text boxes based on overflow behavior and page boundaries.\n\nArgs:\n    text_positions: List of text position dictionaries\n    page_top: Top depth of current page\n    page_bot: Bottom depth of current page\n    toe_y: Y position of toe line (page boundary)\n    log_area_in: Log area height in inches\n    intervals: Current page intervals\n    borehole_data: Original borehole data\n\nReturns:\n    dict: Classification results with overflow strategies",
        "args": [
          "text_positions",
          "page_top",
          "page_bot",
          "toe_y",
          "log_area_in",
          "intervals",
          "borehole_data"
        ],
        "complexity": 5,
        "calls": [
          "enumerate",
          "len",
          "append",
          "append",
          "append",
          "float"
        ],
        "decorators": []
      },
      {
        "name": "create_overflow_page",
        "line": 161,
        "end_line": 344,
        "docstring": "Create a dedicated overflow page for text boxes that don't fit on regular pages.\n\nArgs:\n    overflow_boxes: List of overflow text box dictionaries\n    page_num: Base page number for overflow page\n    borehole_id: Borehole identifier\n    ground_level: Ground level for the borehole\n    hole_type: Type of hole\n    coords_str: Coordinates string\n    figsize: Figure size tuple\n    dpi: Resolution\n    color_alpha: Color transparency\n    hatch_alpha: Hatch transparency\n\nReturns:\n    str: Base64-encoded PNG image",
        "args": [
          "overflow_boxes",
          "page_num",
          "borehole_id",
          "ground_level",
          "hole_type",
          "coords_str",
          "figsize",
          "dpi",
          "color_alpha",
          "hatch_alpha"
        ],
        "complexity": 6,
        "calls": [
          "sum",
          "figure",
          "add_axes",
          "draw_header",
          "set_xlim",
          "set_ylim",
          "axis",
          "add_axes",
          "set_xlim",
          "set_ylim",
          "axis",
          "Rectangle",
          "add_patch",
          "enumerate",
          "plot",
          "text",
          "BytesIO",
          "savefig",
          "close",
          "seek",
          "read",
          "decode",
          "append",
          "plot",
          "copy",
          "text",
          "draw_text_box",
          "warning",
          "b64encode"
        ],
        "decorators": []
      },
      {
        "name": "wrap_text_and_calculate_height",
        "line": 347,
        "end_line": 375,
        "docstring": "Wrap text and calculate required height in inches for rendering.\n\nArgs:\n    text: Text to wrap\n    max_width_chars: Maximum characters per line\n    font_size: Font size in points\n\nReturns:\n    tuple: (wrapped_lines, height_in_inches)",
        "args": [
          "text",
          "max_width_chars",
          "font_size"
        ],
        "complexity": 4,
        "calls": [
          "wrap",
          "isna",
          "str",
          "len",
          "max"
        ],
        "decorators": []
      },
      {
        "name": "calculate_text_box_positions_aligned",
        "line": 378,
        "end_line": 484,
        "docstring": "Calculate text box positions aligned with their geological layers,\nwith adjustments for conflicts.\n\nArgs:\n    intervals: List of interval dictionaries with lithology data\n    legend_positions: List of legend position dictionaries with y_top, y_bottom\n    desc_left: Left edge of description column\n    desc_width: Width of description column\n\nReturns:\n    list: Text box positions with y_top, y_bottom, x_left, x_width for each interval",
        "args": [
          "intervals",
          "legend_positions",
          "desc_left",
          "desc_width"
        ],
        "complexity": 9,
        "calls": [
          "enumerate",
          "zip",
          "wrap_text_and_calculate_height",
          "append",
          "len",
          "range",
          "get",
          "len",
          "get",
          "get"
        ],
        "decorators": []
      },
      {
        "name": "draw_text_box",
        "line": 487,
        "end_line": 624,
        "docstring": "Draw a text box with shortened borders and diagonal connector lines.\n\nArgs:\n    log_ax: Matplotlib axes\n    text_pos: Text position dictionary\n    interval: Interval data dictionary\n    legend_right: Right edge of legend/lithology column\n    next_col_left: Left edge of column after description column\n    depth_to_y_abs: Function to convert depth to Y position\n    page_top: Top depth of current page\n    page_bot: Bottom depth of current page",
        "args": [
          "log_ax",
          "text_pos",
          "interval",
          "legend_right",
          "next_col_left",
          "depth_to_y_abs",
          "page_top",
          "page_bot"
        ],
        "complexity": 5,
        "calls": [
          "plot",
          "plot",
          "plot",
          "plot",
          "len",
          "enumerate",
          "get",
          "get",
          "depth_to_y_abs",
          "depth_to_y_abs",
          "max",
          "max",
          "plot",
          "plot",
          "plot",
          "plot",
          "text",
          "get",
          "get",
          "min",
          "min"
        ],
        "decorators": []
      },
      {
        "name": "draw_header",
        "line": 627,
        "end_line": 911,
        "docstring": "Draw professional header matching Openground standards.\n\nArgs:\n    ax: Matplotlib axes to draw on\n    page_num: Current page number\n    total_pages: Total number of pages\n    borehole_id: Borehole identifier\n    ground_level: Ground level for the borehole",
        "args": [
          "ax",
          "page_num",
          "total_pages",
          "borehole_id",
          "ground_level",
          "hole_type",
          "coords_str"
        ],
        "complexity": 16,
        "calls": [
          "axis",
          "range",
          "sum",
          "range",
          "sum",
          "enumerate",
          "matplotlib_figure",
          "add_subplot",
          "FontProperties",
          "range",
          "range",
          "range",
          "add_patch",
          "text",
          "text",
          "zip",
          "add_patch",
          "range",
          "append",
          "max",
          "sum",
          "add_patch",
          "Rectangle",
          "Rectangle",
          "text",
          "plot",
          "text",
          "append",
          "get_text_width_height_descent",
          "get_text_width_height_descent",
          "range",
          "Rectangle",
          "text",
          "text",
          "sum",
          "text",
          "get_text_width_height_descent",
          "get_text_width_height_descent",
          "max",
          "get_renderer",
          "get_renderer",
          "get_renderer",
          "get_renderer"
        ],
        "decorators": []
      },
      {
        "name": "plot_borehole_log_from_ags_content",
        "line": 914,
        "end_line": 1094,
        "docstring": "Parse AGS content and plot a professional borehole log for the given borehole ID.\nReturns a list of base64-encoded images for multi-page display.\n\nArgs:\n    ags_content: AGS file content as string\n    loca_id: Borehole ID to plot\n    show_labels: (compatibility, not used)\n    fig_height: Figure height in inches (default A4 portrait)\n    fig_width: Figure width in inches\n    geology_csv_path: Path to geology code mapping CSV\n    title: Optional plot title\n    dpi: Figure DPI\n\nReturns:\n    List of base64-encoded PNG images, or None if no data found",
        "args": [
          "ags_content",
          "loca_id",
          "show_labels",
          "fig_height",
          "fig_width",
          "geology_csv_path",
          "title",
          "dpi",
          "color_alpha",
          "hatch_alpha"
        ],
        "complexity": 36,
        "calls": [
          "parse_ags_geol_section_from_string",
          "DataFrame",
          "max",
          "reset_index",
          "parse_ags_ispt_group",
          "create_professional_borehole_log_multi_page",
          "splitlines",
          "list",
          "DataFrame",
          "error",
          "astype",
          "astype",
          "sort_values",
          "reader",
          "index",
          "index",
          "index",
          "index",
          "float",
          "str",
          "str",
          "str",
          "append",
          "len",
          "strip",
          "str",
          "append",
          "warning",
          "len",
          "max",
          "range",
          "len",
          "strip",
          "strip",
          "strip",
          "len",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "create_professional_borehole_log_multi_page",
        "line": 1097,
        "end_line": 1654,
        "docstring": "Create a professional multi-page borehole log plot.\nReturns a list of base64-encoded PNG images.\n\nArgs:\n    borehole_data: DataFrame with geological layer data\n    borehole_id: Identifier for the borehole\n    ground_level: Ground level for calculating elevations\n    geology_csv_path: Path to geology code mapping CSV\n    title: Optional title for the plot\n    figsize: Figure size (width, height) in inches\n    dpi: Resolution for the plot\n\nReturns:\n    List of base64-encoded PNG images",
        "args": [
          "borehole_data",
          "borehole_id",
          "ground_level",
          "geology_csv_path",
          "title",
          "figsize",
          "dpi",
          "spt_df",
          "hole_type",
          "coords_str",
          "geology_mapping",
          "color_alpha",
          "hatch_alpha"
        ],
        "complexity": 47,
        "calls": [
          "info",
          "float",
          "int",
          "range",
          "info",
          "warning",
          "max",
          "ceil",
          "sum",
          "min",
          "figure",
          "add_axes",
          "draw_header",
          "set_xlim",
          "set_ylim",
          "axis",
          "add_axes",
          "set_xlim",
          "set_ylim",
          "axis",
          "Rectangle",
          "add_patch",
          "enumerate",
          "plot",
          "plot",
          "plot",
          "range",
          "enumerate",
          "calculate_text_box_positions_aligned",
          "classify_text_box_overflow",
          "BytesIO",
          "savefig",
          "close",
          "seek",
          "read",
          "decode",
          "append",
          "locals",
          "range",
          "append",
          "plot",
          "plot",
          "plot",
          "len",
          "maximum",
          "minimum",
          "any",
          "depth_to_y_abs",
          "depth_to_y_abs",
          "max",
          "locals",
          "astype",
          "astype",
          "astype",
          "zip",
          "text",
          "range",
          "enumerate",
          "strip",
          "get_geology_color",
          "get_geology_pattern",
          "add_patch",
          "max",
          "append",
          "text",
          "text",
          "text",
          "plot",
          "append",
          "draw_text_box",
          "depth_to_y_abs",
          "text",
          "text",
          "text",
          "b64encode",
          "len",
          "plot",
          "zip",
          "append",
          "Rectangle",
          "add_patch",
          "split",
          "strip",
          "info",
          "create_overflow_page",
          "append",
          "info",
          "str",
          "Rectangle",
          "strip",
          "float",
          "len",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "create_professional_borehole_log",
        "line": 1710,
        "end_line": 1747,
        "docstring": "Convenience function to create a professional borehole log plot.\nReturns a list of base64-encoded PNG images.\n\nArgs:\n    borehole_data: DataFrame with geological layer data\n    borehole_id: Identifier for the borehole\n    geology_csv_path: Path to geology code mapping CSV\n    title: Optional title for the plot\n    figsize: Figure size (width, height) in inches\n    dpi: Resolution for the plot\n\nReturns:\n    List of base64-encoded PNG images",
        "args": [
          "borehole_data",
          "borehole_id",
          "geology_csv_path",
          "title",
          "figsize",
          "dpi",
          "color_alpha",
          "hatch_alpha"
        ],
        "complexity": 2,
        "calls": [
          "create_professional_borehole_log_multi_page",
          "isinstance"
        ],
        "decorators": []
      },
      {
        "name": "depth_to_y_abs",
        "line": 103,
        "end_line": 105,
        "docstring": "Convert depth to absolute Y position on page",
        "args": [
          "depth"
        ],
        "complexity": 1,
        "calls": [
          "float"
        ],
        "decorators": []
      },
      {
        "name": "parse_ags_ispt_group",
        "line": 1019,
        "end_line": 1074,
        "docstring": "Parse ISPT group from AGS content for a given LOCA_ID.\nReturns a DataFrame with columns: Depth, Type, Results",
        "args": [
          "ags_content",
          "loca_id"
        ],
        "complexity": 24,
        "calls": [
          "splitlines",
          "list",
          "DataFrame",
          "reader",
          "index",
          "index",
          "index",
          "index",
          "append",
          "len",
          "strip",
          "str",
          "append",
          "len",
          "max",
          "len",
          "strip",
          "strip",
          "strip",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "__init__",
        "line": 1660,
        "end_line": 1669,
        "docstring": "Initialize the professional borehole log plotter.\n\nArgs:\n    geology_csv_path: Path to CSV file containing geology code mappings (optional, uses default if None)",
        "args": [
          "self",
          "geology_csv_path"
        ],
        "complexity": 1,
        "calls": [],
        "decorators": []
      },
      {
        "name": "create_borehole_log",
        "line": 1671,
        "end_line": 1707,
        "docstring": "Create a professional borehole log plot.\nReturns a list of base64-encoded PNG images.\n\nArgs:\n    borehole_data: DataFrame with columns including 'Depth_Top', 'Depth_Base',\n                  'Geology_Code', 'Description'\n    borehole_id: Identifier for the borehole\n    title: Optional title for the plot\n    figsize: Figure size (width, height) in inches\n    dpi: Resolution for the plot\n\nReturns:\n    List of base64-encoded PNG images",
        "args": [
          "self",
          "borehole_data",
          "borehole_id",
          "title",
          "figsize",
          "dpi",
          "color_alpha",
          "hatch_alpha"
        ],
        "complexity": 1,
        "calls": [
          "info",
          "create_professional_borehole_log_multi_page"
        ],
        "decorators": []
      },
      {
        "name": "depth_to_y_abs",
        "line": 1310,
        "end_line": 1312,
        "docstring": null,
        "args": [
          "depth"
        ],
        "complexity": 1,
        "calls": [
          "float"
        ],
        "decorators": []
      }
    ],
    "callbacks_split.py": [
      {
        "name": "create_error_message",
        "line": 69,
        "end_line": 141,
        "docstring": "Create a standardized error message for display to users.\n\nArgs:\n    error: Exception or error message\n    context: Context where the error occurred\n\nReturns:\n    html.Div: Styled error message component",
        "args": [
          "error",
          "context"
        ],
        "complexity": 2,
        "calls": [
          "isinstance",
          "get",
          "Div",
          "str",
          "Div",
          "P",
          "Details",
          "Summary",
          "P"
        ],
        "decorators": []
      },
      {
        "name": "create_success_message",
        "line": 144,
        "end_line": 174,
        "docstring": "Create a standardized success message for display to users.\n\nArgs:\n    message: Success message text\n    details: Optional additional details\n\nReturns:\n    html.Div: Styled success message component",
        "args": [
          "message",
          "details"
        ],
        "complexity": 1,
        "calls": [
          "Div",
          "P",
          "P"
        ],
        "decorators": []
      },
      {
        "name": "handle_callback_error",
        "line": 177,
        "end_line": 203,
        "docstring": "Decorator for consistent error handling in callbacks.\n\nUsage:\n    @handle_callback_error\n    def my_callback(...):\n        # callback logic\n        return results",
        "args": [
          "func"
        ],
        "complexity": 3,
        "calls": [
          "func",
          "error",
          "create_callback_error_response",
          "error",
          "CallbackError",
          "create_callback_error_response",
          "str",
          "replace"
        ],
        "decorators": []
      },
      {
        "name": "create_callback_error_response",
        "line": 206,
        "end_line": 213,
        "docstring": "Create appropriate error response based on callback type.\nThis is a simplified version - in practice, you'd need to know the expected return structure.",
        "args": [
          "error",
          "callback_name"
        ],
        "complexity": 1,
        "calls": [
          "create_error_message",
          "title",
          "replace"
        ],
        "decorators": []
      },
      {
        "name": "validate_file_size",
        "line": 216,
        "end_line": 242,
        "docstring": "Validate file size to prevent DoS attacks.\n\nArgs:\n    content_string: Base64 encoded file content\n    filename: Name of the file being uploaded\n\nReturns:\n    tuple: (is_valid, error_message, size_mb)",
        "args": [
          "content_string",
          "filename"
        ],
        "complexity": 3,
        "calls": [
          "len",
          "b64decode",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "validate_total_upload_size",
        "line": 245,
        "end_line": 279,
        "docstring": "Validate total upload size and file count.\n\nArgs:\n    files_data: List of tuples containing (content_type, content_string, filename)\n\nReturns:\n    tuple: (is_valid, error_message, total_size_mb)",
        "args": [
          "files_data"
        ],
        "complexity": 5,
        "calls": [
          "len",
          "len",
          "b64decode",
          "len",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "transform_coordinates",
        "line": 287,
        "end_line": 307,
        "docstring": "Transform BNG to WGS84 coordinates using centralized coordinate service",
        "args": [
          "easting",
          "northing"
        ],
        "complexity": 4,
        "calls": [
          "get_coordinate_service",
          "transform_bng_to_wgs84",
          "debug",
          "error",
          "error"
        ],
        "decorators": []
      },
      {
        "name": "create_selection_shape_visual",
        "line": 310,
        "end_line": 358,
        "docstring": "Create a visual representation of a drawn selection shape for display",
        "args": [
          "feature"
        ],
        "complexity": 13,
        "calls": [
          "get",
          "get",
          "error",
          "len",
          "Polygon",
          "len",
          "Polygon",
          "Tooltip",
          "Tooltip"
        ],
        "decorators": []
      },
      {
        "name": "register_callbacks",
        "line": 361,
        "end_line": 2117,
        "docstring": "Register all split callbacks with the app",
        "args": [
          "app"
        ],
        "complexity": 169,
        "calls": [
          "callback",
          "callback",
          "callback",
          "callback",
          "clientside_callback",
          "callback",
          "callback",
          "callback",
          "clientside_callback",
          "handle_marker_click",
          "info",
          "info",
          "info",
          "info",
          "Div",
          "info",
          "info",
          "info",
          "info",
          "info",
          "Output",
          "Input",
          "Output",
          "info",
          "Output",
          "Output",
          "Input",
          "Output",
          "Output",
          "Input",
          "info",
          "Input",
          "Output",
          "info",
          "info",
          "zip",
          "validate_total_upload_size",
          "zip",
          "insert",
          "load_all_loca_data",
          "info",
          "monitor_memory_usage",
          "optimize_borehole_dataframe",
          "info",
          "get_coordinate_service",
          "full",
          "full",
          "iterrows",
          "iterrows",
          "items",
          "Div",
          "append",
          "info",
          "warning",
          "timestamp",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "Input",
          "State",
          "State",
          "warning",
          "get",
          "info",
          "handle_shape_drawing",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "Input",
          "Input",
          "Input",
          "State",
          "State",
          "State",
          "info",
          "info",
          "isinstance",
          "DataFrame",
          "info",
          "get",
          "get",
          "info",
          "info",
          "info",
          "DataFrame",
          "create_checkbox_grid",
          "Div",
          "update_marker_colors",
          "len",
          "info",
          "info",
          "PCA",
          "fit_transform",
          "mean",
          "info",
          "info",
          "get_coordinate_service",
          "transform_bng_to_wgs84",
          "warning",
          "Div",
          "DataFrame",
          "info",
          "iterrows",
          "len",
          "info",
          "info",
          "items",
          "plot_section_from_ags_content",
          "Output",
          "Output",
          "Output",
          "Input",
          "Input",
          "Input",
          "State",
          "get",
          "info",
          "timestamp",
          "Input",
          "info",
          "DataFrame",
          "iterrows",
          "sort",
          "info",
          "Div",
          "Div",
          "DataFrame",
          "get",
          "get",
          "info",
          "items",
          "plot_borehole_log_from_ags_content",
          "Div",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "State",
          "State",
          "State",
          "State",
          "Input",
          "Input",
          "DataFrame",
          "split",
          "append",
          "warning",
          "create_error_message",
          "create_error_message",
          "Div",
          "apply",
          "apply",
          "len",
          "len",
          "transform_bng_to_wgs84",
          "median",
          "median",
          "max",
          "info",
          "info",
          "warning",
          "to_dict",
          "tolist",
          "append",
          "error",
          "create_error_message",
          "timestamp",
          "info",
          "handle_checkbox_selection",
          "info",
          "info",
          "enumerate",
          "warning",
          "info",
          "info",
          "info",
          "info",
          "info",
          "project_boreholes_to_polyline",
          "info",
          "info",
          "info",
          "filter_selection_by_shape",
          "info",
          "isinstance",
          "info",
          "info",
          "create_checkbox_grid",
          "info",
          "update_marker_colors",
          "info",
          "len",
          "Div",
          "info",
          "info",
          "info",
          "Div",
          "update_marker_colors",
          "error",
          "Div",
          "update_marker_colors",
          "isin",
          "get",
          "create_polyline_section",
          "create_buffer_visualization",
          "isinstance",
          "isinstance",
          "calculate_pca_line",
          "error",
          "update_marker_colors",
          "max",
          "min",
          "info",
          "error",
          "H4",
          "P",
          "Checklist",
          "len",
          "error",
          "error",
          "len",
          "info",
          "strip",
          "get",
          "get",
          "append",
          "error",
          "len",
          "Div",
          "isinstance",
          "Div",
          "enumerate",
          "error",
          "Div",
          "error",
          "CallbackError",
          "split",
          "validate_file_size",
          "b64decode",
          "decode",
          "append",
          "append",
          "info",
          "CallbackError",
          "astype",
          "astype",
          "float",
          "float",
          "transform_bng_to_wgs84",
          "notnull",
          "notnull",
          "str",
          "get",
          "get",
          "append",
          "append",
          "max",
          "min",
          "max",
          "min",
          "len",
          "append",
          "Div",
          "H4",
          "P",
          "P",
          "P",
          "P",
          "P",
          "now",
          "CallbackError",
          "get",
          "info",
          "get",
          "DataFrame",
          "project_boreholes_to_polyline",
          "dict",
          "create_polyline_section",
          "create_buffer_visualization",
          "isinstance",
          "update_marker_colors",
          "create_checkbox_grid",
          "get",
          "info",
          "Div",
          "get",
          "isinstance",
          "info",
          "warning",
          "get",
          "len",
          "info",
          "range",
          "tolist",
          "isinstance",
          "create_polyline_section",
          "create_buffer_zone",
          "dict",
          "isinstance",
          "isinstance",
          "isinstance",
          "dict",
          "get",
          "len",
          "H4",
          "P",
          "P",
          "P",
          "P",
          "add_polyline_distance_info",
          "create_selection_shape_visual",
          "info",
          "info",
          "extend",
          "extend",
          "Polyline",
          "H4",
          "P",
          "get",
          "get",
          "str",
          "get_coordinate_service",
          "zip",
          "transform_wgs84_to_utm",
          "list",
          "info",
          "info",
          "info",
          "BytesIO",
          "savefig",
          "seek",
          "read",
          "decode",
          "Img",
          "close",
          "get",
          "now",
          "strip",
          "strip",
          "Div",
          "Span",
          "Span",
          "calculate_distance_along_polyline",
          "append",
          "len",
          "warning",
          "append",
          "Div",
          "error",
          "append",
          "P",
          "P",
          "P",
          "len",
          "len",
          "warning",
          "strip",
          "strip",
          "Marker",
          "info",
          "Li",
          "now",
          "tolist",
          "extend",
          "append",
          "Div",
          "type",
          "info",
          "len",
          "min",
          "info",
          "tolist",
          "info",
          "info",
          "warning",
          "extend",
          "extend",
          "calculate_pca_line",
          "calculate_pca_line",
          "append",
          "append",
          "append",
          "append",
          "len",
          "len",
          "len",
          "len",
          "get",
          "get",
          "append",
          "warning",
          "len",
          "zip",
          "error",
          "info",
          "send_bytes",
          "len",
          "str",
          "float",
          "append",
          "float",
          "append",
          "lower",
          "len",
          "H3",
          "P",
          "len",
          "len",
          "Div",
          "enumerate",
          "Div",
          "hasattr",
          "hasattr",
          "hasattr",
          "Marker",
          "append",
          "append",
          "Div",
          "Div",
          "notnull",
          "isdigit",
          "notnull",
          "isdigit",
          "min",
          "max",
          "min",
          "max",
          "H4",
          "Ul",
          "append",
          "list",
          "len",
          "list",
          "len",
          "len",
          "type",
          "len",
          "append",
          "append",
          "isin",
          "len",
          "len",
          "len",
          "Hr",
          "H5",
          "append",
          "len",
          "len",
          "Tooltip",
          "info",
          "strip",
          "strip",
          "Marker",
          "str",
          "b64encode",
          "get",
          "str",
          "str",
          "join",
          "H3",
          "append",
          "H3",
          "P",
          "str",
          "Span",
          "Span",
          "str",
          "str",
          "Tooltip",
          "B",
          "len",
          "min",
          "max",
          "min",
          "max",
          "str",
          "keys",
          "get",
          "get",
          "len",
          "join",
          "len",
          "P",
          "len",
          "H3",
          "Img",
          "append",
          "Img",
          "getattr",
          "Span",
          "Span",
          "Span",
          "Span",
          "len",
          "len",
          "replace",
          "replace",
          "float",
          "float",
          "strip",
          "len",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "len",
          "len",
          "type",
          "len",
          "str",
          "str",
          "Tooltip",
          "len",
          "H4",
          "len",
          "get",
          "float",
          "float",
          "strip",
          "replace",
          "replace",
          "len",
          "str",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "validate_borehole_near_polyline",
        "line": 2120,
        "end_line": 2152,
        "docstring": "Validate if a borehole is within a reasonable distance of the polyline using helper functions",
        "args": [
          "borehole_lat",
          "borehole_lon",
          "polyline_coords",
          "max_distance"
        ],
        "complexity": 4,
        "calls": [
          "range",
          "point_to_line_distance",
          "error",
          "len",
          "project_point_to_line_segment",
          "debug"
        ],
        "decorators": []
      },
      {
        "name": "handle_marker_click",
        "line": 2155,
        "end_line": 2399,
        "docstring": "Handle marker clicks to generate borehole logs and update marker colors",
        "args": [
          "app"
        ],
        "complexity": 37,
        "calls": [
          "callback",
          "info",
          "info",
          "info",
          "enumerate",
          "info",
          "DataFrame",
          "info",
          "items",
          "info",
          "plot_borehole_log_from_ags_content",
          "Output",
          "Output",
          "Input",
          "State",
          "State",
          "State",
          "get",
          "get",
          "all",
          "info",
          "info",
          "warning",
          "len",
          "warning",
          "enumerate",
          "Div",
          "Div",
          "enumerate",
          "error",
          "print_exc",
          "error",
          "Div",
          "Div",
          "len",
          "append",
          "Div",
          "len",
          "append",
          "Img",
          "H3",
          "P",
          "Div",
          "get",
          "copy",
          "copy",
          "append",
          "append",
          "len",
          "Polygon",
          "len",
          "H4",
          "len",
          "Polygon",
          "len",
          "copy",
          "copy",
          "Tooltip",
          "len",
          "Tooltip"
        ],
        "decorators": []
      },
      {
        "name": "__init__",
        "line": 62,
        "end_line": 66,
        "docstring": null,
        "args": [
          "self",
          "user_message",
          "technical_message",
          "error_type"
        ],
        "complexity": 2,
        "calls": [
          "__init__",
          "super"
        ],
        "decorators": []
      },
      {
        "name": "wrapper",
        "line": 188,
        "end_line": 201,
        "docstring": null,
        "args": [],
        "complexity": 3,
        "calls": [
          "func",
          "error",
          "create_callback_error_response",
          "error",
          "CallbackError",
          "create_callback_error_response",
          "str",
          "replace"
        ],
        "decorators": []
      },
      {
        "name": "handle_file_upload",
        "line": 385,
        "end_line": 765,
        "docstring": "Handle file upload and create markers",
        "args": [
          "stored_data",
          "map_center_state",
          "map_zoom_state"
        ],
        "complexity": 40,
        "calls": [
          "callback",
          "info",
          "info",
          "info",
          "zip",
          "validate_total_upload_size",
          "zip",
          "insert",
          "load_all_loca_data",
          "info",
          "monitor_memory_usage",
          "optimize_borehole_dataframe",
          "info",
          "get_coordinate_service",
          "full",
          "full",
          "iterrows",
          "iterrows",
          "items",
          "Div",
          "append",
          "info",
          "warning",
          "timestamp",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "Input",
          "State",
          "State",
          "split",
          "append",
          "warning",
          "create_error_message",
          "create_error_message",
          "Div",
          "apply",
          "apply",
          "len",
          "len",
          "transform_bng_to_wgs84",
          "median",
          "median",
          "max",
          "info",
          "info",
          "warning",
          "to_dict",
          "tolist",
          "append",
          "error",
          "create_error_message",
          "timestamp",
          "CallbackError",
          "split",
          "validate_file_size",
          "b64decode",
          "decode",
          "append",
          "append",
          "info",
          "CallbackError",
          "astype",
          "astype",
          "float",
          "float",
          "transform_bng_to_wgs84",
          "notnull",
          "notnull",
          "str",
          "get",
          "get",
          "append",
          "append",
          "max",
          "min",
          "max",
          "min",
          "len",
          "append",
          "Div",
          "H4",
          "P",
          "P",
          "P",
          "P",
          "P",
          "now",
          "CallbackError",
          "len",
          "warning",
          "append",
          "Div",
          "error",
          "append",
          "P",
          "P",
          "P",
          "len",
          "len",
          "warning",
          "strip",
          "strip",
          "Marker",
          "info",
          "Li",
          "now",
          "Div",
          "Div",
          "notnull",
          "isdigit",
          "notnull",
          "isdigit",
          "min",
          "max",
          "min",
          "max",
          "H4",
          "Ul",
          "Span",
          "Span",
          "str",
          "str",
          "Tooltip",
          "B",
          "len",
          "min",
          "max",
          "min",
          "max",
          "str",
          "Span",
          "Span",
          "Span",
          "Span",
          "len",
          "len",
          "replace",
          "replace",
          "float",
          "float",
          "strip",
          "len",
          "replace",
          "replace",
          "str",
          "str"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5C53D10>"
        ]
      },
      {
        "name": "handle_map_interactions",
        "line": 793,
        "end_line": 906,
        "docstring": "Handle map drawing and selection",
        "args": [
          "drawn_geojson",
          "checked_ids",
          "update_buffer_clicks",
          "stored_borehole_data",
          "marker_children",
          "buffer_value"
        ],
        "complexity": 13,
        "calls": [
          "callback",
          "info",
          "info",
          "warning",
          "get",
          "info",
          "handle_shape_drawing",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "Input",
          "Input",
          "Input",
          "State",
          "State",
          "State",
          "info",
          "handle_checkbox_selection",
          "get",
          "info",
          "get",
          "DataFrame",
          "project_boreholes_to_polyline",
          "dict",
          "create_polyline_section",
          "create_buffer_visualization",
          "isinstance",
          "update_marker_colors",
          "create_checkbox_grid",
          "tolist",
          "extend",
          "append",
          "Div",
          "append",
          "len"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5C302D0>"
        ]
      },
      {
        "name": "handle_shape_drawing",
        "line": 908,
        "end_line": 1210,
        "docstring": "Handle shape drawing and borehole selection",
        "args": [
          "drawn_geojson",
          "stored_borehole_data",
          "marker_children",
          "buffer_value"
        ],
        "complexity": 27,
        "calls": [
          "info",
          "info",
          "isinstance",
          "DataFrame",
          "info",
          "get",
          "get",
          "info",
          "info",
          "info",
          "info",
          "info",
          "enumerate",
          "warning",
          "info",
          "info",
          "info",
          "info",
          "info",
          "project_boreholes_to_polyline",
          "info",
          "info",
          "info",
          "filter_selection_by_shape",
          "info",
          "isinstance",
          "info",
          "info",
          "create_checkbox_grid",
          "info",
          "update_marker_colors",
          "info",
          "len",
          "Div",
          "info",
          "info",
          "info",
          "Div",
          "update_marker_colors",
          "error",
          "Div",
          "update_marker_colors",
          "get",
          "info",
          "Div",
          "get",
          "isinstance",
          "info",
          "warning",
          "get",
          "len",
          "info",
          "range",
          "tolist",
          "isinstance",
          "create_polyline_section",
          "create_buffer_zone",
          "dict",
          "isinstance",
          "isinstance",
          "isinstance",
          "dict",
          "get",
          "len",
          "H4",
          "P",
          "P",
          "P",
          "P",
          "add_polyline_distance_info",
          "create_selection_shape_visual",
          "info",
          "info",
          "type",
          "info",
          "len",
          "min",
          "info",
          "tolist",
          "info",
          "info",
          "warning",
          "extend",
          "extend",
          "calculate_pca_line",
          "calculate_pca_line",
          "append",
          "append",
          "list",
          "len",
          "list",
          "len",
          "len",
          "type",
          "len",
          "append",
          "append",
          "isin",
          "len",
          "len",
          "len",
          "Hr",
          "H5",
          "append",
          "len",
          "len",
          "keys",
          "get",
          "get",
          "len",
          "join",
          "len",
          "P",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "len",
          "len",
          "type",
          "len",
          "get"
        ],
        "decorators": []
      },
      {
        "name": "handle_checkbox_selection",
        "line": 1212,
        "end_line": 1294,
        "docstring": "Handle checkbox selection changes",
        "args": [
          "checked_ids",
          "stored_borehole_data"
        ],
        "complexity": 8,
        "calls": [
          "DataFrame",
          "create_checkbox_grid",
          "Div",
          "update_marker_colors",
          "isin",
          "get",
          "create_polyline_section",
          "create_buffer_visualization",
          "isinstance",
          "isinstance",
          "calculate_pca_line",
          "error",
          "update_marker_colors",
          "extend",
          "extend",
          "append",
          "append",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "calculate_pca_line",
        "line": 1296,
        "end_line": 1355,
        "docstring": "Calculate and create PCA line for display - extended past markers",
        "args": [
          "filtered_df"
        ],
        "complexity": 7,
        "calls": [
          "len",
          "info",
          "info",
          "PCA",
          "fit_transform",
          "mean",
          "info",
          "info",
          "get_coordinate_service",
          "transform_bng_to_wgs84",
          "max",
          "min",
          "info",
          "error",
          "Polyline",
          "len",
          "Tooltip"
        ],
        "decorators": []
      },
      {
        "name": "create_checkbox_grid",
        "line": 1357,
        "end_line": 1393,
        "docstring": "Create checkbox grid for borehole selection",
        "args": [
          "borehole_ids",
          "current_checked"
        ],
        "complexity": 4,
        "calls": [
          "Div",
          "warning",
          "Div",
          "H4",
          "P",
          "Checklist",
          "H4",
          "P"
        ],
        "decorators": []
      },
      {
        "name": "update_marker_colors",
        "line": 1395,
        "end_line": 1499,
        "docstring": "Update marker colors based on selection - green for selected, blue for unselected",
        "args": [
          "stored_borehole_data",
          "selected_ids"
        ],
        "complexity": 17,
        "calls": [
          "info",
          "info",
          "info",
          "DataFrame",
          "info",
          "iterrows",
          "len",
          "info",
          "info",
          "len",
          "error",
          "get",
          "get",
          "str",
          "len",
          "len",
          "get",
          "get",
          "append",
          "warning",
          "len",
          "info",
          "strip",
          "strip",
          "Marker",
          "str",
          "str",
          "str",
          "Tooltip",
          "float",
          "float",
          "strip"
        ],
        "decorators": []
      },
      {
        "name": "handle_plot_generation",
        "line": 1520,
        "end_line": 1629,
        "docstring": "Handle plot generation and downloads",
        "args": [
          "checked_ids",
          "show_labels_value",
          "download_clicks",
          "stored_borehole_data"
        ],
        "complexity": 13,
        "calls": [
          "callback",
          "info",
          "info",
          "items",
          "plot_section_from_ags_content",
          "Output",
          "Output",
          "Output",
          "Input",
          "Input",
          "Input",
          "State",
          "error",
          "get_coordinate_service",
          "zip",
          "transform_wgs84_to_utm",
          "list",
          "info",
          "info",
          "info",
          "BytesIO",
          "savefig",
          "seek",
          "read",
          "decode",
          "Img",
          "close",
          "zip",
          "error",
          "info",
          "send_bytes",
          "b64encode",
          "len",
          "len"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5D7DE50>"
        ]
      },
      {
        "name": "clear_all_shapes",
        "line": 1637,
        "end_line": 1645,
        "docstring": "Force clearing all shapes when a new shape is drawn",
        "args": [
          "geojson"
        ],
        "complexity": 4,
        "calls": [
          "callback",
          "Output",
          "Input",
          "get",
          "info",
          "timestamp",
          "len",
          "get",
          "now",
          "len",
          "get"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5D892D0>"
        ]
      },
      {
        "name": "update_search_dropdown",
        "line": 1693,
        "end_line": 1757,
        "docstring": "Update search dropdown options when borehole data is loaded",
        "args": [
          "stored_borehole_data"
        ],
        "complexity": 13,
        "calls": [
          "callback",
          "info",
          "Output",
          "Output",
          "Input",
          "info",
          "DataFrame",
          "iterrows",
          "sort",
          "info",
          "info",
          "strip",
          "get",
          "get",
          "append",
          "error",
          "strip",
          "strip",
          "str",
          "float",
          "append",
          "float",
          "append",
          "lower",
          "len",
          "str",
          "str",
          "join"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5D9B4D0>"
        ]
      },
      {
        "name": "toggle_search_button",
        "line": 1764,
        "end_line": 1769,
        "docstring": "Enable/disable the search button based on dropdown selection",
        "args": [
          "selected_value"
        ],
        "complexity": 2,
        "calls": [
          "callback",
          "Output",
          "Output",
          "Input"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5DA4B90>"
        ]
      },
      {
        "name": "handle_search_go",
        "line": 1789,
        "end_line": 2034,
        "docstring": "Handle the 'Go to Borehole' button click",
        "args": [
          "n_clicks",
          "selected_borehole_index",
          "stored_borehole_data",
          "show_labels_value",
          "current_markers"
        ],
        "complexity": 24,
        "calls": [
          "callback",
          "info",
          "Input",
          "Div",
          "Div",
          "DataFrame",
          "get",
          "get",
          "info",
          "items",
          "plot_borehole_log_from_ags_content",
          "Div",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "State",
          "State",
          "State",
          "State",
          "len",
          "Div",
          "isinstance",
          "Div",
          "enumerate",
          "error",
          "Div",
          "Div",
          "Span",
          "Span",
          "H3",
          "P",
          "len",
          "len",
          "Div",
          "enumerate",
          "Div",
          "hasattr",
          "hasattr",
          "hasattr",
          "Marker",
          "append",
          "append",
          "H3",
          "append",
          "H3",
          "P",
          "str",
          "H3",
          "Img",
          "append",
          "Img",
          "getattr",
          "H4",
          "len"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5DE8590>"
        ]
      },
      {
        "name": "add_polyline_distance_info",
        "line": 2078,
        "end_line": 2117,
        "docstring": "Add distance along polyline information to borehole display",
        "args": [
          "borehole_ids",
          "stored_borehole_data"
        ],
        "complexity": 9,
        "calls": [
          "DataFrame",
          "error",
          "calculate_distance_along_polyline",
          "append"
        ],
        "decorators": []
      },
      {
        "name": "marker_click_handler",
        "line": 2179,
        "end_line": 2349,
        "docstring": "Handle marker clicks to generate borehole logs",
        "args": [
          "marker_clicks",
          "stored_borehole_data",
          "current_markers",
          "show_labels_value"
        ],
        "complexity": 25,
        "calls": [
          "callback",
          "info",
          "info",
          "info",
          "enumerate",
          "info",
          "DataFrame",
          "info",
          "items",
          "info",
          "plot_borehole_log_from_ags_content",
          "Output",
          "Output",
          "Input",
          "State",
          "State",
          "State",
          "all",
          "info",
          "info",
          "warning",
          "len",
          "warning",
          "enumerate",
          "Div",
          "Div",
          "enumerate",
          "error",
          "print_exc",
          "Div",
          "Div",
          "len",
          "append",
          "Div",
          "len",
          "append",
          "Img",
          "H3",
          "P",
          "Div",
          "get",
          "copy",
          "copy",
          "append",
          "append",
          "len",
          "H4",
          "len",
          "copy",
          "copy",
          "len"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A663C2D0>"
        ]
      },
      {
        "name": "create_selection_shape_visual",
        "line": 2351,
        "end_line": 2399,
        "docstring": "Create a visual representation of a drawn selection shape for display",
        "args": [
          "feature"
        ],
        "complexity": 13,
        "calls": [
          "get",
          "get",
          "error",
          "len",
          "Polygon",
          "len",
          "Polygon",
          "Tooltip",
          "Tooltip"
        ],
        "decorators": []
      }
    ],
    "comprehensive_optimization_validation.py": [
      {
        "name": "test_matplotlib_logging_verbosity",
        "line": 42,
        "end_line": 141,
        "docstring": "Test Optimization 1: Reduce Matplotlib Logging Verbosity",
        "args": [],
        "complexity": 7,
        "calls": [
          "print",
          "print",
          "print",
          "getLogger",
          "getLogger",
          "print",
          "print",
          "StringIO",
          "StreamHandler",
          "setLevel",
          "getLogger",
          "copy",
          "setLevel",
          "addHandler",
          "time",
          "subplots",
          "text",
          "text",
          "text",
          "set_title",
          "close",
          "getvalue",
          "print",
          "print",
          "print",
          "print",
          "removeHandler",
          "setLevel",
          "time",
          "strip",
          "split",
          "len",
          "print",
          "print",
          "print",
          "print",
          "getLevelName",
          "getLevelName",
          "removeHandler",
          "strip",
          "lower",
          "len",
          "len",
          "len",
          "lower",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "test_marker_click_logging_optimization",
        "line": 144,
        "end_line": 202,
        "docstring": "Test Optimization 2: Optimize Marker Click Logging",
        "args": [],
        "complexity": 5,
        "calls": [
          "print",
          "print",
          "print",
          "range",
          "time",
          "time",
          "print",
          "print",
          "print",
          "print",
          "append",
          "len",
          "print",
          "print",
          "time",
          "time",
          "print",
          "print",
          "len",
          "len",
          "len",
          "len",
          "len",
          "uniform",
          "uniform"
        ],
        "decorators": []
      },
      {
        "name": "test_batch_coordinate_transformations",
        "line": 205,
        "end_line": 268,
        "docstring": "Test Optimization 3: Batch Coordinate Transformations",
        "args": [],
        "complexity": 10,
        "calls": [
          "print",
          "print",
          "print",
          "uniform",
          "uniform",
          "get_coordinate_service",
          "print",
          "print",
          "time",
          "range",
          "print",
          "time",
          "transform_bng_to_wgs84",
          "list",
          "print",
          "print",
          "print",
          "print",
          "print",
          "robust_coordinate_transform",
          "time",
          "time",
          "zip",
          "float",
          "abs",
          "abs",
          "print",
          "print",
          "append",
          "len",
          "len",
          "print",
          "print",
          "len",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "test_dataframe_operations_optimization",
        "line": 271,
        "end_line": 372,
        "docstring": "Test Optimization 4: Optimize DataFrame Operations",
        "args": [],
        "complexity": 6,
        "calls": [
          "print",
          "print",
          "print",
          "print",
          "DataFrame",
          "sum",
          "print",
          "sum",
          "sum",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "max",
          "uniform",
          "uniform",
          "choice",
          "choice",
          "choice",
          "uniform",
          "uniform",
          "uniform",
          "uniform",
          "PerformanceMonitor",
          "optimize_borehole_dataframe",
          "PerformanceMonitor",
          "optimize_dataframe_memory",
          "print",
          "get_dataframe_memory_report",
          "print",
          "select_dtypes",
          "len",
          "len",
          "print",
          "memory_usage",
          "copy",
          "copy",
          "memory_usage",
          "memory_usage",
          "print",
          "print",
          "print",
          "range",
          "len",
          "len",
          "len",
          "len",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "test_enhanced_error_handling",
        "line": 375,
        "end_line": 470,
        "docstring": "Test Optimization 5: Enhanced Error Handling",
        "args": [],
        "complexity": 16,
        "calls": [
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "robust_coordinate_transform",
          "robust_coordinate_transform",
          "print",
          "print",
          "retry_with_backoff",
          "successful_operation",
          "graceful_fallback",
          "failing_operation",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "PerformanceMonitor",
          "sleep",
          "print",
          "PerformanceMonitor",
          "sleep",
          "print",
          "print",
          "print",
          "print",
          "ValueError",
          "print",
          "print",
          "print"
        ],
        "decorators": []
      },
      {
        "name": "test_asynchronous_processing",
        "line": 473,
        "end_line": 568,
        "docstring": "Test Optimization 6: Asynchronous Processing (where applicable)",
        "args": [],
        "complexity": 11,
        "calls": [
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "get_coordinate_service",
          "array",
          "array",
          "transform_bng_to_wgs84",
          "DataFrame",
          "range",
          "concat",
          "range",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "len",
          "optimize_dataframe_memory",
          "append",
          "len",
          "len",
          "print",
          "print",
          "print",
          "sum",
          "len",
          "len",
          "print",
          "print",
          "print",
          "len",
          "len",
          "rand",
          "choice",
          "PerformanceMonitor",
          "time",
          "optimize_dataframe_memory",
          "append",
          "DataFrame",
          "time"
        ],
        "decorators": []
      },
      {
        "name": "run_comprehensive_validation",
        "line": 571,
        "end_line": 645,
        "docstring": "Run all optimization validation tests.",
        "args": [],
        "complexity": 6,
        "calls": [
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "sum",
          "len",
          "print",
          "print",
          "items",
          "print",
          "print",
          "print",
          "print",
          "print",
          "values",
          "title",
          "print",
          "print",
          "print",
          "print",
          "print",
          "test_func",
          "print",
          "print",
          "strftime",
          "print",
          "print_exc",
          "replace",
          "strftime",
          "replace",
          "upper"
        ],
        "decorators": []
      },
      {
        "name": "successful_operation",
        "line": 433,
        "end_line": 434,
        "docstring": null,
        "args": [],
        "complexity": 1,
        "calls": [
          "retry_with_backoff"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5BD5A50>"
        ]
      },
      {
        "name": "failing_operation",
        "line": 450,
        "end_line": 451,
        "docstring": null,
        "args": [],
        "complexity": 1,
        "calls": [
          "graceful_fallback",
          "ValueError"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5C5AED0>"
        ]
      }
    ],
    "config.py": [],
    "coordinate_service.py": [
      {
        "name": "get_transformer",
        "line": 37,
        "end_line": 60,
        "docstring": "Get a cached transformer for coordinate conversion.\n\nArgs:\n    source_crs: Source coordinate reference system\n    target_crs: Target coordinate reference system\n    always_xy: If True, return coordinates in (x, y) order\n\nReturns:\n    pyproj.Transformer: Cached transformer instance",
        "args": [
          "source_crs",
          "target_crs",
          "always_xy"
        ],
        "complexity": 2,
        "calls": [
          "lru_cache",
          "from_crs",
          "debug",
          "CoordinateTransformError"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5BD7550>"
        ]
      },
      {
        "name": "validate_coordinates",
        "line": 63,
        "end_line": 82,
        "docstring": "Validate coordinate values are within expected ranges.\n\nArgs:\n    lat: Latitude value\n    lon: Longitude value\n    coord_system: Coordinate system for validation\n\nReturns:\n    bool: True if coordinates are valid",
        "args": [
          "lat",
          "lon",
          "coord_system"
        ],
        "complexity": 8,
        "calls": [
          "isnan",
          "isnan",
          "isinf",
          "isinf"
        ],
        "decorators": []
      },
      {
        "name": "determine_utm_zone",
        "line": 85,
        "end_line": 108,
        "docstring": "Determine the appropriate UTM zone for a given longitude.\n\nArgs:\n    longitude: Longitude in decimal degrees\n\nReturns:\n    str: UTM CRS string (e.g., \"EPSG:32630\")",
        "args": [
          "longitude"
        ],
        "complexity": 2,
        "calls": [
          "CoordinateTransformError",
          "int"
        ],
        "decorators": []
      },
      {
        "name": "get_coordinate_service",
        "line": 347,
        "end_line": 349,
        "docstring": "Get the global coordinate service instance.",
        "args": [],
        "complexity": 1,
        "calls": [],
        "decorators": []
      },
      {
        "name": "transform_bng_to_wgs84",
        "line": 353,
        "end_line": 357,
        "docstring": "Convenience function for BNG to WGS84 transformation.",
        "args": [
          "easting",
          "northing"
        ],
        "complexity": 1,
        "calls": [
          "transform_bng_to_wgs84",
          "get_coordinate_service"
        ],
        "decorators": []
      },
      {
        "name": "transform_wgs84_to_utm",
        "line": 360,
        "end_line": 364,
        "docstring": "Convenience function for WGS84 to UTM transformation.",
        "args": [
          "longitude",
          "latitude"
        ],
        "complexity": 1,
        "calls": [
          "transform_wgs84_to_utm",
          "get_coordinate_service"
        ],
        "decorators": []
      },
      {
        "name": "transform_bng_to_utm",
        "line": 367,
        "end_line": 371,
        "docstring": "Convenience function for BNG to UTM transformation.",
        "args": [
          "easting",
          "northing"
        ],
        "complexity": 1,
        "calls": [
          "transform_bng_to_utm",
          "get_coordinate_service"
        ],
        "decorators": []
      },
      {
        "name": "__init__",
        "line": 119,
        "end_line": 120,
        "docstring": null,
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [],
        "decorators": []
      },
      {
        "name": "transform_bng_to_wgs84",
        "line": 122,
        "end_line": 177,
        "docstring": "Transform British National Grid coordinates to WGS84.\n\nArgs:\n    easting: BNG easting coordinate(s)\n    northing: BNG northing coordinate(s)\n\nReturns:\n    tuple: (latitude, longitude) arrays in WGS84",
        "args": [
          "self",
          "easting",
          "northing"
        ],
        "complexity": 5,
        "calls": [
          "get_transformer",
          "asarray",
          "asarray",
          "transform",
          "isscalar",
          "debug",
          "any",
          "error",
          "CoordinateTransformError",
          "validate_coordinates",
          "CoordinateTransformError",
          "sum",
          "warning",
          "len",
          "atleast_1d"
        ],
        "decorators": []
      },
      {
        "name": "transform_wgs84_to_utm",
        "line": 179,
        "end_line": 220,
        "docstring": "Transform WGS84 coordinates to UTM.\n\nArgs:\n    longitude: WGS84 longitude coordinate(s)\n    latitude: WGS84 latitude coordinate(s)\n\nReturns:\n    tuple: (utm_x, utm_y, utm_crs) where utm_crs is the UTM zone used",
        "args": [
          "self",
          "longitude",
          "latitude"
        ],
        "complexity": 3,
        "calls": [
          "asarray",
          "asarray",
          "isscalar",
          "determine_utm_zone",
          "get_transformer",
          "transform",
          "debug",
          "float",
          "float",
          "error",
          "CoordinateTransformError",
          "median",
          "len",
          "atleast_1d",
          "isnan"
        ],
        "decorators": []
      },
      {
        "name": "transform_bng_to_utm",
        "line": 222,
        "end_line": 248,
        "docstring": "Transform BNG coordinates directly to UTM (via WGS84).\n\nArgs:\n    easting: BNG easting coordinate(s)\n    northing: BNG northing coordinate(s)\n\nReturns:\n    tuple: (utm_x, utm_y, utm_crs)",
        "args": [
          "self",
          "easting",
          "northing"
        ],
        "complexity": 2,
        "calls": [
          "transform_bng_to_wgs84",
          "transform_wgs84_to_utm",
          "error",
          "CoordinateTransformError"
        ],
        "decorators": []
      },
      {
        "name": "transform_dataframe_coordinates",
        "line": 250,
        "end_line": 313,
        "docstring": "Transform coordinates in a pandas DataFrame.\n\nArgs:\n    df: DataFrame containing coordinates\n    source_x_col: Column name for source X coordinates\n    source_y_col: Column name for source Y coordinates\n    source_crs: Source coordinate reference system\n    target_crs: Target coordinate reference system\n    target_x_col: Column name for target X coordinates (default: auto-generated)\n    target_y_col: Column name for target Y coordinates (default: auto-generated)\n\nReturns:\n    pd.DataFrame: DataFrame with added transformed coordinates",
        "args": [
          "self",
          "df",
          "source_x_col",
          "source_y_col",
          "source_crs",
          "target_crs",
          "target_x_col",
          "target_y_col"
        ],
        "complexity": 6,
        "calls": [
          "get_transformer",
          "transform",
          "info",
          "warning",
          "copy",
          "error",
          "CoordinateTransformError",
          "lower",
          "lower",
          "len",
          "replace",
          "replace"
        ],
        "decorators": []
      },
      {
        "name": "get_cache_stats",
        "line": 315,
        "end_line": 334,
        "docstring": "Get transformation cache statistics.",
        "args": [
          "self"
        ],
        "complexity": 2,
        "calls": [],
        "decorators": []
      },
      {
        "name": "clear_cache",
        "line": 336,
        "end_line": 340,
        "docstring": "Clear the transformer cache.",
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "cache_clear",
          "info"
        ],
        "decorators": []
      }
    ],
    "dataframe_optimizer.py": [
      {
        "name": "optimize_dataframe_memory",
        "line": 16,
        "end_line": 137,
        "docstring": "Optimize DataFrame memory usage through categorical conversion and numeric downcasting.\n\nArgs:\n    df: Input DataFrame to optimize\n    categorical_threshold: Fraction of unique values below which a column is converted to categorical\n\nReturns:\n    Optimized DataFrame with reduced memory usage",
        "args": [
          "df",
          "categorical_threshold"
        ],
        "complexity": 15,
        "calls": [
          "info",
          "sum",
          "copy",
          "sum",
          "info",
          "info",
          "info",
          "info",
          "info",
          "info",
          "select_dtypes",
          "select_dtypes",
          "memory_usage",
          "nunique",
          "len",
          "memory_usage",
          "memory_usage",
          "memory_usage",
          "memory_usage",
          "astype",
          "memory_usage",
          "append",
          "debug",
          "str",
          "to_numeric",
          "append",
          "debug",
          "len",
          "len",
          "str",
          "min",
          "max",
          "str",
          "str",
          "astype",
          "isna",
          "isna",
          "finfo",
          "finfo"
        ],
        "decorators": []
      },
      {
        "name": "get_dataframe_memory_report",
        "line": 140,
        "end_line": 202,
        "docstring": "Generate a detailed memory usage report for a DataFrame.\n\nArgs:\n    df: DataFrame to analyze\n\nReturns:\n    Dictionary containing memory usage statistics",
        "args": [
          "df"
        ],
        "complexity": 6,
        "calls": [
          "memory_usage",
          "sum",
          "nunique",
          "len",
          "str",
          "append",
          "append"
        ],
        "decorators": []
      },
      {
        "name": "apply_categorical_optimization",
        "line": 205,
        "end_line": 240,
        "docstring": "Apply categorical optimization to specific columns or auto-detect candidates.\n\nArgs:\n    df: DataFrame to optimize\n    columns: Specific columns to convert to categorical, or None for auto-detection\n\nReturns:\n    Optimized DataFrame",
        "args": [
          "df",
          "columns"
        ],
        "complexity": 6,
        "calls": [
          "copy",
          "select_dtypes",
          "memory_usage",
          "astype",
          "memory_usage",
          "info",
          "nunique",
          "len",
          "append"
        ],
        "decorators": []
      },
      {
        "name": "optimize_borehole_dataframe",
        "line": 243,
        "end_line": 289,
        "docstring": "Specialized optimization for borehole data DataFrames.\n\nThis function knows about the typical structure of borehole data and applies\noptimizations specific to geotechnical data patterns.\n\nArgs:\n    df: Borehole DataFrame to optimize\n\nReturns:\n    Optimized DataFrame",
        "args": [
          "df"
        ],
        "complexity": 5,
        "calls": [
          "info",
          "copy",
          "optimize_dataframe_memory",
          "nunique",
          "len",
          "memory_usage",
          "astype",
          "memory_usage",
          "info"
        ],
        "decorators": []
      }
    ],
    "data_loader.py": [
      {
        "name": "parse_group",
        "line": 6,
        "end_line": 30,
        "docstring": null,
        "args": [
          "content",
          "group_name"
        ],
        "complexity": 17,
        "calls": [
          "splitlines",
          "list",
          "DataFrame",
          "reader",
          "append",
          "len",
          "len",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "load_all_loca_data",
        "line": 33,
        "end_line": 55,
        "docstring": null,
        "args": [
          "ags_files"
        ],
        "complexity": 4,
        "calls": [
          "set",
          "parse_group",
          "dropna",
          "apply",
          "update",
          "append",
          "concat",
          "tolist",
          "to_numeric",
          "splitext"
        ],
        "decorators": []
      }
    ],
    "debug_module.py": [
      {
        "name": "plot_borehole_log_from_ags_content",
        "line": 50,
        "end_line": 52,
        "docstring": "Test function",
        "args": [],
        "complexity": 1,
        "calls": [],
        "decorators": []
      }
    ],
    "debug_offset_layout.py": [],
    "enhanced_error_handling.py": [
      {
        "name": "retry_with_backoff",
        "line": 44,
        "end_line": 96,
        "docstring": "Decorator that implements retry logic with exponential backoff.\n\nArgs:\n    max_retries: Maximum number of retry attempts\n    initial_delay: Initial delay between retries in seconds\n    backoff_factor: Factor to multiply delay by after each retry\n    exceptions: Tuple of exception types to catch and retry\n    logger_name: Name of logger to use (defaults to module logger)",
        "args": [
          "max_retries",
          "initial_delay",
          "backoff_factor",
          "exceptions",
          "logger_name"
        ],
        "complexity": 4,
        "calls": [
          "wraps",
          "range",
          "getLogger",
          "func",
          "warning",
          "sleep",
          "error"
        ],
        "decorators": []
      },
      {
        "name": "graceful_fallback",
        "line": 99,
        "end_line": 128,
        "docstring": "Decorator that provides graceful fallback for functions that might fail.\n\nArgs:\n    fallback_value: Value to return if function fails\n    log_error: Whether to log the error\n    error_context: Optional error context for structured error reporting",
        "args": [
          "fallback_value",
          "log_error",
          "error_context"
        ],
        "complexity": 4,
        "calls": [
          "wraps",
          "func",
          "error",
          "error"
        ],
        "decorators": []
      },
      {
        "name": "robust_coordinate_transform",
        "line": 132,
        "end_line": 159,
        "docstring": "Coordinate transformation with retry logic for network/service failures.\n\nArgs:\n    easting: BNG easting coordinate\n    northing: BNG northing coordinate\n\nReturns:\n    Tuple of (latitude, longitude) or (None, None) if failed",
        "args": [
          "easting",
          "northing"
        ],
        "complexity": 4,
        "calls": [
          "retry_with_backoff",
          "get_coordinate_service",
          "transform_bng_to_wgs84",
          "ValueError",
          "error"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5B3F590>"
        ]
      },
      {
        "name": "safe_file_processing",
        "line": 162,
        "end_line": 203,
        "docstring": "Safely process AGS file content with comprehensive error handling.\n\nArgs:\n    file_content: Content of the AGS file\n    filename: Name of the file for error reporting\n\nReturns:\n    Processed data dictionary or None if processing failed",
        "args": [
          "file_content",
          "filename"
        ],
        "complexity": 5,
        "calls": [
          "info",
          "process_ags_content",
          "info",
          "ValueError",
          "ValueError",
          "ErrorContext",
          "error",
          "strip",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "safe_marker_creation",
        "line": 207,
        "end_line": 261,
        "docstring": "Safely create map markers with fallback for individual failures.\n\nArgs:\n    borehole_data: List of borehole data dictionaries\n\nReturns:\n    List of successfully created markers",
        "args": [
          "borehole_data"
        ],
        "complexity": 11,
        "calls": [
          "graceful_fallback",
          "enumerate",
          "info",
          "warning",
          "append",
          "ValueError",
          "ValueError",
          "ValueError",
          "ValueError",
          "warning",
          "len",
          "isinstance",
          "isinstance",
          "len",
          "type",
          "type"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5B75A90>"
        ]
      },
      {
        "name": "create_user_friendly_error",
        "line": 264,
        "end_line": 321,
        "docstring": "Convert technical errors into user-friendly error messages.\n\nArgs:\n    error: The original exception\n    context: Additional context about where the error occurred\n\nReturns:\n    Dictionary with user-friendly error information",
        "args": [
          "error",
          "context"
        ],
        "complexity": 1,
        "calls": [
          "str",
          "get",
          "type",
          "time"
        ],
        "decorators": []
      },
      {
        "name": "log_performance_warning",
        "line": 324,
        "end_line": 339,
        "docstring": "Log performance warnings for slow operations.\n\nArgs:\n    operation: Name of the operation\n    duration: Time taken in seconds\n    threshold: Threshold in seconds for logging warning",
        "args": [
          "operation",
          "duration",
          "threshold"
        ],
        "complexity": 2,
        "calls": [
          "warning",
          "debug"
        ],
        "decorators": []
      },
      {
        "name": "__post_init__",
        "line": 39,
        "end_line": 41,
        "docstring": null,
        "args": [
          "self"
        ],
        "complexity": 2,
        "calls": [
          "time"
        ],
        "decorators": []
      },
      {
        "name": "decorator",
        "line": 62,
        "end_line": 94,
        "docstring": null,
        "args": [
          "func"
        ],
        "complexity": 4,
        "calls": [
          "wraps",
          "range",
          "getLogger",
          "func",
          "warning",
          "sleep",
          "error"
        ],
        "decorators": []
      },
      {
        "name": "decorator",
        "line": 113,
        "end_line": 126,
        "docstring": null,
        "args": [
          "func"
        ],
        "complexity": 4,
        "calls": [
          "wraps",
          "func",
          "error",
          "error"
        ],
        "decorators": []
      },
      {
        "name": "__init__",
        "line": 345,
        "end_line": 348,
        "docstring": null,
        "args": [
          "self",
          "operation_name",
          "warning_threshold"
        ],
        "complexity": 1,
        "calls": [],
        "decorators": []
      },
      {
        "name": "__enter__",
        "line": 350,
        "end_line": 353,
        "docstring": null,
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "time",
          "debug"
        ],
        "decorators": []
      },
      {
        "name": "__exit__",
        "line": 355,
        "end_line": 365,
        "docstring": null,
        "args": [
          "self",
          "exc_type",
          "exc_val",
          "exc_tb"
        ],
        "complexity": 3,
        "calls": [
          "log_performance_warning",
          "time",
          "error"
        ],
        "decorators": []
      },
      {
        "name": "failing_function",
        "line": 374,
        "end_line": 375,
        "docstring": null,
        "args": [],
        "complexity": 1,
        "calls": [
          "retry_with_backoff",
          "ConnectionError"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5685E10>"
        ]
      },
      {
        "name": "unreliable_function",
        "line": 379,
        "end_line": 380,
        "docstring": null,
        "args": [],
        "complexity": 1,
        "calls": [
          "graceful_fallback",
          "ValueError"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5685090>"
        ]
      },
      {
        "name": "wrapper",
        "line": 64,
        "end_line": 92,
        "docstring": null,
        "args": [],
        "complexity": 4,
        "calls": [
          "wraps",
          "range",
          "getLogger",
          "func",
          "warning",
          "sleep",
          "error"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5BD7050>"
        ]
      },
      {
        "name": "wrapper",
        "line": 115,
        "end_line": 124,
        "docstring": null,
        "args": [],
        "complexity": 4,
        "calls": [
          "wraps",
          "func",
          "error",
          "error"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5C321D0>"
        ]
      }
    ],
    "error_handling.py": [
      {
        "name": "get_error_handler",
        "line": 348,
        "end_line": 356,
        "docstring": "Get the global error handler instance.",
        "args": [],
        "complexity": 2,
        "calls": [
          "ErrorHandler",
          "info"
        ],
        "decorators": []
      },
      {
        "name": "handle_callback_errors",
        "line": 359,
        "end_line": 387,
        "docstring": "Decorator for handling errors in Dash callbacks.\n\nUsage:\n    @handle_callback_errors(\"my_callback\")\n    def my_callback_function(...):\n        # callback logic here",
        "args": [
          "callback_name"
        ],
        "complexity": 2,
        "calls": [
          "func",
          "get_error_handler",
          "handle_callback_error",
          "get_dash_error_response"
        ],
        "decorators": []
      },
      {
        "name": "__post_init__",
        "line": 58,
        "end_line": 64,
        "docstring": null,
        "args": [
          "self"
        ],
        "complexity": 4,
        "calls": [
          "now"
        ],
        "decorators": []
      },
      {
        "name": "to_dict",
        "line": 66,
        "end_line": 78,
        "docstring": "Convert error to dictionary format.",
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "isoformat"
        ],
        "decorators": []
      },
      {
        "name": "get_user_friendly_message",
        "line": 80,
        "end_line": 105,
        "docstring": "Get a user-friendly error message.",
        "args": [
          "self"
        ],
        "complexity": 4,
        "calls": [
          "get"
        ],
        "decorators": []
      },
      {
        "name": "__init__",
        "line": 111,
        "end_line": 113,
        "docstring": null,
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [],
        "decorators": []
      },
      {
        "name": "create_error",
        "line": 115,
        "end_line": 157,
        "docstring": "Create a standardized application error.",
        "args": [
          "self",
          "message",
          "category",
          "severity",
          "details",
          "error_code",
          "user_message",
          "recovery_suggestions",
          "exception"
        ],
        "complexity": 3,
        "calls": [
          "ApplicationError",
          "_log_error",
          "_add_to_history",
          "update",
          "str",
          "format_exc",
          "type"
        ],
        "decorators": []
      },
      {
        "name": "handle_callback_error",
        "line": 159,
        "end_line": 194,
        "docstring": "Handle errors that occur in Dash callbacks.",
        "args": [
          "self",
          "exception",
          "callback_name",
          "inputs",
          "state"
        ],
        "complexity": 4,
        "calls": [
          "_categorize_callback_error",
          "create_error",
          "lower",
          "lower",
          "lower",
          "str",
          "str",
          "str",
          "str",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "get_dash_error_response",
        "line": 196,
        "end_line": 227,
        "docstring": "Generate appropriate Dash callback response for an error.\n\nArgs:\n    error: The application error\n    output_count: Number of outputs the callback expects\n\nReturns:\n    Appropriate Dash response (no_update, error div, or list)",
        "args": [
          "self",
          "error",
          "output_count"
        ],
        "complexity": 4,
        "calls": [
          "_create_error_component",
          "extend"
        ],
        "decorators": []
      },
      {
        "name": "get_error_history",
        "line": 229,
        "end_line": 248,
        "docstring": "Get recent error history with optional filtering.",
        "args": [
          "self",
          "category",
          "severity",
          "limit"
        ],
        "complexity": 5,
        "calls": [
          "copy",
          "sort"
        ],
        "decorators": []
      },
      {
        "name": "clear_error_history",
        "line": 250,
        "end_line": 253,
        "docstring": "Clear error history.",
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "clear",
          "info"
        ],
        "decorators": []
      },
      {
        "name": "_log_error",
        "line": 255,
        "end_line": 269,
        "docstring": "Log error using appropriate logging level.",
        "args": [
          "self",
          "error"
        ],
        "complexity": 5,
        "calls": [
          "critical",
          "error",
          "warning",
          "info",
          "to_dict",
          "to_dict",
          "to_dict",
          "to_dict"
        ],
        "decorators": []
      },
      {
        "name": "_add_to_history",
        "line": 271,
        "end_line": 277,
        "docstring": "Add error to history with size management.",
        "args": [
          "self",
          "error"
        ],
        "complexity": 2,
        "calls": [
          "append",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "_categorize_callback_error",
        "line": 279,
        "end_line": 297,
        "docstring": "Determine error category from callback name.",
        "args": [
          "self",
          "callback_name"
        ],
        "complexity": 12,
        "calls": [
          "lower"
        ],
        "decorators": []
      },
      {
        "name": "_create_error_component",
        "line": 299,
        "end_line": 341,
        "docstring": "Create Dash HTML component for displaying error.",
        "args": [
          "self",
          "error"
        ],
        "complexity": 2,
        "calls": [
          "Div",
          "Span",
          "Span",
          "append",
          "append",
          "get_user_friendly_message",
          "Br",
          "Small",
          "join"
        ],
        "decorators": []
      },
      {
        "name": "decorator",
        "line": 369,
        "end_line": 385,
        "docstring": null,
        "args": [
          "func"
        ],
        "complexity": 2,
        "calls": [
          "func",
          "get_error_handler",
          "handle_callback_error",
          "get_dash_error_response"
        ],
        "decorators": []
      },
      {
        "name": "wrapper",
        "line": 370,
        "end_line": 383,
        "docstring": null,
        "args": [],
        "complexity": 2,
        "calls": [
          "func",
          "get_error_handler",
          "handle_callback_error",
          "get_dash_error_response"
        ],
        "decorators": []
      }
    ],
    "error_recovery.py": [
      {
        "name": "get_recovery_manager",
        "line": 410,
        "end_line": 412,
        "docstring": "Get the global recovery manager instance.",
        "args": [],
        "complexity": 1,
        "calls": [],
        "decorators": []
      },
      {
        "name": "with_retry",
        "line": 416,
        "end_line": 418,
        "docstring": "Decorator for adding retry capability to functions.",
        "args": [
          "max_retries",
          "base_delay"
        ],
        "complexity": 1,
        "calls": [
          "retry_with_backoff"
        ],
        "decorators": []
      },
      {
        "name": "with_circuit_breaker",
        "line": 421,
        "end_line": 432,
        "docstring": "Decorator for adding circuit breaker protection to functions.",
        "args": [
          "service_name"
        ],
        "complexity": 1,
        "calls": [
          "wraps",
          "get_circuit_breaker",
          "call",
          "get_recovery_manager"
        ],
        "decorators": []
      },
      {
        "name": "handle_gracefully",
        "line": 435,
        "end_line": 454,
        "docstring": "Decorator for graceful degradation support.",
        "args": [
          "feature_name",
          "fallback_func"
        ],
        "complexity": 2,
        "calls": [
          "wraps",
          "get_recovery_manager",
          "execute_with_fallback",
          "register_fallback"
        ],
        "decorators": []
      },
      {
        "name": "__init__",
        "line": 41,
        "end_line": 46,
        "docstring": null,
        "args": [
          "self",
          "failure_threshold",
          "recovery_timeout"
        ],
        "complexity": 1,
        "calls": [],
        "decorators": []
      },
      {
        "name": "call",
        "line": 48,
        "end_line": 65,
        "docstring": "Execute function with circuit breaker protection.",
        "args": [
          "self",
          "func"
        ],
        "complexity": 4,
        "calls": [
          "func",
          "_on_success",
          "info",
          "ErrorRecoveryError",
          "_on_failure",
          "time"
        ],
        "decorators": []
      },
      {
        "name": "_on_success",
        "line": 67,
        "end_line": 72,
        "docstring": "Handle successful operation.",
        "args": [
          "self"
        ],
        "complexity": 2,
        "calls": [
          "info"
        ],
        "decorators": []
      },
      {
        "name": "_on_failure",
        "line": 74,
        "end_line": 81,
        "docstring": "Handle failed operation.",
        "args": [
          "self"
        ],
        "complexity": 2,
        "calls": [
          "time",
          "warning"
        ],
        "decorators": []
      },
      {
        "name": "retry_with_backoff",
        "line": 90,
        "end_line": 133,
        "docstring": "Decorator for automatic retry with exponential backoff.\n\nArgs:\n    max_retries: Maximum number of retry attempts\n    base_delay: Initial delay between retries (seconds)\n    backoff_factor: Multiplier for delay after each failure\n    max_delay: Maximum delay between retries (seconds)",
        "args": [
          "max_retries",
          "base_delay",
          "backoff_factor",
          "max_delay"
        ],
        "complexity": 4,
        "calls": [
          "wraps",
          "range",
          "func",
          "min",
          "warning",
          "sleep",
          "error"
        ],
        "decorators": [
          "staticmethod"
        ]
      },
      {
        "name": "__init__",
        "line": 141,
        "end_line": 143,
        "docstring": null,
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "set"
        ],
        "decorators": []
      },
      {
        "name": "disable_feature",
        "line": 145,
        "end_line": 148,
        "docstring": "Disable a feature temporarily.",
        "args": [
          "self",
          "feature_name",
          "reason"
        ],
        "complexity": 1,
        "calls": [
          "add",
          "warning"
        ],
        "decorators": []
      },
      {
        "name": "enable_feature",
        "line": 150,
        "end_line": 154,
        "docstring": "Re-enable a previously disabled feature.",
        "args": [
          "self",
          "feature_name"
        ],
        "complexity": 2,
        "calls": [
          "remove",
          "info"
        ],
        "decorators": []
      },
      {
        "name": "is_feature_enabled",
        "line": 156,
        "end_line": 158,
        "docstring": "Check if a feature is currently enabled.",
        "args": [
          "self",
          "feature_name"
        ],
        "complexity": 1,
        "calls": [],
        "decorators": []
      },
      {
        "name": "register_fallback",
        "line": 160,
        "end_line": 162,
        "docstring": "Register a fallback handler for a feature.",
        "args": [
          "self",
          "feature_name",
          "fallback_handler"
        ],
        "complexity": 1,
        "calls": [],
        "decorators": []
      },
      {
        "name": "execute_with_fallback",
        "line": 164,
        "end_line": 199,
        "docstring": "Execute a function with fallback support.\n\nReturns:\n    Tuple[result, used_fallback]: Result and whether fallback was used",
        "args": [
          "self",
          "feature_name",
          "primary_func"
        ],
        "complexity": 6,
        "calls": [
          "is_feature_enabled",
          "primary_func",
          "info",
          "ErrorRecoveryError",
          "error",
          "info",
          "error"
        ],
        "decorators": []
      },
      {
        "name": "create_user_friendly_message",
        "line": 208,
        "end_line": 314,
        "docstring": "Create a user-friendly error message with recovery suggestions.\n\nArgs:\n    error: The exception that occurred\n    context: Additional context about where the error occurred\n\nReturns:\n    Dict containing error details and user message",
        "args": [
          "error",
          "context"
        ],
        "complexity": 1,
        "calls": [
          "str",
          "get",
          "type",
          "format_exc"
        ],
        "decorators": [
          "staticmethod"
        ]
      },
      {
        "name": "log_error",
        "line": 317,
        "end_line": 335,
        "docstring": "Log error details for debugging and monitoring.\n\nArgs:\n    error: The exception that occurred\n    context: Additional context about the error\n    user_id: User identifier for tracking",
        "args": [
          "error",
          "context",
          "user_id"
        ],
        "complexity": 1,
        "calls": [
          "error",
          "str",
          "time",
          "format_exc",
          "type"
        ],
        "decorators": [
          "staticmethod"
        ]
      },
      {
        "name": "__init__",
        "line": 343,
        "end_line": 346,
        "docstring": null,
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "GracefulDegradation"
        ],
        "decorators": []
      },
      {
        "name": "get_circuit_breaker",
        "line": 348,
        "end_line": 352,
        "docstring": "Get or create circuit breaker for a service.",
        "args": [
          "self",
          "service_name"
        ],
        "complexity": 2,
        "calls": [
          "CircuitBreaker"
        ],
        "decorators": []
      },
      {
        "name": "handle_operation",
        "line": 355,
        "end_line": 386,
        "docstring": "Context manager for handling operations with comprehensive error recovery.\n\nUsage:\n    with recovery_manager.handle_operation(\"file_upload\", \"AGS file processing\"):\n        # Your operation here\n        process_file(file_data)",
        "args": [
          "self",
          "operation_name",
          "context"
        ],
        "complexity": 3,
        "calls": [
          "log_error",
          "create_user_friendly_message",
          "ErrorRecoveryError",
          "get",
          "disable_feature"
        ],
        "decorators": [
          "contextmanager"
        ]
      },
      {
        "name": "reset_error_counts",
        "line": 388,
        "end_line": 391,
        "docstring": "Reset all error counts (for testing or maintenance).",
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "clear",
          "info"
        ],
        "decorators": []
      },
      {
        "name": "get_system_health",
        "line": 393,
        "end_line": 403,
        "docstring": "Get overall system health status.",
        "args": [
          "self"
        ],
        "complexity": 2,
        "calls": [
          "list",
          "dict",
          "sum",
          "values",
          "items"
        ],
        "decorators": []
      },
      {
        "name": "decorator",
        "line": 424,
        "end_line": 430,
        "docstring": null,
        "args": [
          "func"
        ],
        "complexity": 1,
        "calls": [
          "wraps",
          "get_circuit_breaker",
          "call",
          "get_recovery_manager"
        ],
        "decorators": []
      },
      {
        "name": "decorator",
        "line": 438,
        "end_line": 452,
        "docstring": null,
        "args": [
          "func"
        ],
        "complexity": 2,
        "calls": [
          "wraps",
          "get_recovery_manager",
          "execute_with_fallback",
          "register_fallback"
        ],
        "decorators": []
      },
      {
        "name": "test_function",
        "line": 467,
        "end_line": 468,
        "docstring": null,
        "args": [],
        "complexity": 1,
        "calls": [
          "with_retry"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5C583D0>"
        ]
      },
      {
        "name": "decorator",
        "line": 106,
        "end_line": 131,
        "docstring": null,
        "args": [
          "func"
        ],
        "complexity": 4,
        "calls": [
          "wraps",
          "range",
          "func",
          "min",
          "warning",
          "sleep",
          "error"
        ],
        "decorators": []
      },
      {
        "name": "wrapper",
        "line": 426,
        "end_line": 428,
        "docstring": null,
        "args": [],
        "complexity": 1,
        "calls": [
          "wraps",
          "get_circuit_breaker",
          "call",
          "get_recovery_manager"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5C30610>"
        ]
      },
      {
        "name": "wrapper",
        "line": 440,
        "end_line": 450,
        "docstring": null,
        "args": [],
        "complexity": 2,
        "calls": [
          "wraps",
          "get_recovery_manager",
          "execute_with_fallback",
          "register_fallback"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5B69090>"
        ]
      },
      {
        "name": "wrapper",
        "line": 108,
        "end_line": 129,
        "docstring": null,
        "args": [],
        "complexity": 4,
        "calls": [
          "wraps",
          "range",
          "func",
          "min",
          "warning",
          "sleep",
          "error"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5BEF210>"
        ]
      }
    ],
    "generate_dependency_graph.py": [
      {
        "name": "extract_imports",
        "line": 9,
        "end_line": 29,
        "docstring": "Extract imports from a Python file.",
        "args": [
          "file_path"
        ],
        "complexity": 7,
        "calls": [
          "parse",
          "walk",
          "open",
          "read",
          "isinstance",
          "print",
          "isinstance",
          "append",
          "append",
          "split",
          "split"
        ],
        "decorators": []
      },
      {
        "name": "create_dependency_graph",
        "line": 32,
        "end_line": 67,
        "docstring": "Create a DOT file showing dependencies between Python files.",
        "args": [
          "py_files",
          "dot_file"
        ],
        "complexity": 8,
        "calls": [
          "set",
          "add",
          "extract_imports",
          "open",
          "write",
          "write",
          "write",
          "items",
          "write",
          "Path",
          "Path",
          "write",
          "write"
        ],
        "decorators": []
      },
      {
        "name": "main",
        "line": 70,
        "end_line": 103,
        "docstring": null,
        "args": [],
        "complexity": 5,
        "calls": [
          "join",
          "join",
          "glob",
          "makedirs",
          "print",
          "create_dependency_graph",
          "print",
          "run",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print"
        ],
        "decorators": []
      }
    ],
    "generate_flowchart_data.py": [
      {
        "name": "main",
        "line": 458,
        "end_line": 468,
        "docstring": "Run enhanced analysis",
        "args": [],
        "complexity": 1,
        "calls": [
          "EnhancedCodeAnalyzer",
          "print",
          "analyze_project",
          "generate_analysis_report",
          "save_enhanced_analysis",
          "Path"
        ],
        "decorators": []
      },
      {
        "name": "__init__",
        "line": 24,
        "end_line": 32,
        "docstring": null,
        "args": [
          "self",
          "root_path"
        ],
        "complexity": 1,
        "calls": [
          "Path",
          "defaultdict",
          "defaultdict",
          "defaultdict",
          "defaultdict",
          "defaultdict"
        ],
        "decorators": []
      },
      {
        "name": "analyze_ast_detailed",
        "line": 34,
        "end_line": 104,
        "docstring": "Detailed AST analysis including function calls and complexity",
        "args": [
          "self",
          "content",
          "file_path"
        ],
        "complexity": 22,
        "calls": [
          "parse",
          "set",
          "walk",
          "walk",
          "walk",
          "isinstance",
          "isinstance",
          "isinstance",
          "print",
          "isinstance",
          "calculate_function_complexity",
          "walk",
          "append",
          "append",
          "set",
          "add",
          "isinstance",
          "isinstance",
          "add",
          "isinstance",
          "getattr",
          "get_docstring",
          "calculate_function_complexity",
          "append",
          "get_docstring",
          "split",
          "append",
          "isinstance",
          "split",
          "append",
          "isinstance",
          "str",
          "get_docstring",
          "any",
          "isinstance",
          "str",
          "isinstance"
        ],
        "decorators": []
      },
      {
        "name": "calculate_function_complexity",
        "line": 106,
        "end_line": 121,
        "docstring": "Calculate cyclomatic complexity for a function",
        "args": [
          "self",
          "func_node"
        ],
        "complexity": 6,
        "calls": [
          "walk",
          "isinstance",
          "isinstance",
          "isinstance",
          "isinstance",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "get_git_info",
        "line": 123,
        "end_line": 156,
        "docstring": "Get git information for a file",
        "args": [
          "self",
          "file_path"
        ],
        "complexity": 7,
        "calls": [
          "relative_to",
          "run",
          "run",
          "strip",
          "split",
          "strip",
          "int",
          "print",
          "str",
          "len",
          "str",
          "strip",
          "strip"
        ],
        "decorators": []
      },
      {
        "name": "analyze_file_detailed",
        "line": 158,
        "end_line": 239,
        "docstring": "Enhanced file analysis with more metrics",
        "args": [
          "self",
          "file_path"
        ],
        "complexity": 11,
        "calls": [
          "str",
          "splitlines",
          "len",
          "len",
          "len",
          "stat",
          "get_git_info",
          "analyze_ast_detailed",
          "sum",
          "categorize_file_detailed",
          "open",
          "read",
          "relative_to",
          "round",
          "len",
          "len",
          "len",
          "print",
          "len",
          "exists",
          "append",
          "startswith",
          "add",
          "strip",
          "len",
          "startswith",
          "strip",
          "strip"
        ],
        "decorators": []
      },
      {
        "name": "categorize_file_detailed",
        "line": 241,
        "end_line": 281,
        "docstring": "Enhanced file categorization",
        "args": [
          "self",
          "path",
          "functions",
          "classes"
        ],
        "complexity": 21,
        "calls": [
          "lower",
          "any",
          "any",
          "any",
          "any",
          "any",
          "endswith",
          "len",
          "len",
          "len",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "generate_network_metrics",
        "line": 283,
        "end_line": 333,
        "docstring": "Generate network analysis metrics",
        "args": [
          "self"
        ],
        "complexity": 9,
        "calls": [
          "DiGraph",
          "items",
          "items",
          "add_node",
          "betweenness_centrality",
          "closeness_centrality",
          "dict",
          "dict",
          "dict",
          "nodes",
          "print",
          "degree",
          "in_degree",
          "out_degree",
          "nodes",
          "add_edge",
          "round",
          "round",
          "get",
          "get",
          "get",
          "get",
          "get",
          "degree",
          "in_degree",
          "out_degree"
        ],
        "decorators": []
      },
      {
        "name": "analyze_project",
        "line": 335,
        "end_line": 357,
        "docstring": "Analyze the entire project with enhanced metrics",
        "args": [
          "self"
        ],
        "complexity": 7,
        "calls": [
          "print",
          "walk",
          "print",
          "enumerate",
          "print",
          "print",
          "analyze_file_detailed",
          "endswith",
          "append",
          "len",
          "Path",
          "len",
          "relative_to",
          "startswith"
        ],
        "decorators": []
      },
      {
        "name": "generate_analysis_report",
        "line": 359,
        "end_line": 407,
        "docstring": "Generate comprehensive analysis report",
        "args": [
          "self"
        ],
        "complexity": 10,
        "calls": [
          "len",
          "sum",
          "sum",
          "sum",
          "sum",
          "sum",
          "Counter",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "most_common",
          "print",
          "print",
          "sorted",
          "sorted",
          "print",
          "print",
          "print",
          "len",
          "len",
          "items",
          "items",
          "values",
          "values",
          "values",
          "values",
          "values",
          "values",
          "len",
          "title",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "save_enhanced_analysis",
        "line": 409,
        "end_line": 456,
        "docstring": "Save enhanced analysis with all metrics",
        "args": [
          "self",
          "output_file"
        ],
        "complexity": 12,
        "calls": [
          "generate_network_metrics",
          "items",
          "print",
          "print",
          "dict",
          "dict",
          "dict",
          "open",
          "dump",
          "str",
          "isoformat",
          "len",
          "sum",
          "sum",
          "list",
          "list",
          "Counter",
          "items",
          "items",
          "len",
          "len",
          "len",
          "now",
          "values",
          "values",
          "values",
          "stat",
          "values",
          "values",
          "values"
        ],
        "decorators": []
      }
    ],
    "geology_code_utils.py": [
      {
        "name": "load_geology_code_mappings",
        "line": 7,
        "end_line": 38,
        "docstring": "Load geology code mappings from a CSV file.\nReturns two dicts: code -> color, code -> pattern",
        "args": [
          "csv_filename"
        ],
        "complexity": 6,
        "calls": [
          "print",
          "join",
          "print",
          "dirname",
          "open",
          "DictReader",
          "print",
          "strip",
          "print",
          "strip",
          "strip",
          "len",
          "len",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "get_geology_color",
        "line": 45,
        "end_line": 46,
        "docstring": null,
        "args": [
          "code",
          "fallback"
        ],
        "complexity": 1,
        "calls": [
          "get",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "get_geology_pattern",
        "line": 49,
        "end_line": 50,
        "docstring": null,
        "args": [
          "code",
          "fallback"
        ],
        "complexity": 1,
        "calls": [
          "get",
          "str"
        ],
        "decorators": []
      }
    ],
    "health_check.py": [
      {
        "name": "get_health_checker",
        "line": 499,
        "end_line": 501,
        "docstring": "Get the global health checker instance.",
        "args": [],
        "complexity": 1,
        "calls": [],
        "decorators": []
      },
      {
        "name": "run_health_check",
        "line": 504,
        "end_line": 506,
        "docstring": "Run a comprehensive health check.",
        "args": [],
        "complexity": 1,
        "calls": [
          "run_health_check",
          "get_health_checker"
        ],
        "decorators": []
      },
      {
        "name": "get_quick_health_status",
        "line": 509,
        "end_line": 511,
        "docstring": "Get a quick health status.",
        "args": [],
        "complexity": 1,
        "calls": [
          "get_quick_status",
          "get_health_checker"
        ],
        "decorators": []
      },
      {
        "name": "__init__",
        "line": 47,
        "end_line": 50,
        "docstring": null,
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "time"
        ],
        "decorators": []
      },
      {
        "name": "get_system_info",
        "line": 52,
        "end_line": 62,
        "docstring": "Get basic system information.",
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "platform",
          "python_version",
          "processor",
          "node",
          "isoformat",
          "architecture",
          "time",
          "boot_time",
          "fromtimestamp",
          "boot_time"
        ],
        "decorators": []
      },
      {
        "name": "get_memory_info",
        "line": 64,
        "end_line": 78,
        "docstring": "Get memory usage information.",
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "virtual_memory",
          "swap_memory",
          "round",
          "round",
          "round",
          "round",
          "round",
          "_assess_memory_status"
        ],
        "decorators": []
      },
      {
        "name": "get_cpu_info",
        "line": 80,
        "end_line": 93,
        "docstring": "Get CPU usage information.",
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "cpu_percent",
          "cpu_count",
          "cpu_freq",
          "cpu_count",
          "_assess_cpu_status"
        ],
        "decorators": []
      },
      {
        "name": "get_disk_info",
        "line": 95,
        "end_line": 114,
        "docstring": "Get disk usage information.",
        "args": [
          "self"
        ],
        "complexity": 2,
        "calls": [
          "disk_usage",
          "disk_io_counters",
          "round",
          "round",
          "round",
          "round",
          "_assess_disk_status",
          "warning",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "_assess_memory_status",
        "line": 116,
        "end_line": 123,
        "docstring": "Assess memory health status.",
        "args": [
          "self",
          "memory_percent"
        ],
        "complexity": 3,
        "calls": [],
        "decorators": []
      },
      {
        "name": "_assess_cpu_status",
        "line": 125,
        "end_line": 132,
        "docstring": "Assess CPU health status.",
        "args": [
          "self",
          "cpu_percent"
        ],
        "complexity": 3,
        "calls": [],
        "decorators": []
      },
      {
        "name": "_assess_disk_status",
        "line": 134,
        "end_line": 141,
        "docstring": "Assess disk health status.",
        "args": [
          "self",
          "disk_percent"
        ],
        "complexity": 3,
        "calls": [],
        "decorators": []
      },
      {
        "name": "check_coordinate_service",
        "line": 149,
        "end_line": 184,
        "docstring": "Check coordinate transformation service health.",
        "args": [
          "self"
        ],
        "complexity": 4,
        "calls": [
          "time",
          "get_coordinate_service",
          "transform_bng_to_wgs84",
          "get_cache_stats",
          "time",
          "round",
          "format_exc",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "check_file_system",
        "line": 186,
        "end_line": 229,
        "docstring": "Check file system access and permissions.",
        "args": [
          "self"
        ],
        "complexity": 4,
        "calls": [
          "remove",
          "open",
          "write",
          "open",
          "read",
          "format_exc",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "check_required_modules",
        "line": 231,
        "end_line": 272,
        "docstring": "Check if all required Python modules are available.",
        "args": [
          "self"
        ],
        "complexity": 4,
        "calls": [
          "len",
          "sum",
          "__import__",
          "str",
          "values"
        ],
        "decorators": []
      },
      {
        "name": "__init__",
        "line": 280,
        "end_line": 283,
        "docstring": null,
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [],
        "decorators": []
      },
      {
        "name": "record_request_time",
        "line": 285,
        "end_line": 296,
        "docstring": "Record the duration of an operation.",
        "args": [
          "self",
          "operation",
          "duration"
        ],
        "complexity": 2,
        "calls": [
          "time",
          "append"
        ],
        "decorators": []
      },
      {
        "name": "get_performance_stats",
        "line": 298,
        "end_line": 335,
        "docstring": "Get performance statistics.",
        "args": [
          "self"
        ],
        "complexity": 6,
        "calls": [
          "max",
          "min",
          "sum",
          "len",
          "len",
          "len",
          "round",
          "round",
          "round",
          "len",
          "time"
        ],
        "decorators": []
      },
      {
        "name": "__init__",
        "line": 343,
        "end_line": 348,
        "docstring": null,
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "SystemMonitor",
          "ServiceHealthChecker",
          "PerformanceMonitor"
        ],
        "decorators": []
      },
      {
        "name": "run_health_check",
        "line": 350,
        "end_line": 432,
        "docstring": "Run a comprehensive health check of the application.\n\nArgs:\n    include_detailed: Whether to include detailed system metrics\n\nReturns:\n    Dict containing health check results",
        "args": [
          "self",
          "include_detailed"
        ],
        "complexity": 6,
        "calls": [
          "time",
          "isoformat",
          "_determine_overall_status",
          "round",
          "time",
          "check_coordinate_service",
          "check_file_system",
          "check_required_modules",
          "get_performance_stats",
          "get_recovery_manager",
          "get_system_health",
          "now",
          "str",
          "get_system_info",
          "get_memory_info",
          "get_cpu_info",
          "get_disk_info",
          "time",
          "str",
          "str",
          "str",
          "time"
        ],
        "decorators": []
      },
      {
        "name": "_determine_overall_status",
        "line": 434,
        "end_line": 459,
        "docstring": "Determine overall application health status.",
        "args": [
          "self",
          "health_data"
        ],
        "complexity": 11,
        "calls": [
          "values",
          "values",
          "get",
          "append",
          "get",
          "isinstance",
          "append",
          "get",
          "isinstance",
          "append"
        ],
        "decorators": []
      },
      {
        "name": "get_quick_status",
        "line": 461,
        "end_line": 492,
        "docstring": "Get a quick health status without detailed checks.",
        "args": [
          "self"
        ],
        "complexity": 5,
        "calls": [
          "run_health_check",
          "time",
          "time",
          "isoformat",
          "str",
          "time",
          "now"
        ],
        "decorators": []
      }
    ],
    "lazy_marker_manager.py": [
      {
        "name": "get_lazy_marker_manager",
        "line": 429,
        "end_line": 435,
        "docstring": "Get the global lazy marker manager instance.",
        "args": [],
        "complexity": 2,
        "calls": [
          "LazyMarkerManager"
        ],
        "decorators": []
      },
      {
        "name": "create_viewport_bounds",
        "line": 438,
        "end_line": 474,
        "docstring": "Create viewport bounds from map center, zoom, and dimensions.\n\nArgs:\n    center: [lat, lon] of map center\n    zoom: Current zoom level\n    map_width: Map width in pixels\n    map_height: Map height in pixels\n\nReturns:\n    ViewportBounds object",
        "args": [
          "center",
          "zoom",
          "map_width",
          "map_height"
        ],
        "complexity": 1,
        "calls": [
          "ViewportBounds"
        ],
        "decorators": []
      },
      {
        "name": "__init__",
        "line": 50,
        "end_line": 69,
        "docstring": "Initialize the lazy marker manager.\n\nArgs:\n    max_markers_per_viewport: Maximum markers to render in viewport\n    clustering_zoom_threshold: Zoom level below which to use clustering",
        "args": [
          "self",
          "max_markers_per_viewport",
          "clustering_zoom_threshold"
        ],
        "complexity": 1,
        "calls": [
          "info"
        ],
        "decorators": []
      },
      {
        "name": "get_visible_markers",
        "line": 71,
        "end_line": 124,
        "docstring": "Get markers that should be visible based on viewport and zoom level.\n\nArgs:\n    loca_df: DataFrame with borehole location data\n    viewport: Current map viewport bounds and zoom\n    selected_ids: List of selected borehole IDs (always visible)\n    force_all: Force rendering all markers (for small datasets)\n\nReturns:\n    List of Dash Leaflet marker components",
        "args": [
          "self",
          "loca_df",
          "viewport",
          "selected_ids",
          "force_all"
        ],
        "complexity": 12,
        "calls": [
          "_filter_by_viewport",
          "info",
          "_create_all_markers",
          "head",
          "info",
          "_create_all_markers",
          "_create_clustered_markers",
          "_create_viewport_markers",
          "error",
          "_create_all_markers",
          "len",
          "head",
          "len",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "_filter_by_viewport",
        "line": 126,
        "end_line": 163,
        "docstring": "Filter DataFrame to only include markers within viewport bounds.",
        "args": [
          "self",
          "loca_df",
          "viewport"
        ],
        "complexity": 2,
        "calls": [
          "info",
          "abs",
          "abs",
          "len",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "_create_viewport_markers",
        "line": 165,
        "end_line": 198,
        "docstring": "Create markers for viewport-filtered data.",
        "args": [
          "self",
          "df",
          "selected_ids"
        ],
        "complexity": 3,
        "calls": [
          "_create_all_markers",
          "len",
          "max",
          "head",
          "info",
          "DataFrame",
          "concat",
          "isin",
          "len",
          "isin",
          "len",
          "len",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "_create_clustered_markers",
        "line": 200,
        "end_line": 243,
        "docstring": "Create clustered markers for zoomed-out views.",
        "args": [
          "self",
          "df",
          "viewport",
          "selected_ids"
        ],
        "complexity": 4,
        "calls": [
          "_create_grid_clusters",
          "info",
          "DataFrame",
          "_create_all_markers",
          "len",
          "_create_all_markers",
          "isin",
          "_create_single_marker",
          "append",
          "_create_cluster_marker",
          "append",
          "isin",
          "len",
          "len",
          "isin"
        ],
        "decorators": []
      },
      {
        "name": "_create_grid_clusters",
        "line": 245,
        "end_line": 292,
        "docstring": "Create clusters using a simple grid-based approach.",
        "args": [
          "self",
          "df",
          "viewport"
        ],
        "complexity": 4,
        "calls": [
          "max",
          "iterrows",
          "items",
          "append",
          "append",
          "append",
          "MarkerCluster",
          "append",
          "int",
          "int",
          "sum",
          "len",
          "sum",
          "len",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "_create_cluster_marker",
        "line": 294,
        "end_line": 334,
        "docstring": "Create a cluster marker representing multiple boreholes.",
        "args": [
          "self",
          "cluster"
        ],
        "complexity": 3,
        "calls": [
          "Marker",
          "replace",
          "join",
          "str",
          "Tooltip",
          "replace",
          "strip",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "_create_all_markers",
        "line": 336,
        "end_line": 347,
        "docstring": "Create markers for all rows in DataFrame.",
        "args": [
          "self",
          "df",
          "selected_ids"
        ],
        "complexity": 2,
        "calls": [
          "iterrows",
          "_create_single_marker",
          "append"
        ],
        "decorators": []
      },
      {
        "name": "_create_single_marker",
        "line": 349,
        "end_line": 388,
        "docstring": "Create a single marker from a DataFrame row.",
        "args": [
          "self",
          "row",
          "is_selected",
          "index"
        ],
        "complexity": 2,
        "calls": [
          "strip",
          "_get_marker_icon_url",
          "_format_depth_value",
          "_format_depth_value",
          "Marker",
          "get",
          "get",
          "str",
          "Tooltip",
          "strip"
        ],
        "decorators": []
      },
      {
        "name": "_get_marker_icon_url",
        "line": 390,
        "end_line": 396,
        "docstring": "Get the appropriate marker icon URL.",
        "args": [
          "self",
          "is_selected"
        ],
        "complexity": 2,
        "calls": [],
        "decorators": []
      },
      {
        "name": "_format_depth_value",
        "line": 398,
        "end_line": 407,
        "docstring": "Format depth values for display.",
        "args": [
          "self",
          "value"
        ],
        "complexity": 5,
        "calls": [
          "strip",
          "float",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "update_cache_stats",
        "line": 409,
        "end_line": 415,
        "docstring": "Get cache statistics for monitoring.",
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "len",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "clear_cache",
        "line": 417,
        "end_line": 422,
        "docstring": "Clear all caches to free memory.",
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "clear",
          "clear",
          "info"
        ],
        "decorators": []
      }
    ],
    "loading_indicators.py": [
      {
        "name": "get_loading_manager",
        "line": 372,
        "end_line": 374,
        "docstring": "Get the global loading state manager.",
        "args": [],
        "complexity": 1,
        "calls": [],
        "decorators": []
      },
      {
        "name": "create_upload_loading",
        "line": 378,
        "end_line": 382,
        "docstring": "Create loading indicator for file uploads.",
        "args": [
          "upload_id",
          "message"
        ],
        "complexity": 1,
        "calls": [
          "create_file_upload_feedback"
        ],
        "decorators": []
      },
      {
        "name": "create_plot_loading",
        "line": 385,
        "end_line": 387,
        "docstring": "Create loading indicator for plot generation.",
        "args": [
          "plot_id",
          "stage"
        ],
        "complexity": 1,
        "calls": [
          "create_plot_generation_feedback"
        ],
        "decorators": []
      },
      {
        "name": "create_data_loading",
        "line": 390,
        "end_line": 392,
        "docstring": "Create loading indicator for data operations.",
        "args": [
          "data_id",
          "message"
        ],
        "complexity": 1,
        "calls": [
          "create_spinner"
        ],
        "decorators": []
      },
      {
        "name": "create_success_toast",
        "line": 395,
        "end_line": 397,
        "docstring": "Create success toast notification.",
        "args": [
          "message"
        ],
        "complexity": 1,
        "calls": [
          "create_toast_notification"
        ],
        "decorators": []
      },
      {
        "name": "create_error_toast",
        "line": 400,
        "end_line": 402,
        "docstring": "Create error toast notification.",
        "args": [
          "message"
        ],
        "complexity": 1,
        "calls": [
          "create_toast_notification"
        ],
        "decorators": []
      },
      {
        "name": "create_spinner",
        "line": 32,
        "end_line": 83,
        "docstring": "Create a loading spinner component.\n\nArgs:\n    loading_id: Unique identifier for the loading state\n    message: Message to display during loading\n    size: Size of spinner (\"small\", \"default\", \"large\")\n\nReturns:\n    html.Div: Loading spinner component",
        "args": [
          "loading_id",
          "message",
          "size"
        ],
        "complexity": 1,
        "calls": [
          "Div",
          "get",
          "Store",
          "Div",
          "P"
        ],
        "decorators": [
          "staticmethod"
        ]
      },
      {
        "name": "create_progress_bar",
        "line": 86,
        "end_line": 144,
        "docstring": "Create a progress bar component.\n\nArgs:\n    progress_id: Unique identifier for the progress bar\n    current: Current progress value\n    total: Total/maximum progress value\n    message: Optional message to display\n\nReturns:\n    html.Div: Progress bar component",
        "args": [
          "progress_id",
          "current",
          "total",
          "message"
        ],
        "complexity": 1,
        "calls": [
          "Div",
          "Div",
          "P",
          "P",
          "Div"
        ],
        "decorators": [
          "staticmethod"
        ]
      },
      {
        "name": "create_file_upload_feedback",
        "line": 147,
        "end_line": 198,
        "docstring": "Create specialized feedback for file upload operations.\n\nArgs:\n    upload_id: Unique identifier for the upload operation\n    files_processed: Number of files processed so far\n    total_files: Total number of files to process\n    current_file: Name of currently processing file\n\nReturns:\n    html.Div: File upload feedback component",
        "args": [
          "upload_id",
          "files_processed",
          "total_files",
          "current_file"
        ],
        "complexity": 2,
        "calls": [
          "Div",
          "create_spinner",
          "create_progress_bar",
          "P",
          "P"
        ],
        "decorators": [
          "staticmethod"
        ]
      },
      {
        "name": "create_plot_generation_feedback",
        "line": 201,
        "end_line": 254,
        "docstring": "Create specialized feedback for plot generation operations.\n\nArgs:\n    plot_id: Unique identifier for the plot operation\n    stage: Current stage of plot generation\n\nReturns:\n    html.Div: Plot generation feedback component",
        "args": [
          "plot_id",
          "stage"
        ],
        "complexity": 2,
        "calls": [
          "get",
          "Div",
          "Div",
          "create_spinner",
          "P",
          "P"
        ],
        "decorators": [
          "staticmethod"
        ]
      },
      {
        "name": "create_toast_notification",
        "line": 257,
        "end_line": 324,
        "docstring": "Create a toast notification for user feedback.\n\nArgs:\n    message: Message to display\n    notification_type: Type of notification (\"success\", \"error\", \"warning\", \"info\")\n    duration: Duration in milliseconds (auto-hide)\n\nReturns:\n    html.Div: Toast notification component",
        "args": [
          "message",
          "notification_type",
          "duration"
        ],
        "complexity": 1,
        "calls": [
          "get",
          "get",
          "Div",
          "Div",
          "Span",
          "Span",
          "Button"
        ],
        "decorators": [
          "staticmethod"
        ]
      },
      {
        "name": "__init__",
        "line": 335,
        "end_line": 336,
        "docstring": null,
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [],
        "decorators": []
      },
      {
        "name": "set_loading",
        "line": 338,
        "end_line": 344,
        "docstring": "Set loading state for a component.",
        "args": [
          "self",
          "component_id",
          "is_loading",
          "message"
        ],
        "complexity": 1,
        "calls": [
          "time"
        ],
        "decorators": []
      },
      {
        "name": "is_loading",
        "line": 346,
        "end_line": 348,
        "docstring": "Check if a component is currently loading.",
        "args": [
          "self",
          "component_id"
        ],
        "complexity": 1,
        "calls": [
          "get",
          "get"
        ],
        "decorators": []
      },
      {
        "name": "get_message",
        "line": 350,
        "end_line": 352,
        "docstring": "Get the loading message for a component.",
        "args": [
          "self",
          "component_id"
        ],
        "complexity": 1,
        "calls": [
          "get",
          "get"
        ],
        "decorators": []
      },
      {
        "name": "clear_state",
        "line": 354,
        "end_line": 357,
        "docstring": "Clear loading state for a component.",
        "args": [
          "self",
          "component_id"
        ],
        "complexity": 2,
        "calls": [],
        "decorators": []
      },
      {
        "name": "clear_all",
        "line": 359,
        "end_line": 361,
        "docstring": "Clear all loading states.",
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "clear"
        ],
        "decorators": []
      },
      {
        "name": "get_active_states",
        "line": 363,
        "end_line": 365,
        "docstring": "Get all currently active loading states.",
        "args": [
          "self"
        ],
        "complexity": 2,
        "calls": [
          "items",
          "get"
        ],
        "decorators": []
      }
    ],
    "map_utils.py": [
      {
        "name": "filter_selection_by_shape",
        "line": 8,
        "end_line": 97,
        "docstring": "Filter borehole data by drawn shape with extensive logging",
        "args": [
          "loca_df",
          "drawn_geojson"
        ],
        "complexity": 12,
        "calls": [
          "info",
          "info",
          "info",
          "hasattr",
          "info",
          "get",
          "info",
          "info",
          "info",
          "get",
          "info",
          "get",
          "get",
          "info",
          "info",
          "error",
          "error",
          "info",
          "info",
          "warning",
          "isinstance",
          "warning",
          "info",
          "filter_by_geometry",
          "info",
          "error",
          "len",
          "info",
          "info",
          "info",
          "len",
          "tolist",
          "info",
          "info",
          "error",
          "type",
          "type",
          "len",
          "type",
          "len",
          "list",
          "isinstance",
          "keys",
          "len",
          "min",
          "max",
          "min",
          "max",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "filter_by_geometry",
        "line": 100,
        "end_line": 301,
        "docstring": "Filter DataFrame by a single geometry with detailed logging",
        "args": [
          "loca_df",
          "geometry"
        ],
        "complexity": 26,
        "calls": [
          "info",
          "get",
          "get",
          "info",
          "info",
          "info",
          "error",
          "DataFrame",
          "info",
          "get",
          "len",
          "len",
          "min",
          "max",
          "min",
          "max",
          "len",
          "info",
          "copy",
          "DataFrame",
          "info",
          "info",
          "error",
          "DataFrame",
          "info",
          "error",
          "DataFrame",
          "len",
          "len",
          "len",
          "Polygon",
          "info",
          "info",
          "len",
          "info",
          "error",
          "DataFrame",
          "len",
          "warning",
          "buffer",
          "info",
          "len",
          "DataFrame",
          "len",
          "tolist",
          "info",
          "copy",
          "warning",
          "DataFrame",
          "error",
          "DataFrame",
          "LineString",
          "median",
          "median",
          "info",
          "info",
          "shapely_transform",
          "buffer",
          "info",
          "project",
          "any",
          "tolist",
          "len",
          "Point",
          "contains",
          "len",
          "info",
          "int",
          "from_crs",
          "info",
          "info",
          "DataFrame",
          "error",
          "DataFrame",
          "zip",
          "len",
          "info",
          "Point",
          "distance",
          "info",
          "len",
          "nonzero",
          "Point",
          "contains",
          "copy",
          "DataFrame",
          "len",
          "len",
          "len"
        ],
        "decorators": []
      }
    ],
    "memory_manager.py": [
      {
        "name": "get_memory_manager",
        "line": 379,
        "end_line": 385,
        "docstring": "Get the global memory manager instance.",
        "args": [],
        "complexity": 2,
        "calls": [
          "MemoryManager"
        ],
        "decorators": []
      },
      {
        "name": "cleanup_memory",
        "line": 388,
        "end_line": 392,
        "docstring": "Convenience function to perform memory cleanup.",
        "args": [
          "force"
        ],
        "complexity": 1,
        "calls": [
          "get_memory_manager",
          "perform_cleanup"
        ],
        "decorators": []
      },
      {
        "name": "optimize_dataframe_memory",
        "line": 395,
        "end_line": 399,
        "docstring": "Convenience function to optimize DataFrame memory usage.",
        "args": [
          "df",
          "inplace"
        ],
        "complexity": 1,
        "calls": [
          "get_memory_manager",
          "optimize_dataframe"
        ],
        "decorators": []
      },
      {
        "name": "get_memory_stats",
        "line": 402,
        "end_line": 406,
        "docstring": "Convenience function to get current memory statistics.",
        "args": [],
        "complexity": 1,
        "calls": [
          "get_memory_manager",
          "get_current_memory_usage"
        ],
        "decorators": []
      },
      {
        "name": "monitor_memory_usage",
        "line": 409,
        "end_line": 417,
        "docstring": "Convenience function to log current memory usage.",
        "args": [
          "log_level"
        ],
        "complexity": 1,
        "calls": [
          "get_memory_stats",
          "getattr",
          "log_func",
          "lower"
        ],
        "decorators": []
      },
      {
        "name": "__init__",
        "line": 43,
        "end_line": 71,
        "docstring": "Initialize memory manager.\n\nArgs:\n    memory_threshold_mb: Memory usage threshold for alerts (MB)\n    cleanup_interval_minutes: Minutes between automatic cleanup\n    enable_auto_cleanup: Whether to enable automatic cleanup",
        "args": [
          "self",
          "memory_threshold_mb",
          "cleanup_interval_minutes",
          "enable_auto_cleanup"
        ],
        "complexity": 1,
        "calls": [
          "now",
          "info"
        ],
        "decorators": []
      },
      {
        "name": "get_current_memory_usage",
        "line": 73,
        "end_line": 101,
        "docstring": "Get current memory usage statistics.",
        "args": [
          "self"
        ],
        "complexity": 3,
        "calls": [
          "Process",
          "memory_info",
          "memory_percent",
          "virtual_memory",
          "MemoryStats",
          "append",
          "len",
          "pop",
          "error",
          "MemoryStats",
          "now",
          "now"
        ],
        "decorators": []
      },
      {
        "name": "check_memory_threshold",
        "line": 103,
        "end_line": 107,
        "docstring": "Check if memory usage exceeds threshold.",
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "get_current_memory_usage"
        ],
        "decorators": []
      },
      {
        "name": "should_cleanup",
        "line": 109,
        "end_line": 121,
        "docstring": "Determine if cleanup should be performed.",
        "args": [
          "self"
        ],
        "complexity": 3,
        "calls": [
          "check_memory_threshold",
          "now",
          "total_seconds"
        ],
        "decorators": []
      },
      {
        "name": "perform_cleanup",
        "line": 123,
        "end_line": 190,
        "docstring": "Perform memory cleanup operations.\n\nArgs:\n    force: Force cleanup regardless of conditions\n\nReturns:\n    Dictionary with cleanup results",
        "args": [
          "self",
          "force"
        ],
        "complexity": 5,
        "calls": [
          "info",
          "get_current_memory_usage",
          "len",
          "clear",
          "append",
          "collect",
          "append",
          "_clear_global_caches",
          "append",
          "now",
          "get_current_memory_usage",
          "update",
          "info",
          "should_cleanup",
          "len",
          "append",
          "error",
          "str",
          "now"
        ],
        "decorators": []
      },
      {
        "name": "_clear_global_caches",
        "line": 192,
        "end_line": 213,
        "docstring": "Clear caches from global singletons.",
        "args": [
          "self"
        ],
        "complexity": 4,
        "calls": [
          "get_lazy_marker_manager",
          "clear_cache",
          "get_coordinate_service",
          "hasattr",
          "warning",
          "clear_cache"
        ],
        "decorators": []
      },
      {
        "name": "optimize_dataframe",
        "line": 215,
        "end_line": 270,
        "docstring": "Optimize DataFrame memory usage.\n\nArgs:\n    df: DataFrame to optimize\n    inplace: Whether to modify DataFrame in place\n\nReturns:\n    Optimized DataFrame",
        "args": [
          "self",
          "df",
          "inplace"
        ],
        "complexity": 12,
        "calls": [
          "copy",
          "select_dtypes",
          "select_dtypes",
          "to_numeric",
          "select_dtypes",
          "info",
          "error",
          "sum",
          "astype",
          "nunique",
          "astype",
          "sum",
          "min",
          "max",
          "astype",
          "len",
          "memory_usage",
          "min",
          "max",
          "memory_usage"
        ],
        "decorators": []
      },
      {
        "name": "register_cache_reference",
        "line": 272,
        "end_line": 276,
        "docstring": "Register a cache object for cleanup.",
        "args": [
          "self",
          "name",
          "cache_object"
        ],
        "complexity": 1,
        "calls": [
          "debug"
        ],
        "decorators": []
      },
      {
        "name": "unregister_cache_reference",
        "line": 278,
        "end_line": 283,
        "docstring": "Unregister a cache object.",
        "args": [
          "self",
          "name"
        ],
        "complexity": 2,
        "calls": [
          "debug"
        ],
        "decorators": []
      },
      {
        "name": "get_memory_report",
        "line": 285,
        "end_line": 343,
        "docstring": "Generate comprehensive memory usage report.",
        "args": [
          "self"
        ],
        "complexity": 4,
        "calls": [
          "get_current_memory_usage",
          "len",
          "virtual_memory",
          "isoformat",
          "max",
          "min",
          "warning",
          "len",
          "list",
          "sum",
          "len",
          "keys",
          "isoformat",
          "isoformat",
          "timedelta"
        ],
        "decorators": []
      },
      {
        "name": "monitor_memory_async",
        "line": 345,
        "end_line": 372,
        "docstring": "Start asynchronous memory monitoring.\n\nArgs:\n    callback_func: Optional callback function to call on threshold breach",
        "args": [
          "self",
          "callback_func"
        ],
        "complexity": 5,
        "calls": [
          "memory_check",
          "get_current_memory_usage",
          "warning",
          "perform_cleanup",
          "callback_func",
          "error"
        ],
        "decorators": []
      },
      {
        "name": "memory_check",
        "line": 353,
        "end_line": 369,
        "docstring": null,
        "args": [],
        "complexity": 5,
        "calls": [
          "get_current_memory_usage",
          "warning",
          "perform_cleanup",
          "callback_func",
          "error"
        ],
        "decorators": []
      }
    ],
    "optimization_baseline_test.py": [
      {
        "name": "setup_test_logging",
        "line": 30,
        "end_line": 49,
        "docstring": "Set up logging for testing baseline behavior",
        "args": [],
        "complexity": 1,
        "calls": [
          "StringIO",
          "StreamHandler",
          "setLevel",
          "Formatter",
          "setFormatter",
          "getLogger",
          "addHandler",
          "setLevel"
        ],
        "decorators": []
      },
      {
        "name": "test_matplotlib_verbosity",
        "line": 52,
        "end_line": 93,
        "docstring": "Test matplotlib font manager verbosity",
        "args": [],
        "complexity": 5,
        "calls": [
          "print",
          "print",
          "print",
          "setup_test_logging",
          "print",
          "time",
          "subplots",
          "text",
          "text",
          "close",
          "time",
          "getvalue",
          "print",
          "print",
          "print",
          "print",
          "enumerate",
          "len",
          "len",
          "split",
          "print",
          "len",
          "print",
          "split",
          "lower",
          "len",
          "len",
          "split",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "test_marker_click_logging",
        "line": 96,
        "end_line": 152,
        "docstring": "Test marker click handler logging verbosity",
        "args": [],
        "complexity": 8,
        "calls": [
          "print",
          "print",
          "print",
          "setup_test_logging",
          "print",
          "time",
          "info",
          "info",
          "info",
          "enumerate",
          "time",
          "getvalue",
          "split",
          "print",
          "print",
          "print",
          "print",
          "info",
          "len",
          "print",
          "len",
          "len",
          "debug",
          "len",
          "len",
          "len",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "test_coordinate_transformation",
        "line": 155,
        "end_line": 222,
        "docstring": "Test coordinate transformation performance (individual vs potential batch)",
        "args": [],
        "complexity": 6,
        "calls": [
          "print",
          "print",
          "print",
          "uniform",
          "uniform",
          "get_coordinate_service",
          "print",
          "print",
          "time",
          "range",
          "print",
          "print",
          "print",
          "time",
          "transform_bng_to_wgs84",
          "print",
          "print",
          "print",
          "transform_coordinates",
          "append",
          "time",
          "time",
          "len",
          "abs",
          "abs",
          "print",
          "print",
          "print",
          "print"
        ],
        "decorators": []
      },
      {
        "name": "test_dataframe_optimization",
        "line": 225,
        "end_line": 331,
        "docstring": "Test DataFrame memory usage and optimization opportunities",
        "args": [],
        "complexity": 13,
        "calls": [
          "print",
          "print",
          "print",
          "start",
          "DataFrame",
          "print",
          "print",
          "items",
          "memory_usage",
          "sum",
          "print",
          "items",
          "print",
          "print",
          "print",
          "print",
          "get_traced_memory",
          "stop",
          "uniform",
          "uniform",
          "uniform",
          "uniform",
          "uniform",
          "uniform",
          "choice",
          "uniform",
          "uniform",
          "print",
          "select_dtypes",
          "min",
          "max",
          "print",
          "memory_usage",
          "nunique",
          "print",
          "range",
          "len",
          "print",
          "print",
          "memory_usage",
          "print",
          "sum",
          "len",
          "finfo",
          "finfo",
          "len",
          "str",
          "unique"
        ],
        "decorators": []
      },
      {
        "name": "test_error_handling",
        "line": 334,
        "end_line": 399,
        "docstring": "Test current error handling behavior",
        "args": [],
        "complexity": 10,
        "calls": [
          "print",
          "print",
          "print",
          "setup_test_logging",
          "print",
          "print",
          "print",
          "getvalue",
          "print",
          "print",
          "print",
          "print",
          "transform_coordinates",
          "print",
          "transform_coordinates",
          "range",
          "print",
          "print",
          "print",
          "print",
          "print",
          "subplots",
          "plot",
          "append",
          "close",
          "print",
          "split",
          "split",
          "random",
          "random",
          "len",
          "len",
          "sum",
          "len",
          "values",
          "type"
        ],
        "decorators": []
      },
      {
        "name": "run_comprehensive_baseline",
        "line": 402,
        "end_line": 516,
        "docstring": "Run all baseline tests and generate a comprehensive report",
        "args": [],
        "complexity": 22,
        "calls": [
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "test_matplotlib_verbosity",
          "test_marker_click_logging",
          "test_coordinate_transformation",
          "test_dataframe_optimization",
          "test_error_handling",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "strftime",
          "str",
          "str",
          "str",
          "str",
          "str",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "strftime"
        ],
        "decorators": []
      },
      {
        "name": "convert_numpy",
        "line": 533,
        "end_line": 540,
        "docstring": null,
        "args": [
          "obj"
        ],
        "complexity": 4,
        "calls": [
          "isinstance",
          "tolist",
          "isinstance",
          "float",
          "isinstance",
          "int"
        ],
        "decorators": []
      }
    ],
    "polyline_utils.py": [
      {
        "name": "create_buffer_polygon",
        "line": 14,
        "end_line": 72,
        "docstring": "Create a buffer polygon around a polyline for visualization\n\nArgs:\n    polyline_coords: List of [lat, lon] coordinates\n    buffer_meters: Buffer size in meters\n\nReturns:\n    List of [lat, lon] coordinates representing the buffer polygon",
        "args": [
          "polyline_coords",
          "buffer_meters"
        ],
        "complexity": 5,
        "calls": [
          "info",
          "LineString",
          "info",
          "shapely_transform",
          "buffer",
          "shapely_transform",
          "hasattr",
          "int",
          "from_crs",
          "from_crs",
          "error",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "create_buffer_visualization",
        "line": 75,
        "end_line": 100,
        "docstring": "Create a Leaflet Polygon component to visualize the buffer\n\nArgs:\n    polyline_coords: List of [lat, lon] coordinates\n    buffer_meters: Buffer size in meters\n\nReturns:\n    dash_leaflet.Polygon component",
        "args": [
          "polyline_coords",
          "buffer_meters"
        ],
        "complexity": 2,
        "calls": [
          "create_buffer_polygon",
          "Polygon",
          "Tooltip"
        ],
        "decorators": []
      },
      {
        "name": "calculate_distance_along_polyline",
        "line": 103,
        "end_line": 160,
        "docstring": "Calculate the distance along a polyline from start to the closest point to the given coordinates\n\nArgs:\n    polyline_coords: List of [lat, lon] coordinates\n    point_lat: Latitude of the point\n    point_lon: Longitude of the point\n\nReturns:\n    Distance in meters from the start of the polyline",
        "args": [
          "polyline_coords",
          "point_lat",
          "point_lon"
        ],
        "complexity": 6,
        "calls": [
          "LineString",
          "Point",
          "shapely_transform",
          "shapely_transform",
          "project",
          "warning",
          "float",
          "float",
          "int",
          "from_crs",
          "error",
          "warning"
        ],
        "decorators": []
      },
      {
        "name": "create_polyline_section",
        "line": 163,
        "end_line": 211,
        "docstring": "Create a section line from a polyline feature drawn on the map\n\nArgs:\n    polyline_feature: GeoJSON feature representing a polyline\n    stored_data: Dictionary containing stored app data (optional)\n\nReturns:\n    List of Dash Leaflet components for visualization",
        "args": [
          "polyline_feature",
          "stored_data"
        ],
        "complexity": 7,
        "calls": [
          "info",
          "Polyline",
          "isinstance",
          "isinstance",
          "get",
          "error",
          "error",
          "Tooltip",
          "type"
        ],
        "decorators": []
      },
      {
        "name": "create_buffer_zone",
        "line": 214,
        "end_line": 250,
        "docstring": "Create a buffer zone visualization around a polyline feature\n\nArgs:\n    polyline_feature: GeoJSON feature representing a polyline\n    buffer_meters: Buffer size in meters\n\nReturns:\n    List containing the buffer zone visualization component",
        "args": [
          "polyline_feature",
          "buffer_meters"
        ],
        "complexity": 7,
        "calls": [
          "create_buffer_visualization",
          "isinstance",
          "isinstance",
          "error",
          "error",
          "type"
        ],
        "decorators": []
      },
      {
        "name": "project_boreholes_to_polyline",
        "line": 253,
        "end_line": 373,
        "docstring": "Project boreholes onto the polyline axis and filter those within buffer distance.\nArgs:\n    borehole_df: DataFrame with borehole data including LOCA_LAT and LOCA_LON\n    polyline_coords: List of [lat, lon] coordinates defining the polyline\n    buffer_distance: Buffer distance in meters\nReturns:\n    DataFrame with filtered boreholes and their distances along the polyline",
        "args": [
          "borehole_df",
          "polyline_coords",
          "buffer_distance"
        ],
        "complexity": 26,
        "calls": [
          "info",
          "info",
          "LineString",
          "info",
          "shapely_transform",
          "info",
          "enumerate",
          "info",
          "len",
          "warning",
          "int",
          "from_crs",
          "iterrows",
          "DataFrame",
          "sort_values",
          "DataFrame",
          "error",
          "DataFrame",
          "warning",
          "shapely_transform",
          "distance",
          "len",
          "len",
          "strip",
          "strip",
          "float",
          "float",
          "Point",
          "debug",
          "project",
          "to_dict",
          "append",
          "warning",
          "len",
          "float",
          "float",
          "str",
          "str",
          "get",
          "get",
          "get"
        ],
        "decorators": []
      },
      {
        "name": "point_to_line_distance",
        "line": 376,
        "end_line": 399,
        "docstring": "Calculate perpendicular distance from a point to a line segment.\nArgs:\n    point: (x, y) coordinates of the point\n    line_start: (x, y) coordinates of line start\n    line_end: (x, y) coordinates of line end\nReturns:\n    Distance in same units as input coordinates",
        "args": [
          "point",
          "line_start",
          "line_end"
        ],
        "complexity": 3,
        "calls": [
          "sqrt",
          "sqrt",
          "abs",
          "error",
          "float"
        ],
        "decorators": []
      },
      {
        "name": "project_point_to_line_segment",
        "line": 402,
        "end_line": 427,
        "docstring": "Project a point onto a line segment.\nArgs:\n    point: (x, y) coordinates of the point\n    line_start: (x, y) coordinates of line start\n    line_end: (x, y) coordinates of line end\nReturns:\n    (x, y) coordinates of the projected point on the line segment",
        "args": [
          "point",
          "line_start",
          "line_end"
        ],
        "complexity": 3,
        "calls": [
          "max",
          "min",
          "error"
        ],
        "decorators": []
      }
    ],
    "section_plot_professional.py": [
      {
        "name": "parse_ags_geol_section_from_string",
        "line": 22,
        "end_line": 97,
        "docstring": "Parse AGS content string and extract GEOL, LOCA, and ABBR group data as DataFrames.",
        "args": [
          "content"
        ],
        "complexity": 55,
        "calls": [
          "splitlines",
          "parse_lines",
          "DataFrame",
          "DataFrame",
          "list",
          "strip",
          "strip",
          "DataFrame",
          "reader",
          "append",
          "to_numeric",
          "append",
          "to_numeric",
          "append",
          "len",
          "len",
          "len",
          "len",
          "len",
          "len",
          "len",
          "len",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "plot_professional_borehole_sections",
        "line": 100,
        "end_line": 566,
        "docstring": "Plot professional-style borehole sections with Openground-style formatting.\n\nArgs:\n    geol_df: Geological data DataFrame\n    loca_df: Location data DataFrame\n    abbr_df: Abbreviations DataFrame (optional)\n    ags_title: Title for the plot\n    section_line: Section line coordinates for projection\n    show_labels: Whether to show geological labels\n    vertical_exaggeration: Vertical exaggeration factor (default 3.0)\n    save_high_res: Whether to save high-resolution output\n    output_filename: Output filename for saving (without extension)\n\nReturns:\n    matplotlib.figure.Figure: The generated figure",
        "args": [
          "geol_df",
          "loca_df",
          "abbr_df",
          "ags_title",
          "section_line",
          "show_labels",
          "vertical_exaggeration",
          "save_high_res",
          "output_filename",
          "color_alpha",
          "hatch_alpha"
        ],
        "complexity": 50,
        "calls": [
          "print",
          "print",
          "print",
          "print",
          "fillna",
          "to_dict",
          "unique",
          "print",
          "print",
          "print",
          "len",
          "max",
          "min",
          "subplots",
          "set_facecolor",
          "set_major_locator",
          "set_major_locator",
          "set_minor_locator",
          "set_minor_locator",
          "grid",
          "grid",
          "set",
          "enumerate",
          "array",
          "argsort",
          "plot",
          "array",
          "enumerate",
          "set_title",
          "int",
          "int",
          "arange",
          "set_xticks",
          "set_xticklabels",
          "set_xlabel",
          "set_ylabel",
          "max",
          "min",
          "set_ylim",
          "set_xlim",
          "legend",
          "set_facecolor",
          "set_alpha",
          "tight_layout",
          "print",
          "from_crs",
          "from_crs",
          "print",
          "copy",
          "copy",
          "iterrows",
          "merge",
          "map",
          "map",
          "dropna",
          "first",
          "tolist",
          "print",
          "print",
          "print",
          "print",
          "merge",
          "dropna",
          "sort_values",
          "reindex",
          "tolist",
          "abs",
          "abs",
          "dict",
          "get_geology_color",
          "get_geology_pattern",
          "print",
          "MultipleLocator",
          "MultipleLocator",
          "AutoMinorLocator",
          "AutoMinorLocator",
          "reset_index",
          "iterrows",
          "list",
          "list",
          "annotate",
          "max",
          "min",
          "Patch",
          "append",
          "savefig",
          "print",
          "savefig",
          "print",
          "any",
          "apply",
          "apply",
          "transform",
          "transform",
          "enumerate",
          "append",
          "print",
          "append",
          "print",
          "merge",
          "to_numeric",
          "isinstance",
          "print",
          "LineString",
          "enumerate",
          "dict",
          "hypot",
          "dict",
          "zip",
          "first",
          "get",
          "get",
          "fill_betweenx",
          "values",
          "values",
          "floor",
          "ceil",
          "max",
          "min",
          "min",
          "max",
          "get_frame",
          "get_frame",
          "tolist",
          "astype",
          "astype",
          "float",
          "float",
          "transform",
          "transform",
          "first",
          "first",
          "print",
          "len",
          "zip",
          "ShapelyPoint",
          "project",
          "append",
          "print",
          "zip",
          "zip",
          "len",
          "sort_values",
          "fill_betweenx",
          "add",
          "print",
          "len",
          "print",
          "print",
          "get",
          "get",
          "groupby",
          "len",
          "str",
          "search",
          "min",
          "max",
          "min",
          "min",
          "max",
          "int",
          "upper",
          "notnull",
          "isdigit",
          "notnull",
          "isdigit",
          "len",
          "groupby",
          "str",
          "group",
          "groupby",
          "groupby",
          "replace",
          "replace",
          "replace",
          "replace",
          "str",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "plot_section_from_ags_content",
        "line": 569,
        "end_line": 612,
        "docstring": "Create a professional geological section plot from AGS content.\n\nArgs:\n    ags_content: AGS file content as string\n    filter_loca_ids: List of location IDs to include (optional)\n    section_line: Section line coordinates for projection (optional)\n    show_labels: Whether to show geological labels (default True)\n    vertical_exaggeration: Vertical exaggeration factor (default 3.0)\n    save_high_res: Whether to save high-resolution output (default False)\n    output_filename: Output filename for saving (optional)\n\nReturns:\n    matplotlib.figure.Figure: The generated figure",
        "args": [
          "ags_content",
          "filter_loca_ids",
          "section_line",
          "show_labels",
          "vertical_exaggeration",
          "save_high_res",
          "output_filename"
        ],
        "complexity": 4,
        "calls": [
          "parse_ags_geol_section_from_string",
          "plot_professional_borehole_sections",
          "isin",
          "isin"
        ],
        "decorators": []
      },
      {
        "name": "parse_lines",
        "line": 26,
        "end_line": 27,
        "docstring": null,
        "args": [
          "lines"
        ],
        "complexity": 1,
        "calls": [
          "list",
          "reader"
        ],
        "decorators": []
      }
    ],
    "test_ags_integration.py": [
      {
        "name": "test_ags_integration",
        "line": 9,
        "end_line": 43,
        "docstring": "Test AGS integration with geology code mapping.",
        "args": [],
        "complexity": 3,
        "calls": [
          "print",
          "plot_borehole_log_from_ags_content",
          "print",
          "print",
          "print",
          "len",
          "len"
        ],
        "decorators": []
      }
    ],
    "test_alignment.py": [
      {
        "name": "test_layer_alignment",
        "line": 15,
        "end_line": 67,
        "docstring": "Test text box alignment with geological layer boundaries",
        "args": [],
        "complexity": 3,
        "calls": [
          "DataFrame",
          "print",
          "create_professional_borehole_log",
          "print",
          "b64decode",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print_exc",
          "open",
          "write",
          "len"
        ],
        "decorators": []
      }
    ],
    "test_callback_refactoring_comprehensive.py": [
      {
        "name": "test_all_callback_imports",
        "line": 16,
        "end_line": 55,
        "docstring": "Test that all callback modules can be imported successfully.",
        "args": [],
        "complexity": 2,
        "calls": [
          "print",
          "print",
          "print",
          "print",
          "print",
          "print_exc"
        ],
        "decorators": []
      },
      {
        "name": "test_callback_manager",
        "line": 58,
        "end_line": 83,
        "docstring": "Test that the callback manager works correctly.",
        "args": [],
        "complexity": 2,
        "calls": [
          "print",
          "get_callback_manager",
          "isinstance",
          "FileUploadCallback",
          "add_callback",
          "get_callback_summary",
          "print",
          "type",
          "print",
          "print_exc"
        ],
        "decorators": []
      },
      {
        "name": "test_callback_instantiation",
        "line": 86,
        "end_line": 123,
        "docstring": "Test that all callback classes can be instantiated.",
        "args": [],
        "complexity": 3,
        "calls": [
          "print",
          "print",
          "FileUploadCallback",
          "MapInteractionCallback",
          "PlotGenerationCallback",
          "SearchFunctionalityCallback",
          "MarkerHandlingCallback",
          "hasattr",
          "hasattr",
          "hasattr",
          "print",
          "print_exc",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "test_register_all_callbacks_function",
        "line": 126,
        "end_line": 183,
        "docstring": "Test the register_all_callbacks convenience function.",
        "args": [],
        "complexity": 3,
        "calls": [
          "print",
          "MockApp",
          "get_callback_manager",
          "clear",
          "get_callback_summary",
          "print",
          "FileUploadCallback",
          "MapInteractionCallback",
          "PlotGenerationCallback",
          "SearchFunctionalityCallback",
          "MarkerHandlingCallback",
          "add_callback",
          "print",
          "print_exc",
          "append"
        ],
        "decorators": []
      },
      {
        "name": "test_architecture_improvements",
        "line": 186,
        "end_line": 214,
        "docstring": "Test that the architecture improvements are working.",
        "args": [],
        "complexity": 2,
        "calls": [
          "print",
          "get_app_state_manager",
          "print",
          "get_error_handler",
          "print",
          "get_coordinate_service",
          "print",
          "print",
          "print",
          "print_exc"
        ],
        "decorators": []
      },
      {
        "name": "run_comprehensive_validation",
        "line": 217,
        "end_line": 253,
        "docstring": "Run all validation tests.",
        "args": [],
        "complexity": 4,
        "calls": [
          "print",
          "print",
          "len",
          "print",
          "print",
          "test",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print"
        ],
        "decorators": []
      },
      {
        "name": "__init__",
        "line": 135,
        "end_line": 136,
        "docstring": null,
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [],
        "decorators": []
      },
      {
        "name": "callback",
        "line": 138,
        "end_line": 144,
        "docstring": null,
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "append"
        ],
        "decorators": []
      },
      {
        "name": "decorator",
        "line": 140,
        "end_line": 142,
        "docstring": null,
        "args": [
          "func"
        ],
        "complexity": 1,
        "calls": [
          "append"
        ],
        "decorators": []
      }
    ],
    "test_cascading.py": [
      {
        "name": "test_cascading_pushdown",
        "line": 12,
        "end_line": 63,
        "docstring": "Test cascading push-down behavior with a very long first description.",
        "args": [],
        "complexity": 2,
        "calls": [
          "print",
          "DataFrame",
          "create_professional_borehole_log",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "b64decode",
          "print",
          "print",
          "open",
          "write",
          "len"
        ],
        "decorators": []
      }
    ],
    "test_column_width_diagnostic.py": [],
    "test_comprehensive_text_boxes.py": [
      {
        "name": "test_comprehensive_text_boxes",
        "line": 16,
        "end_line": 120,
        "docstring": "Test the text box implementation with various scenarios",
        "args": [],
        "complexity": 5,
        "calls": [
          "DataFrame",
          "print",
          "create_professional_borehole_log",
          "DataFrame",
          "print",
          "create_professional_borehole_log",
          "range",
          "DataFrame",
          "print",
          "create_professional_borehole_log",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "append",
          "print",
          "print",
          "print",
          "open",
          "write",
          "open",
          "write",
          "open",
          "write",
          "b64decode",
          "b64decode",
          "b64decode",
          "len",
          "len",
          "len"
        ],
        "decorators": []
      }
    ],
    "test_coordinate_service.py": [
      {
        "name": "test_coordinate_service",
        "line": 22,
        "end_line": 116,
        "docstring": "Test the coordinate transformation service.",
        "args": [],
        "complexity": 9,
        "calls": [
          "info",
          "get_coordinate_service",
          "get_cache_stats",
          "info",
          "info",
          "info",
          "info",
          "warning",
          "transform_bng_to_wgs84",
          "transform_bng_to_wgs84",
          "atleast_1d",
          "atleast_1d",
          "all",
          "all",
          "transform_wgs84_to_utm",
          "info",
          "isnan",
          "isnan",
          "info",
          "warning",
          "info",
          "info",
          "error",
          "info",
          "error",
          "error"
        ],
        "decorators": []
      },
      {
        "name": "test_backward_compatibility",
        "line": 119,
        "end_line": 137,
        "docstring": "Test that the convenience functions work correctly.",
        "args": [],
        "complexity": 2,
        "calls": [
          "info",
          "transform_bng_to_wgs84",
          "transform_wgs84_to_utm",
          "info",
          "info",
          "error"
        ],
        "decorators": []
      },
      {
        "name": "test_integration_with_callbacks",
        "line": 140,
        "end_line": 171,
        "docstring": "Test that the coordinate service integrates properly with callbacks.",
        "args": [],
        "complexity": 6,
        "calls": [
          "info",
          "transform_coordinates",
          "info",
          "error",
          "error",
          "info",
          "error"
        ],
        "decorators": []
      }
    ],
    "test_enhanced_text_boxes.py": [
      {
        "name": "test_enhanced_text_boxes",
        "line": 15,
        "end_line": 77,
        "docstring": "Test the enhanced text box rendering with connector lines.",
        "args": [],
        "complexity": 4,
        "calls": [
          "DataFrame",
          "print",
          "print",
          "create_professional_borehole_log",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print_exc",
          "len",
          "len",
          "print",
          "print",
          "len",
          "len"
        ],
        "decorators": []
      }
    ],
    "test_forced_overlap.py": [
      {
        "name": "test_forced_overlap",
        "line": 10,
        "end_line": 52,
        "docstring": "Test with forced overlap to verify push-down behavior.",
        "args": [],
        "complexity": 2,
        "calls": [
          "print",
          "DataFrame",
          "create_professional_borehole_log",
          "print",
          "print",
          "print",
          "print",
          "print",
          "b64decode",
          "print",
          "print",
          "open",
          "write",
          "len"
        ],
        "decorators": []
      }
    ],
    "test_implementation_validation.py": [
      {
        "name": "test_memory_leak_fixes",
        "line": 77,
        "end_line": 113,
        "docstring": "Test Action 1: Memory leak fixes.",
        "args": [
          "results"
        ],
        "complexity": 3,
        "calls": [
          "info",
          "add_test",
          "hasattr",
          "matplotlib_figure",
          "add_subplot",
          "plot",
          "add_test",
          "add_test",
          "add_test",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "test_file_size_validation",
        "line": 116,
        "end_line": 160,
        "docstring": "Test Action 2: File size validation.",
        "args": [
          "results"
        ],
        "complexity": 5,
        "calls": [
          "info",
          "hasattr",
          "add_test",
          "add_test",
          "add_test",
          "add_test",
          "add_test",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "test_error_handling_standardization",
        "line": 163,
        "end_line": 213,
        "docstring": "Test Action 3: Error handling standardization.",
        "args": [
          "results"
        ],
        "complexity": 6,
        "calls": [
          "info",
          "hasattr",
          "CallbackError",
          "create_error_message",
          "add_test",
          "add_test",
          "add_test",
          "add_test",
          "add_test",
          "add_test",
          "str",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "test_coordinate_transformation_service",
        "line": 216,
        "end_line": 276,
        "docstring": "Test Action 4: Coordinate transformation service.",
        "args": [
          "results"
        ],
        "complexity": 7,
        "calls": [
          "info",
          "get_coordinate_service",
          "transform_bng_to_wgs84",
          "get_cache_stats",
          "transform_bng_to_wgs84",
          "add_test",
          "add_test",
          "add_test",
          "add_test",
          "add_test",
          "add_test",
          "add_test",
          "abs",
          "abs",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "test_constants_extraction",
        "line": 279,
        "end_line": 344,
        "docstring": "Test Action 5: Constants extraction.",
        "args": [
          "results"
        ],
        "complexity": 9,
        "calls": [
          "info",
          "hasattr",
          "add_test",
          "add_test",
          "hasattr",
          "add_test",
          "add_test",
          "hasattr",
          "add_test",
          "add_test",
          "add_test",
          "add_test",
          "add_test",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "test_loading_indicators",
        "line": 347,
        "end_line": 430,
        "docstring": "Test Action 6: Loading indicators.",
        "args": [
          "results"
        ],
        "complexity": 7,
        "calls": [
          "info",
          "create_spinner",
          "create_progress_bar",
          "get_loading_manager",
          "set_loading",
          "is_loading",
          "create_upload_loading",
          "create_plot_loading",
          "clear_all",
          "add_test",
          "add_test",
          "add_test",
          "add_test",
          "add_test",
          "add_test",
          "add_test",
          "add_test",
          "add_test",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "test_error_recovery_mechanisms",
        "line": 433,
        "end_line": 515,
        "docstring": "Test Action 7: Error recovery mechanisms.",
        "args": [
          "results"
        ],
        "complexity": 9,
        "calls": [
          "info",
          "CircuitBreaker",
          "with_retry",
          "test_function",
          "get_recovery_manager",
          "get_system_health",
          "isinstance",
          "add_test",
          "add_test",
          "add_test",
          "add_test",
          "ValueError",
          "add_test",
          "add_test",
          "add_test",
          "create_user_friendly_message",
          "add_test",
          "add_test",
          "len",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "test_health_check_endpoint",
        "line": 518,
        "end_line": 595,
        "docstring": "Test Action 8: Health check endpoint.",
        "args": [
          "results"
        ],
        "complexity": 10,
        "calls": [
          "info",
          "get_health_checker",
          "get_quick_health_status",
          "run_health_check",
          "add_test",
          "add_test",
          "add_test",
          "add_test",
          "add_test",
          "get",
          "add_test",
          "add_test",
          "get",
          "add_test",
          "add_test",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "main",
        "line": 598,
        "end_line": 678,
        "docstring": "Run all validation tests.",
        "args": [],
        "complexity": 6,
        "calls": [
          "info",
          "info",
          "info",
          "info",
          "ValidationResults",
          "time",
          "info",
          "info",
          "info",
          "get_summary",
          "info",
          "info",
          "info",
          "info",
          "info",
          "info",
          "info",
          "info",
          "info",
          "info",
          "info",
          "info",
          "info",
          "get",
          "info",
          "time",
          "error",
          "test_func",
          "info",
          "info",
          "error",
          "add_test",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "__init__",
        "line": 38,
        "end_line": 42,
        "docstring": null,
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [],
        "decorators": []
      },
      {
        "name": "add_test",
        "line": 44,
        "end_line": 61,
        "docstring": "Add a test result.",
        "args": [
          "self",
          "test_name",
          "status",
          "message",
          "details"
        ],
        "complexity": 5,
        "calls": [
          "append",
          "time"
        ],
        "decorators": []
      },
      {
        "name": "get_summary",
        "line": 63,
        "end_line": 74,
        "docstring": "Get test summary.",
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "len",
          "round"
        ],
        "decorators": []
      },
      {
        "name": "test_function",
        "line": 463,
        "end_line": 464,
        "docstring": null,
        "args": [],
        "complexity": 1,
        "calls": [
          "with_retry"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5B79710>"
        ]
      }
    ],
    "test_layer_order.py": [
      {
        "name": "test_numbered_layers",
        "line": 15,
        "end_line": 68,
        "docstring": "Test with simple numbered layers to verify stacking order",
        "args": [],
        "complexity": 4,
        "calls": [
          "DataFrame",
          "print",
          "create_professional_borehole_log",
          "print",
          "print",
          "print",
          "print_exc",
          "len",
          "b64decode",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "open",
          "write",
          "len"
        ],
        "decorators": []
      }
    ],
    "test_legend_mapping.py": [
      {
        "name": "test_geology_mapping",
        "line": 11,
        "end_line": 56,
        "docstring": "Test that geology code mapping works correctly.",
        "args": [],
        "complexity": 3,
        "calls": [
          "print",
          "DataFrame",
          "print",
          "print",
          "print",
          "create_professional_borehole_log",
          "get_geology_color",
          "get_geology_pattern",
          "print",
          "print",
          "print",
          "len"
        ],
        "decorators": []
      }
    ],
    "test_optimizations.py": [
      {
        "name": "test_memory_optimization",
        "line": 12,
        "end_line": 44,
        "docstring": "Test DataFrame memory optimization",
        "args": [],
        "complexity": 2,
        "calls": [
          "print",
          "DataFrame",
          "sum",
          "print",
          "optimize_dataframe_memory",
          "sum",
          "print",
          "print",
          "print",
          "print",
          "range",
          "random",
          "memory_usage",
          "memory_usage"
        ],
        "decorators": []
      },
      {
        "name": "test_lazy_marker_manager",
        "line": 47,
        "end_line": 88,
        "docstring": "Test lazy marker loading system",
        "args": [],
        "complexity": 2,
        "calls": [
          "print",
          "ViewportBounds",
          "print",
          "LazyMarkerManager",
          "print",
          "DataFrame",
          "get_visible_markers",
          "print",
          "print",
          "print",
          "print_exc",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "test_coordinate_service",
        "line": 91,
        "end_line": 111,
        "docstring": "Test coordinate transformation service",
        "args": [],
        "complexity": 2,
        "calls": [
          "print",
          "get_coordinate_service",
          "print",
          "transform_bng_to_wgs84",
          "print",
          "print",
          "print",
          "type"
        ],
        "decorators": []
      },
      {
        "name": "test_memory_monitoring",
        "line": 114,
        "end_line": 127,
        "docstring": "Test memory monitoring system",
        "args": [],
        "complexity": 2,
        "calls": [
          "print",
          "monitor_memory_usage",
          "print",
          "print"
        ],
        "decorators": []
      },
      {
        "name": "test_integration",
        "line": 130,
        "end_line": 149,
        "docstring": "Test integration between systems",
        "args": [],
        "complexity": 2,
        "calls": [
          "print",
          "spec_from_file_location",
          "module_from_spec",
          "print",
          "print"
        ],
        "decorators": []
      },
      {
        "name": "main",
        "line": 152,
        "end_line": 180,
        "docstring": "Run all tests",
        "args": [],
        "complexity": 4,
        "calls": [
          "print",
          "print",
          "len",
          "print",
          "print",
          "test",
          "print",
          "print"
        ],
        "decorators": []
      }
    ],
    "test_overflow.py": [],
    "test_overflow_management.py": [
      {
        "name": "test_overflow_management_system",
        "line": 16,
        "end_line": 121,
        "docstring": "Test the comprehensive overflow management system with various scenarios.",
        "args": [],
        "complexity": 6,
        "calls": [
          "DataFrame",
          "print",
          "print",
          "print",
          "print",
          "iterrows",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "len",
          "print",
          "print",
          "print",
          "create_professional_borehole_log",
          "print",
          "enumerate",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print_exc",
          "print",
          "len",
          "open",
          "write",
          "print",
          "b64decode"
        ],
        "decorators": []
      },
      {
        "name": "test_edge_cases",
        "line": 124,
        "end_line": 182,
        "docstring": "Test edge cases for the overflow management system.",
        "args": [],
        "complexity": 5,
        "calls": [
          "print",
          "print",
          "print",
          "DataFrame",
          "print",
          "iterrows",
          "len",
          "print",
          "create_professional_borehole_log",
          "print",
          "enumerate",
          "print",
          "print",
          "print_exc",
          "print",
          "open",
          "write",
          "len",
          "b64decode"
        ],
        "decorators": []
      }
    ],
    "test_pushdown_extension.py": [
      {
        "name": "test_pushed_down_extension",
        "line": 17,
        "end_line": 93,
        "docstring": "Test that text boxes extend to layer boundaries even when pushed down due to conflicts",
        "args": [],
        "complexity": 5,
        "calls": [
          "DataFrame",
          "print",
          "print",
          "iterrows",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "create_professional_borehole_log",
          "print",
          "print",
          "print",
          "print_exc",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "open",
          "write",
          "print",
          "len",
          "b64decode"
        ],
        "decorators": []
      },
      {
        "name": "test_mixed_scenarios",
        "line": 96,
        "end_line": 152,
        "docstring": "Test a mix of scenarios including very thick layers and very thin layers",
        "args": [],
        "complexity": 4,
        "calls": [
          "DataFrame",
          "print",
          "print",
          "print",
          "print",
          "iterrows",
          "print",
          "create_professional_borehole_log",
          "print",
          "print",
          "print",
          "print",
          "print_exc",
          "open",
          "write",
          "b64decode",
          "len"
        ],
        "decorators": []
      }
    ],
    "test_refactoring_validation.py": [
      {
        "name": "test_state_management_creation",
        "line": 17,
        "end_line": 58,
        "docstring": "Test that state management objects can be created.",
        "args": [],
        "complexity": 1,
        "calls": [
          "BoreholeData",
          "MapState",
          "SelectionState",
          "PlotState",
          "UploadState",
          "get_app_state_manager",
          "isinstance",
          "get_app_state_manager",
          "print",
          "get_borehole_count",
          "len",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "test_callback_base_classes",
        "line": 61,
        "end_line": 98,
        "docstring": "Test that callback base classes can be created and registered.",
        "args": [],
        "complexity": 1,
        "calls": [
          "CallbackManager",
          "MockCallback",
          "MockCallback",
          "add_callback",
          "add_callback",
          "get_callback_summary",
          "get_callback_manager",
          "isinstance",
          "print",
          "len",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "test_error_handling_system",
        "line": 101,
        "end_line": 139,
        "docstring": "Test that the error handling system works correctly.",
        "args": [],
        "complexity": 1,
        "calls": [
          "get_error_handler",
          "isinstance",
          "create_error",
          "isinstance",
          "get_error_history",
          "get_user_friendly_message",
          "print",
          "len",
          "lower"
        ],
        "decorators": []
      },
      {
        "name": "test_callback_imports",
        "line": 142,
        "end_line": 171,
        "docstring": "Test that all refactored callbacks can be imported.",
        "args": [],
        "complexity": 1,
        "calls": [
          "FileUploadCallback",
          "MapInteractionCallback",
          "get_callback_manager",
          "len",
          "register_file_upload_callbacks",
          "register_map_interaction_callbacks",
          "print",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "test_state_update_integration",
        "line": 174,
        "end_line": 224,
        "docstring": "Test that state updates work correctly across the system.",
        "args": [],
        "complexity": 1,
        "calls": [
          "get_app_state_manager",
          "DataFrame",
          "update_borehole_data",
          "update_selection_state",
          "update_map_state",
          "to_dash_store_format",
          "print",
          "get_borehole_count",
          "len",
          "len",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "test_coordinate_service_integration",
        "line": 227,
        "end_line": 249,
        "docstring": "Test that the coordinate service is properly integrated.",
        "args": [],
        "complexity": 1,
        "calls": [
          "get_coordinate_service",
          "transform_bng_to_wgs84",
          "isinstance",
          "isinstance",
          "transform_bng_to_wgs84",
          "print",
          "len",
          "len",
          "len",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "run_all_tests",
        "line": 252,
        "end_line": 290,
        "docstring": "Run all tests and report results.",
        "args": [],
        "complexity": 4,
        "calls": [
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "test",
          "print",
          "print_exc"
        ],
        "decorators": []
      },
      {
        "name": "__init__",
        "line": 75,
        "end_line": 77,
        "docstring": null,
        "args": [
          "self",
          "name",
          "category"
        ],
        "complexity": 1,
        "calls": [],
        "decorators": []
      },
      {
        "name": "register",
        "line": 79,
        "end_line": 80,
        "docstring": null,
        "args": [
          "self",
          "app"
        ],
        "complexity": 1,
        "calls": [],
        "decorators": []
      }
    ],
    "test_short_text_alignment.py": [],
    "test_text_boxes.py": [
      {
        "name": "test_text_box_implementation",
        "line": 15,
        "end_line": 65,
        "docstring": "Test the new text box implementation with sample data",
        "args": [],
        "complexity": 4,
        "calls": [
          "DataFrame",
          "print",
          "create_professional_borehole_log",
          "print",
          "print",
          "print",
          "print_exc",
          "len",
          "b64decode",
          "print",
          "open",
          "write",
          "len"
        ],
        "decorators": []
      }
    ],
    "test_text_box_extension.py": [
      {
        "name": "test_text_box_extension",
        "line": 16,
        "end_line": 86,
        "docstring": "Test that text boxes extend to match layer boundaries when descriptions are short",
        "args": [],
        "complexity": 5,
        "calls": [
          "DataFrame",
          "print",
          "print",
          "iterrows",
          "print",
          "create_professional_borehole_log",
          "print",
          "print",
          "print",
          "print_exc",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "open",
          "write",
          "print",
          "len",
          "b64decode"
        ],
        "decorators": []
      }
    ],
    "test_verification.py": [
      {
        "name": "test_simple_verification",
        "line": 15,
        "end_line": 61,
        "docstring": "Test with very simple, obvious layer names",
        "args": [],
        "complexity": 3,
        "calls": [
          "DataFrame",
          "print",
          "create_professional_borehole_log",
          "print",
          "b64decode",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print",
          "print_exc",
          "open",
          "write",
          "len"
        ],
        "decorators": []
      }
    ],
    "utils.py": [],
    "callbacks\\base.py": [
      {
        "name": "__init__",
        "line": 15,
        "end_line": 18,
        "docstring": null,
        "args": [
          "self",
          "name",
          "category"
        ],
        "complexity": 2,
        "calls": [
          "getLogger",
          "lower"
        ],
        "decorators": []
      },
      {
        "name": "register",
        "line": 21,
        "end_line": 23,
        "docstring": "Register this callback with the Dash app.",
        "args": [
          "self",
          "app"
        ],
        "complexity": 1,
        "calls": [],
        "decorators": [
          "abstractmethod"
        ]
      },
      {
        "name": "__init__",
        "line": 29,
        "end_line": 30,
        "docstring": null,
        "args": [
          "self",
          "name"
        ],
        "complexity": 1,
        "calls": [
          "__init__",
          "super"
        ],
        "decorators": []
      },
      {
        "name": "__init__",
        "line": 36,
        "end_line": 37,
        "docstring": null,
        "args": [
          "self",
          "name"
        ],
        "complexity": 1,
        "calls": [
          "__init__",
          "super"
        ],
        "decorators": []
      },
      {
        "name": "__init__",
        "line": 43,
        "end_line": 44,
        "docstring": null,
        "args": [
          "self",
          "name"
        ],
        "complexity": 1,
        "calls": [
          "__init__",
          "super"
        ],
        "decorators": []
      },
      {
        "name": "__init__",
        "line": 50,
        "end_line": 51,
        "docstring": null,
        "args": [
          "self",
          "name"
        ],
        "complexity": 1,
        "calls": [
          "__init__",
          "super"
        ],
        "decorators": []
      },
      {
        "name": "__init__",
        "line": 57,
        "end_line": 58,
        "docstring": null,
        "args": [
          "self",
          "name"
        ],
        "complexity": 1,
        "calls": [
          "__init__",
          "super"
        ],
        "decorators": []
      }
    ],
    "callbacks\\file_upload.py": [
      {
        "name": "register_file_upload_callbacks",
        "line": 507,
        "end_line": 511,
        "docstring": "Register all file upload related callbacks.",
        "args": [
          "callback_manager"
        ],
        "complexity": 1,
        "calls": [
          "add_callback",
          "info",
          "FileUploadCallback"
        ],
        "decorators": []
      },
      {
        "name": "__init__",
        "line": 30,
        "end_line": 31,
        "docstring": null,
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "__init__",
          "super"
        ],
        "decorators": []
      },
      {
        "name": "register",
        "line": 33,
        "end_line": 77,
        "docstring": "Register the file upload callback.",
        "args": [
          "self",
          "app"
        ],
        "complexity": 6,
        "calls": [
          "callback",
          "log_callback_start",
          "_process_upload",
          "log_callback_end",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "Input",
          "State",
          "State",
          "info",
          "error",
          "handle_error",
          "len",
          "get"
        ],
        "decorators": []
      },
      {
        "name": "_process_upload",
        "line": 79,
        "end_line": 153,
        "docstring": "Process the uploaded files and return results.",
        "args": [
          "self",
          "stored_data",
          "map_center",
          "map_zoom"
        ],
        "complexity": 6,
        "calls": [
          "info",
          "zip",
          "_validate_total_upload_size",
          "_process_files",
          "_add_upload_summary",
          "load_all_loca_data",
          "info",
          "_create_markers",
          "_update_app_state",
          "_add_file_breakdown",
          "timestamp",
          "split",
          "append",
          "warning",
          "_create_error_message",
          "_create_error_message",
          "_calculate_optimal_view",
          "to_dict",
          "tolist",
          "now",
          "len",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "_validate_total_upload_size",
        "line": 155,
        "end_line": 178,
        "docstring": "Validate total upload size.",
        "args": [
          "self",
          "files"
        ],
        "complexity": 4,
        "calls": [
          "len",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "_validate_file_size",
        "line": 180,
        "end_line": 195,
        "docstring": "Validate individual file size.",
        "args": [
          "self",
          "content_string",
          "name"
        ],
        "complexity": 2,
        "calls": [
          "len"
        ],
        "decorators": []
      },
      {
        "name": "_process_files",
        "line": 197,
        "end_line": 262,
        "docstring": "Process individual uploaded files.",
        "args": [
          "self",
          "list_of_contents",
          "list_of_names"
        ],
        "complexity": 5,
        "calls": [
          "zip",
          "split",
          "_validate_file_size",
          "b64decode",
          "decode",
          "append",
          "append",
          "info",
          "warning",
          "append",
          "Div",
          "error",
          "append",
          "Div",
          "Div",
          "Span",
          "Span",
          "Span",
          "Span",
          "Span",
          "Span"
        ],
        "decorators": []
      },
      {
        "name": "_create_markers",
        "line": 264,
        "end_line": 364,
        "docstring": "Create map markers from borehole data.",
        "args": [
          "self",
          "loca_df"
        ],
        "complexity": 9,
        "calls": [
          "get_coordinate_service",
          "copy",
          "copy",
          "iterrows",
          "concat",
          "iterrows",
          "info",
          "apply",
          "apply",
          "transform_bng_to_wgs84",
          "copy",
          "get",
          "get",
          "strip",
          "_format_depth_value",
          "_format_depth_value",
          "append",
          "append",
          "astype",
          "astype",
          "float",
          "float",
          "transform_bng_to_wgs84",
          "isna",
          "isna",
          "get",
          "get",
          "Marker",
          "warning",
          "str",
          "len",
          "notnull",
          "isdigit",
          "notnull",
          "isdigit",
          "Tooltip",
          "strip",
          "replace",
          "replace",
          "replace",
          "replace",
          "str",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "_calculate_optimal_view",
        "line": 366,
        "end_line": 397,
        "docstring": "Calculate optimal map center and zoom from coordinates.",
        "args": [
          "self",
          "coordinates"
        ],
        "complexity": 6,
        "calls": [
          "median",
          "median",
          "max",
          "info",
          "max",
          "min",
          "max",
          "min"
        ],
        "decorators": []
      },
      {
        "name": "_update_app_state",
        "line": 399,
        "end_line": 419,
        "docstring": "Update the centralized application state.",
        "args": [
          "self",
          "loca_df",
          "filename_map"
        ],
        "complexity": 2,
        "calls": [
          "get_app_state_manager",
          "update_borehole_data",
          "update_upload_state",
          "debug",
          "tolist",
          "list",
          "keys",
          "sum",
          "len",
          "values"
        ],
        "decorators": []
      },
      {
        "name": "_format_depth_value",
        "line": 421,
        "end_line": 430,
        "docstring": "Format depth values for display.",
        "args": [
          "self",
          "value"
        ],
        "complexity": 5,
        "calls": [
          "strip",
          "float",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "_add_upload_summary",
        "line": 432,
        "end_line": 458,
        "docstring": "Add upload summary to file status.",
        "args": [
          "self",
          "file_status",
          "ags_files",
          "all_files",
          "total_size"
        ],
        "complexity": 1,
        "calls": [
          "Div",
          "insert",
          "P",
          "P",
          "P",
          "len",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "_add_file_breakdown",
        "line": 460,
        "end_line": 485,
        "docstring": "Add file breakdown information.",
        "args": [
          "self",
          "file_status",
          "filename_map",
          "loca_df"
        ],
        "complexity": 4,
        "calls": [
          "keys",
          "append",
          "len",
          "append",
          "Div",
          "Li",
          "H4",
          "Ul",
          "B",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "_create_error_message",
        "line": 487,
        "end_line": 504,
        "docstring": "Create standardized error message.",
        "args": [
          "self",
          "message",
          "severity"
        ],
        "complexity": 2,
        "calls": [
          "get_error_handler",
          "create_error",
          "_create_error_component"
        ],
        "decorators": []
      },
      {
        "name": "handle_file_upload",
        "line": 49,
        "end_line": 77,
        "docstring": "Handle file upload and create markers.",
        "args": [
          "stored_data",
          "map_center_state",
          "map_zoom_state"
        ],
        "complexity": 6,
        "calls": [
          "callback",
          "log_callback_start",
          "_process_upload",
          "log_callback_end",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "Input",
          "State",
          "State",
          "info",
          "error",
          "handle_error",
          "len",
          "get"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5C9A990>"
        ]
      }
    ],
    "callbacks\\map_interactions.py": [
      {
        "name": "register_map_interaction_callbacks",
        "line": 667,
        "end_line": 671,
        "docstring": "Register all map interaction related callbacks.",
        "args": [
          "callback_manager"
        ],
        "complexity": 1,
        "calls": [
          "add_callback",
          "info",
          "MapInteractionCallback"
        ],
        "decorators": []
      },
      {
        "name": "__init__",
        "line": 39,
        "end_line": 40,
        "docstring": null,
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "__init__",
          "super"
        ],
        "decorators": []
      },
      {
        "name": "register",
        "line": 42,
        "end_line": 122,
        "docstring": "Register the map interaction callback.",
        "args": [
          "self",
          "app"
        ],
        "complexity": 6,
        "calls": [
          "callback",
          "log_callback_start",
          "_is_drawing_trigger",
          "log_callback_end",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "Input",
          "Input",
          "Input",
          "State",
          "State",
          "State",
          "warning",
          "_empty_response",
          "_handle_shape_drawing",
          "_is_checkbox_trigger",
          "error",
          "handle_error",
          "_get_trigger",
          "bool",
          "_handle_checkbox_selection",
          "_is_buffer_trigger",
          "len",
          "_handle_buffer_update",
          "_empty_response"
        ],
        "decorators": []
      },
      {
        "name": "_get_trigger",
        "line": 124,
        "end_line": 129,
        "docstring": "Get the name of the triggered input.",
        "args": [
          "self"
        ],
        "complexity": 2,
        "calls": [],
        "decorators": []
      },
      {
        "name": "_is_drawing_trigger",
        "line": 131,
        "end_line": 137,
        "docstring": "Check if this is a drawing trigger.",
        "args": [
          "self",
          "triggered",
          "drawn_geojson"
        ],
        "complexity": 4,
        "calls": [
          "get"
        ],
        "decorators": []
      },
      {
        "name": "_is_checkbox_trigger",
        "line": 139,
        "end_line": 141,
        "docstring": "Check if this is a checkbox trigger.",
        "args": [
          "self",
          "triggered",
          "checked_ids"
        ],
        "complexity": 3,
        "calls": [],
        "decorators": []
      },
      {
        "name": "_is_buffer_trigger",
        "line": 143,
        "end_line": 151,
        "docstring": "Check if this is a buffer update trigger.",
        "args": [
          "self",
          "triggered",
          "clicks",
          "stored_data"
        ],
        "complexity": 4,
        "calls": [
          "get"
        ],
        "decorators": []
      },
      {
        "name": "_empty_response",
        "line": 153,
        "end_line": 164,
        "docstring": "Return empty response when no action is needed.",
        "args": [
          "self",
          "stored_data"
        ],
        "complexity": 1,
        "calls": [],
        "decorators": []
      },
      {
        "name": "_handle_shape_drawing",
        "line": 166,
        "end_line": 199,
        "docstring": "Handle shape drawing and borehole selection.",
        "args": [
          "self",
          "drawn_geojson",
          "stored_borehole_data",
          "marker_children",
          "buffer_value"
        ],
        "complexity": 3,
        "calls": [
          "info",
          "DataFrame",
          "get",
          "get",
          "info",
          "Div",
          "_error_response",
          "_handle_polyline_selection",
          "_handle_polygon_selection",
          "get"
        ],
        "decorators": []
      },
      {
        "name": "_handle_polyline_selection",
        "line": 201,
        "end_line": 270,
        "docstring": "Handle polyline selection with buffer.",
        "args": [
          "self",
          "feature",
          "loca_df",
          "stored_data",
          "buffer_value"
        ],
        "complexity": 6,
        "calls": [
          "info",
          "project_boreholes_to_polyline",
          "create_polyline_section",
          "create_buffer_visualization",
          "isinstance",
          "dict",
          "update",
          "get_app_state_manager",
          "update_selection_state",
          "_success_response",
          "get",
          "tolist",
          "extend",
          "append",
          "append",
          "len",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "_handle_polygon_selection",
        "line": 272,
        "end_line": 324,
        "docstring": "Handle polygon/rectangle selection.",
        "args": [
          "self",
          "feature",
          "loca_df",
          "stored_data"
        ],
        "complexity": 5,
        "calls": [
          "filter_selection_by_shape",
          "dict",
          "update",
          "get_app_state_manager",
          "update_selection_state",
          "_success_response",
          "isinstance",
          "tolist",
          "isinstance",
          "len",
          "_calculate_pca_line",
          "isin",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "_handle_checkbox_selection",
        "line": 326,
        "end_line": 381,
        "docstring": "Handle checkbox selection changes.",
        "args": [
          "self",
          "checked_ids",
          "stored_data"
        ],
        "complexity": 5,
        "calls": [
          "info",
          "DataFrame",
          "get",
          "get",
          "get_app_state_manager",
          "update_selection_state",
          "_success_response",
          "isin",
          "get",
          "create_polyline_section",
          "create_buffer_visualization",
          "isinstance",
          "_calculate_pca_line",
          "extend",
          "append",
          "append",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "_handle_buffer_update",
        "line": 383,
        "end_line": 429,
        "docstring": "Handle buffer distance update.",
        "args": [
          "self",
          "stored_data",
          "buffer_value"
        ],
        "complexity": 4,
        "calls": [
          "info",
          "DataFrame",
          "project_boreholes_to_polyline",
          "create_polyline_section",
          "create_buffer_visualization",
          "isinstance",
          "dict",
          "update",
          "_success_response",
          "tolist",
          "extend",
          "append",
          "append",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "_calculate_pca_line",
        "line": 431,
        "end_line": 478,
        "docstring": "Calculate and create PCA line for display.",
        "args": [
          "self",
          "filtered_df"
        ],
        "complexity": 3,
        "calls": [
          "len",
          "info",
          "info",
          "PCA",
          "fit_transform",
          "mean",
          "get_coordinate_service",
          "transform_bng_to_wgs84",
          "transform_bng_to_wgs84",
          "max",
          "min",
          "Polyline",
          "error",
          "len",
          "Tooltip"
        ],
        "decorators": []
      },
      {
        "name": "_create_checkbox_grid",
        "line": 480,
        "end_line": 506,
        "docstring": "Create checkbox grid for borehole selection.",
        "args": [
          "self",
          "borehole_ids",
          "current_checked"
        ],
        "complexity": 3,
        "calls": [
          "Div",
          "P",
          "Checklist"
        ],
        "decorators": []
      },
      {
        "name": "_update_marker_colors",
        "line": 508,
        "end_line": 542,
        "docstring": "Update marker colors based on selection using lazy loading.",
        "args": [
          "self",
          "stored_data",
          "selected_ids"
        ],
        "complexity": 3,
        "calls": [
          "DataFrame",
          "get_lazy_marker_manager",
          "get_visible_markers",
          "info",
          "len",
          "error",
          "_update_marker_colors_fallback",
          "len",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "_update_marker_colors_fallback",
        "line": 544,
        "end_line": 601,
        "docstring": "Fallback marker update method (original implementation).",
        "args": [
          "self",
          "stored_data",
          "selected_ids"
        ],
        "complexity": 5,
        "calls": [
          "DataFrame",
          "iterrows",
          "get",
          "get",
          "strip",
          "_format_depth_value",
          "_format_depth_value",
          "append",
          "error",
          "isna",
          "isna",
          "get",
          "get",
          "Marker",
          "str",
          "Tooltip",
          "strip"
        ],
        "decorators": []
      },
      {
        "name": "_format_depth_value",
        "line": 603,
        "end_line": 612,
        "docstring": "Format depth values for display.",
        "args": [
          "self",
          "value"
        ],
        "complexity": 5,
        "calls": [
          "strip",
          "float",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "_success_response",
        "line": 614,
        "end_line": 646,
        "docstring": "Create a successful response tuple.",
        "args": [
          "self",
          "line_elements",
          "borehole_ids",
          "updated_data",
          "feedback",
          "buffer_controls_visible",
          "shape_selected_ids"
        ],
        "complexity": 1,
        "calls": [
          "_create_checkbox_grid",
          "_update_marker_colors",
          "Div"
        ],
        "decorators": []
      },
      {
        "name": "_error_response",
        "line": 648,
        "end_line": 664,
        "docstring": "Create an error response tuple.",
        "args": [
          "self",
          "stored_data",
          "error_msg"
        ],
        "complexity": 1,
        "calls": [
          "_update_marker_colors"
        ],
        "decorators": []
      },
      {
        "name": "handle_map_interactions",
        "line": 68,
        "end_line": 122,
        "docstring": "Handle map drawing and selection.",
        "args": [
          "drawn_geojson",
          "checked_ids",
          "update_buffer_clicks",
          "stored_borehole_data",
          "marker_children",
          "buffer_value"
        ],
        "complexity": 6,
        "calls": [
          "callback",
          "log_callback_start",
          "_is_drawing_trigger",
          "log_callback_end",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "Input",
          "Input",
          "Input",
          "State",
          "State",
          "State",
          "warning",
          "_empty_response",
          "_handle_shape_drawing",
          "_is_checkbox_trigger",
          "error",
          "handle_error",
          "_get_trigger",
          "bool",
          "_handle_checkbox_selection",
          "_is_buffer_trigger",
          "len",
          "_handle_buffer_update",
          "_empty_response"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5D1D190>"
        ]
      }
    ],
    "callbacks\\marker_handling.py": [
      {
        "name": "__init__",
        "line": 30,
        "end_line": 38,
        "docstring": null,
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "__init__",
          "getLogger",
          "get_error_handler",
          "get_app_state_manager",
          "super"
        ],
        "decorators": []
      },
      {
        "name": "register",
        "line": 40,
        "end_line": 43,
        "docstring": "Register all marker handling callbacks with the Dash app.",
        "args": [
          "self",
          "app"
        ],
        "complexity": 1,
        "calls": [
          "_register_marker_click_callback",
          "info"
        ],
        "decorators": []
      },
      {
        "name": "_register_marker_click_callback",
        "line": 45,
        "end_line": 83,
        "docstring": "Register callback to handle marker clicks.",
        "args": [
          "self",
          "app"
        ],
        "complexity": 2,
        "calls": [
          "callback",
          "_handle_marker_click_logic",
          "Output",
          "Output",
          "Input",
          "State",
          "State",
          "State",
          "error",
          "handle_error",
          "Div",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "_handle_marker_click_logic",
        "line": 85,
        "end_line": 132,
        "docstring": "Core logic for handling marker clicks.",
        "args": [
          "self",
          "marker_clicks",
          "stored_borehole_data",
          "current_markers",
          "show_labels_value"
        ],
        "complexity": 8,
        "calls": [
          "info",
          "info",
          "info",
          "_find_clicked_marker_index",
          "info",
          "DataFrame",
          "info",
          "_generate_borehole_log_display",
          "_update_marker_colors",
          "all",
          "info",
          "info",
          "warning",
          "len",
          "warning",
          "Div",
          "Div"
        ],
        "decorators": []
      },
      {
        "name": "_find_clicked_marker_index",
        "line": 134,
        "end_line": 144,
        "docstring": "Find which marker was clicked based on click counts.",
        "args": [
          "self",
          "marker_clicks"
        ],
        "complexity": 4,
        "calls": [
          "enumerate"
        ],
        "decorators": []
      },
      {
        "name": "_generate_borehole_log_display",
        "line": 146,
        "end_line": 185,
        "docstring": "Generate the borehole log display for the selected borehole.",
        "args": [
          "self",
          "stored_borehole_data",
          "borehole_id",
          "show_labels_value"
        ],
        "complexity": 6,
        "calls": [
          "items",
          "info",
          "plot_borehole_log_from_ags_content",
          "_create_borehole_log_html",
          "Div",
          "error",
          "Div",
          "len",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "_create_borehole_log_html",
        "line": 187,
        "end_line": 242,
        "docstring": "Create HTML display for borehole log images.",
        "args": [
          "self",
          "borehole_id",
          "images"
        ],
        "complexity": 3,
        "calls": [
          "enumerate",
          "Div",
          "append",
          "append",
          "Img",
          "H3",
          "P",
          "Div",
          "len",
          "H4",
          "len",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "_update_marker_colors",
        "line": 244,
        "end_line": 274,
        "docstring": "Update marker colors - make clicked marker green, others blue.",
        "args": [
          "self",
          "current_markers",
          "clicked_index"
        ],
        "complexity": 8,
        "calls": [
          "enumerate",
          "get",
          "copy",
          "copy",
          "append",
          "append",
          "copy",
          "copy"
        ],
        "decorators": []
      },
      {
        "name": "create_selection_shape_visual",
        "line": 276,
        "end_line": 325,
        "docstring": "Create a visual representation of a drawn selection shape for display.",
        "args": [
          "self",
          "feature"
        ],
        "complexity": 13,
        "calls": [
          "get",
          "get",
          "error",
          "len",
          "Polygon",
          "len",
          "Polygon",
          "Tooltip",
          "Tooltip"
        ],
        "decorators": []
      },
      {
        "name": "marker_click_handler",
        "line": 66,
        "end_line": 83,
        "docstring": "Handle marker clicks to generate borehole logs",
        "args": [
          "marker_clicks",
          "stored_borehole_data",
          "current_markers",
          "show_labels_value"
        ],
        "complexity": 2,
        "calls": [
          "callback",
          "_handle_marker_click_logic",
          "Output",
          "Output",
          "Input",
          "State",
          "State",
          "State",
          "error",
          "handle_error",
          "Div",
          "str"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5CE0D50>"
        ]
      }
    ],
    "callbacks\\plot_generation.py": [
      {
        "name": "__init__",
        "line": 35,
        "end_line": 40,
        "docstring": null,
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "__init__",
          "getLogger",
          "get_error_handler",
          "get_app_state_manager",
          "get_coordinate_service",
          "super"
        ],
        "decorators": []
      },
      {
        "name": "register",
        "line": 42,
        "end_line": 47,
        "docstring": "Register all plot generation callbacks with the Dash app.",
        "args": [
          "self",
          "app"
        ],
        "complexity": 1,
        "calls": [
          "_register_plot_generation_callback",
          "_register_shape_clearing_callback",
          "_register_map_update_clientside_callback",
          "info"
        ],
        "decorators": []
      },
      {
        "name": "_register_plot_generation_callback",
        "line": 49,
        "end_line": 88,
        "docstring": "Register the main plot generation callback.",
        "args": [
          "self",
          "app"
        ],
        "complexity": 2,
        "calls": [
          "callback",
          "info",
          "info",
          "_handle_plot_generation_logic",
          "Output",
          "Output",
          "Output",
          "Input",
          "Input",
          "Input",
          "State",
          "error",
          "handle_error",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "_handle_plot_generation_logic",
        "line": 90,
        "end_line": 129,
        "docstring": "Core logic for plot generation.",
        "args": [
          "self",
          "checked_ids",
          "show_labels_value",
          "download_clicks",
          "stored_borehole_data"
        ],
        "complexity": 7,
        "calls": [
          "items",
          "_process_polyline_data",
          "plot_section_from_ags_content",
          "_process_plot_figure",
          "error",
          "handle_error"
        ],
        "decorators": []
      },
      {
        "name": "_process_polyline_data",
        "line": 131,
        "end_line": 175,
        "docstring": "Process polyline data for section generation.",
        "args": [
          "self",
          "stored_borehole_data"
        ],
        "complexity": 6,
        "calls": [
          "LineString",
          "zip",
          "transform_wgs84_to_utm",
          "list",
          "info",
          "info",
          "info",
          "zip",
          "error",
          "info",
          "len",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "_process_plot_figure",
        "line": 177,
        "end_line": 214,
        "docstring": "Process the matplotlib figure into display and download formats.",
        "args": [
          "self",
          "fig",
          "triggered",
          "download_clicks"
        ],
        "complexity": 3,
        "calls": [
          "BytesIO",
          "savefig",
          "seek",
          "read",
          "decode",
          "Img",
          "close",
          "send_bytes",
          "b64encode"
        ],
        "decorators": []
      },
      {
        "name": "_register_shape_clearing_callback",
        "line": 216,
        "end_line": 232,
        "docstring": "Register callback to explicitly clear shapes.",
        "args": [
          "self",
          "app"
        ],
        "complexity": 4,
        "calls": [
          "callback",
          "Output",
          "Input",
          "get",
          "info",
          "timestamp",
          "len",
          "get",
          "now",
          "len",
          "get"
        ],
        "decorators": []
      },
      {
        "name": "_register_map_update_clientside_callback",
        "line": 234,
        "end_line": 269,
        "docstring": "Register client-side callback for map updates on initial load.",
        "args": [
          "self",
          "app"
        ],
        "complexity": 1,
        "calls": [
          "clientside_callback",
          "Output",
          "Input"
        ],
        "decorators": []
      },
      {
        "name": "handle_plot_generation",
        "line": 68,
        "end_line": 88,
        "docstring": "Handle plot generation and downloads",
        "args": [
          "checked_ids",
          "show_labels_value",
          "download_clicks",
          "stored_borehole_data"
        ],
        "complexity": 2,
        "calls": [
          "callback",
          "info",
          "info",
          "_handle_plot_generation_logic",
          "Output",
          "Output",
          "Output",
          "Input",
          "Input",
          "Input",
          "State",
          "error",
          "handle_error",
          "str"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5C2B290>"
        ]
      },
      {
        "name": "clear_all_shapes",
        "line": 224,
        "end_line": 232,
        "docstring": "Force clearing all shapes when a new shape is drawn",
        "args": [
          "geojson"
        ],
        "complexity": 4,
        "calls": [
          "callback",
          "Output",
          "Input",
          "get",
          "info",
          "timestamp",
          "len",
          "get",
          "now",
          "len",
          "get"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5C9EF90>"
        ]
      }
    ],
    "callbacks\\search_functionality.py": [
      {
        "name": "__init__",
        "line": 29,
        "end_line": 34,
        "docstring": null,
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "__init__",
          "getLogger",
          "get_error_handler",
          "get_app_state_manager",
          "get_coordinate_service",
          "super"
        ],
        "decorators": []
      },
      {
        "name": "register",
        "line": 36,
        "end_line": 41,
        "docstring": "Register all search-related callbacks with the Dash app.",
        "args": [
          "self",
          "app"
        ],
        "complexity": 1,
        "calls": [
          "_register_search_dropdown_callback",
          "_register_search_button_toggle_callback",
          "_register_search_go_callback",
          "info"
        ],
        "decorators": []
      },
      {
        "name": "_register_search_dropdown_callback",
        "line": 43,
        "end_line": 64,
        "docstring": "Register callback to update search dropdown options.",
        "args": [
          "self",
          "app"
        ],
        "complexity": 2,
        "calls": [
          "callback",
          "info",
          "Output",
          "Output",
          "Input",
          "_update_search_dropdown_logic",
          "error",
          "handle_error",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "_update_search_dropdown_logic",
        "line": 66,
        "end_line": 123,
        "docstring": "Core logic for updating search dropdown.",
        "args": [
          "self",
          "stored_borehole_data"
        ],
        "complexity": 12,
        "calls": [
          "DataFrame",
          "iterrows",
          "sort",
          "info",
          "info",
          "info",
          "strip",
          "get",
          "get",
          "append",
          "strip",
          "strip",
          "str",
          "float",
          "append",
          "float",
          "append",
          "lower",
          "len",
          "str",
          "str",
          "join"
        ],
        "decorators": []
      },
      {
        "name": "_register_search_button_toggle_callback",
        "line": 125,
        "end_line": 138,
        "docstring": "Register callback to toggle search button state.",
        "args": [
          "self",
          "app"
        ],
        "complexity": 2,
        "calls": [
          "callback",
          "Output",
          "Output",
          "Input"
        ],
        "decorators": []
      },
      {
        "name": "_register_search_go_callback",
        "line": 140,
        "end_line": 198,
        "docstring": "Register the main search go functionality callback.",
        "args": [
          "self",
          "app"
        ],
        "complexity": 4,
        "calls": [
          "callback",
          "info",
          "Input",
          "_handle_search_go_logic",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "State",
          "State",
          "State",
          "State",
          "error",
          "handle_error",
          "Div",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "_handle_search_go_logic",
        "line": 200,
        "end_line": 283,
        "docstring": "Core logic for handling search go functionality.",
        "args": [
          "self",
          "selected_borehole_index",
          "stored_borehole_data",
          "show_labels_value",
          "current_markers"
        ],
        "complexity": 7,
        "calls": [
          "DataFrame",
          "strip",
          "info",
          "get",
          "get",
          "Div",
          "Div",
          "len",
          "Div",
          "isna",
          "isna",
          "Div",
          "transform_bng_to_wgs84",
          "info",
          "_generate_borehole_log",
          "Div",
          "info",
          "str",
          "error",
          "Div",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "_generate_borehole_log",
        "line": 285,
        "end_line": 329,
        "docstring": "Generate borehole log for the selected borehole.",
        "args": [
          "self",
          "stored_borehole_data",
          "borehole_id",
          "show_labels_value"
        ],
        "complexity": 6,
        "calls": [
          "items",
          "plot_borehole_log_from_ags_content",
          "Img",
          "Div",
          "error",
          "Div",
          "len",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "update_search_dropdown",
        "line": 52,
        "end_line": 64,
        "docstring": "Update search dropdown options when borehole data is loaded",
        "args": [
          "stored_borehole_data"
        ],
        "complexity": 2,
        "calls": [
          "callback",
          "info",
          "Output",
          "Output",
          "Input",
          "_update_search_dropdown_logic",
          "error",
          "handle_error",
          "str"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5CE0C10>"
        ]
      },
      {
        "name": "toggle_search_button",
        "line": 133,
        "end_line": 138,
        "docstring": "Enable/disable the search button based on dropdown selection",
        "args": [
          "selected_value"
        ],
        "complexity": 2,
        "calls": [
          "callback",
          "Output",
          "Output",
          "Input"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5BBDB10>"
        ]
      },
      {
        "name": "handle_search_go",
        "line": 161,
        "end_line": 198,
        "docstring": "Handle the 'Go to Borehole' button click",
        "args": [
          "n_clicks",
          "selected_borehole_index",
          "stored_borehole_data",
          "show_labels_value",
          "current_markers"
        ],
        "complexity": 4,
        "calls": [
          "callback",
          "info",
          "Input",
          "_handle_search_go_logic",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "Output",
          "State",
          "State",
          "State",
          "State",
          "error",
          "handle_error",
          "Div",
          "str"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A56A2A90>"
        ]
      }
    ],
    "callbacks\\__init__.py": [
      {
        "name": "get_callback_manager",
        "line": 78,
        "end_line": 84,
        "docstring": "Get the global callback manager instance.",
        "args": [],
        "complexity": 2,
        "calls": [
          "CallbackManager",
          "info"
        ],
        "decorators": []
      },
      {
        "name": "register_all_callbacks",
        "line": 87,
        "end_line": 117,
        "docstring": "Convenience function to register all application callbacks.\n\nThis function creates instances of all callback classes and registers\nthem with the provided Dash app instance.",
        "args": [
          "app"
        ],
        "complexity": 2,
        "calls": [
          "get_callback_manager",
          "register_all",
          "get_callback_summary",
          "info",
          "FileUploadCallback",
          "MapInteractionCallback",
          "PlotGenerationCallback",
          "SearchFunctionalityCallback",
          "MarkerHandlingCallback",
          "add_callback",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "__init__",
        "line": 40,
        "end_line": 42,
        "docstring": null,
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "getLogger"
        ],
        "decorators": []
      },
      {
        "name": "add_callback",
        "line": 44,
        "end_line": 47,
        "docstring": "Add a callback to the manager.",
        "args": [
          "self",
          "callback"
        ],
        "complexity": 1,
        "calls": [
          "append",
          "debug"
        ],
        "decorators": []
      },
      {
        "name": "register_all",
        "line": 49,
        "end_line": 57,
        "docstring": "Register all callbacks with the Dash app.",
        "args": [
          "self",
          "app"
        ],
        "complexity": 3,
        "calls": [
          "register",
          "info",
          "error"
        ],
        "decorators": []
      },
      {
        "name": "get_callback_summary",
        "line": 59,
        "end_line": 71,
        "docstring": "Get a summary of registered callbacks.",
        "args": [
          "self"
        ],
        "complexity": 4,
        "calls": [
          "append",
          "len"
        ],
        "decorators": []
      }
    ],
    "old_streamlit_files\\app.py": [
      {
        "name": "setup_bh_circle_event_bridge",
        "line": 5,
        "end_line": 64,
        "docstring": null,
        "args": [
          "loca_df"
        ],
        "complexity": 6,
        "calls": [
          "html",
          "text_input",
          "loads",
          "filter_selection_by_shape",
          "len",
          "sqrt",
          "idxmin"
        ],
        "decorators": []
      },
      {
        "name": "load_all_loca_data_cached",
        "line": 99,
        "end_line": 100,
        "docstring": null,
        "args": [
          "ags_files"
        ],
        "complexity": 1,
        "calls": [
          "cache_data",
          "load_all_loca_data"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5CB4890>"
        ]
      },
      {
        "name": "transform_loca_df",
        "line": 104,
        "end_line": 113,
        "docstring": null,
        "args": [
          "loca_df"
        ],
        "complexity": 1,
        "calls": [
          "cache_data",
          "from_crs",
          "copy",
          "apply",
          "Series",
          "transform"
        ],
        "decorators": [
          "<ast.Call object at 0x00000244A5CB5390>"
        ]
      },
      {
        "name": "get_selection_hash",
        "line": 144,
        "end_line": 148,
        "docstring": null,
        "args": [
          "selected"
        ],
        "complexity": 3,
        "calls": [
          "hash",
          "tuple",
          "tolist"
        ],
        "decorators": []
      }
    ],
    "old_streamlit_files\\borehole_log.py": [
      {
        "name": "render_borehole_log",
        "line": 7,
        "end_line": 183,
        "docstring": "Display a simple borehole log for the selected LOCA_ID.",
        "args": [
          "loca_id",
          "filename_map",
          "ags_files",
          "show_labels",
          "fig_height",
          "fig_width"
        ],
        "complexity": 28,
        "calls": [
          "join",
          "parse_ags_geol_section",
          "subheader",
          "get",
          "copy",
          "subplots",
          "subplots_adjust",
          "unique",
          "reset_index",
          "set",
          "iterrows",
          "plot",
          "set_xlim",
          "max",
          "min",
          "set_ylim",
          "set_xlabel",
          "set_ylabel",
          "set_xticks",
          "get_legend_handles_labels",
          "tight_layout",
          "columns",
          "items",
          "warning",
          "gettempdir",
          "open",
          "write",
          "warning",
          "toast",
          "float",
          "abs",
          "abs",
          "tab20",
          "get",
          "max",
          "min",
          "legend",
          "pyplot",
          "enumerate",
          "locals",
          "sort_values",
          "abs",
          "abs",
          "fill_betweenx",
          "add",
          "fill_betweenx",
          "add",
          "abs",
          "abs",
          "text",
          "apply",
          "apply",
          "str",
          "str",
          "get",
          "abs",
          "abs",
          "text",
          "get",
          "str",
          "abs",
          "abs"
        ],
        "decorators": []
      }
    ],
    "old_streamlit_files\\borehole_selection.py": [
      {
        "name": "render_checkbox_grid",
        "line": 4,
        "end_line": 18,
        "docstring": null,
        "args": [
          "selected"
        ],
        "complexity": 5,
        "calls": [
          "tolist",
          "range",
          "columns",
          "range",
          "len",
          "len",
          "checkbox",
          "append"
        ],
        "decorators": []
      }
    ],
    "old_streamlit_files\\config.py": [],
    "old_streamlit_files\\data_loader.py": [
      {
        "name": "parse_group",
        "line": 7,
        "end_line": 31,
        "docstring": null,
        "args": [
          "content",
          "group_name"
        ],
        "complexity": 17,
        "calls": [
          "splitlines",
          "list",
          "DataFrame",
          "reader",
          "append",
          "len",
          "len",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "load_all_loca_data",
        "line": 34,
        "end_line": 56,
        "docstring": null,
        "args": [
          "ags_files"
        ],
        "complexity": 4,
        "calls": [
          "set",
          "parse_group",
          "dropna",
          "apply",
          "update",
          "append",
          "concat",
          "tolist",
          "to_numeric",
          "splitext"
        ],
        "decorators": []
      }
    ],
    "old_streamlit_files\\map_render.py": [
      {
        "name": "render_map",
        "line": 8,
        "end_line": 187,
        "docstring": null,
        "args": [
          "loca_df",
          "transformer",
          "selected_boreholes"
        ],
        "complexity": 29,
        "calls": [
          "get",
          "get",
          "Map",
          "add_to",
          "add_to",
          "iterrows",
          "Draw",
          "add_to",
          "add_to",
          "get",
          "get",
          "Popup",
          "add_to",
          "get",
          "get",
          "DataFrame",
          "median",
          "median",
          "TileLayer",
          "TileLayer",
          "LayerControl",
          "add_to",
          "get",
          "any",
          "get",
          "get",
          "get",
          "get",
          "Marker",
          "add_to",
          "Polygon",
          "add_to",
          "get",
          "any",
          "len",
          "PCA",
          "fit_transform",
          "copy",
          "sort_values",
          "get",
          "get",
          "add_to",
          "Icon",
          "Polygon",
          "median",
          "median",
          "LineString",
          "shapely_transform",
          "buffer",
          "shapely_transform",
          "add_to",
          "mean",
          "median",
          "transform",
          "transform",
          "PolyLine",
          "int",
          "from_crs",
          "from_crs",
          "print",
          "isnull",
          "sum",
          "PolyLine",
          "GeoJson",
          "range",
          "len"
        ],
        "decorators": []
      }
    ],
    "old_streamlit_files\\map_utils.py": [
      {
        "name": "filter_selection_by_shape",
        "line": 7,
        "end_line": 49,
        "docstring": null,
        "args": [
          "geom",
          "loca_df"
        ],
        "complexity": 9,
        "calls": [
          "DataFrame",
          "DataFrame",
          "min",
          "max",
          "min",
          "max",
          "Polygon",
          "apply",
          "LineString",
          "median",
          "median",
          "shapely_transform",
          "buffer",
          "apply",
          "contains",
          "int",
          "from_crs",
          "Point",
          "contains",
          "shapely_transform",
          "Point"
        ],
        "decorators": []
      }
    ],
    "old_streamlit_files\\section_logic.py": [
      {
        "name": "generate_section_plot",
        "line": 9,
        "end_line": 61,
        "docstring": null,
        "args": [
          "filtered_ids",
          "selected",
          "filename_map",
          "show_labels"
        ],
        "complexity": 17,
        "calls": [
          "to_dict",
          "get",
          "items",
          "get",
          "get",
          "join",
          "plot_section_from_ags",
          "from_crs",
          "PCA",
          "fit_transform",
          "gettempdir",
          "open",
          "write",
          "pyplot",
          "warning",
          "set_index",
          "transform",
          "any",
          "mean",
          "max",
          "min",
          "tuple",
          "tuple",
          "get",
          "any",
          "isnull"
        ],
        "decorators": []
      }
    ],
    "old_streamlit_files\\section_plot.py": [
      {
        "name": "parse_ags_geol_section",
        "line": 20,
        "end_line": 93,
        "docstring": "Parse the AGS file and extract GEOL, LOCA, and ABBR group data as DataFrames.",
        "args": [
          "filepath"
        ],
        "complexity": 55,
        "calls": [
          "parse_lines",
          "DataFrame",
          "DataFrame",
          "open",
          "readlines",
          "list",
          "strip",
          "strip",
          "DataFrame",
          "reader",
          "append",
          "to_numeric",
          "append",
          "to_numeric",
          "append",
          "len",
          "len",
          "len",
          "len",
          "len",
          "len",
          "len",
          "len",
          "len"
        ],
        "decorators": []
      },
      {
        "name": "plot_borehole_sections",
        "line": 96,
        "end_line": 421,
        "docstring": "Plot a section for each borehole using real X coordinates from LOCA_NATE (Easting) in LOCA group.\nThe bottom axis is distance in meters (relative to the first borehole), and the same GEOL_LEG code\nuses the same color across all boreholes.",
        "args": [
          "geol_df",
          "loca_df",
          "abbr_df",
          "ags_title",
          "section_line",
          "show_labels"
        ],
        "complexity": 47,
        "calls": [
          "merge",
          "unique",
          "dropna",
          "sort_values",
          "reindex",
          "tolist",
          "to_dict",
          "unique",
          "len",
          "max",
          "min",
          "subplots",
          "set",
          "enumerate",
          "array",
          "argsort",
          "plot",
          "array",
          "enumerate",
          "set_title",
          "int",
          "int",
          "arange",
          "set_xticks",
          "set_xticklabels",
          "set_xlabel",
          "set_ylabel",
          "max",
          "min",
          "set_ylim",
          "set_xlim",
          "set",
          "legend",
          "tight_layout",
          "len",
          "print",
          "print",
          "merge",
          "to_numeric",
          "abs",
          "abs",
          "dict",
          "tab20",
          "reset_index",
          "iterrows",
          "max",
          "annotate",
          "basename",
          "endswith",
          "max",
          "min",
          "first",
          "first",
          "isinstance",
          "LineString",
          "zip",
          "dict",
          "hypot",
          "dict",
          "zip",
          "first",
          "enumerate",
          "get",
          "fill_betweenx",
          "append",
          "append",
          "print",
          "print",
          "min",
          "floor",
          "ceil",
          "max",
          "min",
          "min",
          "max",
          "append",
          "add",
          "print",
          "exit",
          "len",
          "Point",
          "append",
          "zip",
          "zip",
          "search",
          "sort_values",
          "add",
          "append",
          "append",
          "print",
          "print",
          "len",
          "lower",
          "Line2D",
          "project",
          "str",
          "str",
          "group",
          "text",
          "str",
          "min",
          "max",
          "min",
          "min",
          "max",
          "int",
          "isna",
          "isna",
          "groupby",
          "groupby",
          "groupby",
          "append",
          "append",
          "str",
          "text",
          "str"
        ],
        "decorators": []
      },
      {
        "name": "plot_section_from_ags",
        "line": 424,
        "end_line": 448,
        "docstring": "Parse AGS file and plot section for optionally filtered LOCA_IDs. Returns the matplotlib figure.",
        "args": [
          "ags_file",
          "filter_loca_ids",
          "section_line",
          "show_labels"
        ],
        "complexity": 5,
        "calls": [
          "parse_ags_geol_section",
          "basename",
          "endswith",
          "plot_borehole_sections",
          "print",
          "isin",
          "isin",
          "lower"
        ],
        "decorators": []
      },
      {
        "name": "parse_lines",
        "line": 26,
        "end_line": 27,
        "docstring": null,
        "args": [
          "lines"
        ],
        "complexity": 1,
        "calls": [
          "list",
          "reader"
        ],
        "decorators": []
      }
    ],
    "old_streamlit_files\\utils.py": [
      {
        "name": "latlon_to_osgb36",
        "line": 5,
        "end_line": 8,
        "docstring": "Convert WGS84 lon/lat to OSGB36 easting/northing (EPSG:27700).",
        "args": [
          "lon",
          "lat"
        ],
        "complexity": 1,
        "calls": [
          "from_crs",
          "transform"
        ],
        "decorators": []
      },
      {
        "name": "osgb36_to_latlon",
        "line": 11,
        "end_line": 14,
        "docstring": "Convert OSGB36 easting/northing to WGS84 lat/lon.",
        "args": [
          "easting",
          "northing"
        ],
        "complexity": 1,
        "calls": [
          "from_crs",
          "transform"
        ],
        "decorators": []
      },
      {
        "name": "get_session_state",
        "line": 17,
        "end_line": 21,
        "docstring": "Get a value from Streamlit session state, or set it to default if missing.",
        "args": [
          "key",
          "default"
        ],
        "complexity": 2,
        "calls": [],
        "decorators": []
      },
      {
        "name": "assign_color_map",
        "line": 24,
        "end_line": 29,
        "docstring": "Assign a color from a matplotlib colormap to each unique key.",
        "args": [
          "unique_keys",
          "cmap_name"
        ],
        "complexity": 2,
        "calls": [
          "get_cmap",
          "cmap",
          "enumerate"
        ],
        "decorators": []
      },
      {
        "name": "safe_temp_path",
        "line": 32,
        "end_line": 37,
        "docstring": "Create a safe temp file path for a given filename.",
        "args": [
          "fname",
          "tmp_dir"
        ],
        "complexity": 1,
        "calls": [
          "basename",
          "join"
        ],
        "decorators": []
      },
      {
        "name": "euclidean_distance",
        "line": 40,
        "end_line": 44,
        "docstring": "Compute Euclidean distance between two points.",
        "args": [
          "x1",
          "y1",
          "x2",
          "y2"
        ],
        "complexity": 1,
        "calls": [
          "hypot"
        ],
        "decorators": []
      }
    ],
    "state_management\\app_state.py": [
      {
        "name": "get_app_state_manager",
        "line": 270,
        "end_line": 285,
        "docstring": "Get the singleton application state manager.\n\nReturns:\n    AppState: The singleton application state manager",
        "args": [],
        "complexity": 3,
        "calls": [
          "AppState",
          "info"
        ],
        "decorators": []
      },
      {
        "name": "reset_app_state_manager",
        "line": 288,
        "end_line": 298,
        "docstring": "Reset the singleton application state manager.\n\nThis should only be used for testing purposes.",
        "args": [],
        "complexity": 1,
        "calls": [
          "info"
        ],
        "decorators": []
      },
      {
        "name": "__init__",
        "line": 33,
        "end_line": 43,
        "docstring": null,
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "Lock",
          "BoreholeData",
          "MapState",
          "SelectionState",
          "PlotState",
          "UploadState",
          "info"
        ],
        "decorators": []
      },
      {
        "name": "borehole_data",
        "line": 46,
        "end_line": 48,
        "docstring": "Get borehole data state.",
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [],
        "decorators": [
          "property"
        ]
      },
      {
        "name": "map_state",
        "line": 51,
        "end_line": 53,
        "docstring": "Get map state.",
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [],
        "decorators": [
          "property"
        ]
      },
      {
        "name": "selection_state",
        "line": 56,
        "end_line": 58,
        "docstring": "Get selection state.",
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [],
        "decorators": [
          "property"
        ]
      },
      {
        "name": "plot_state",
        "line": 61,
        "end_line": 63,
        "docstring": "Get plot state.",
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [],
        "decorators": [
          "property"
        ]
      },
      {
        "name": "upload_state",
        "line": 66,
        "end_line": 68,
        "docstring": "Get upload state.",
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [],
        "decorators": [
          "property"
        ]
      },
      {
        "name": "get_state_version",
        "line": 70,
        "end_line": 73,
        "docstring": "Get current state version for change tracking.",
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [],
        "decorators": []
      },
      {
        "name": "update_borehole_data",
        "line": 75,
        "end_line": 86,
        "docstring": "Update borehole data and increment state version.",
        "args": [
          "self"
        ],
        "complexity": 3,
        "calls": [
          "items",
          "now",
          "_increment_version",
          "debug",
          "hasattr",
          "setattr",
          "warning",
          "list",
          "keys"
        ],
        "decorators": []
      },
      {
        "name": "update_map_state",
        "line": 88,
        "end_line": 98,
        "docstring": "Update map state and increment state version.",
        "args": [
          "self"
        ],
        "complexity": 3,
        "calls": [
          "items",
          "_increment_version",
          "debug",
          "hasattr",
          "setattr",
          "warning",
          "list",
          "keys"
        ],
        "decorators": []
      },
      {
        "name": "update_selection_state",
        "line": 100,
        "end_line": 111,
        "docstring": "Update selection state and increment state version.",
        "args": [
          "self"
        ],
        "complexity": 3,
        "calls": [
          "items",
          "now",
          "_increment_version",
          "debug",
          "hasattr",
          "setattr",
          "warning",
          "list",
          "keys"
        ],
        "decorators": []
      },
      {
        "name": "update_plot_state",
        "line": 113,
        "end_line": 123,
        "docstring": "Update plot state and increment state version.",
        "args": [
          "self"
        ],
        "complexity": 3,
        "calls": [
          "items",
          "_increment_version",
          "debug",
          "hasattr",
          "setattr",
          "warning",
          "list",
          "keys"
        ],
        "decorators": []
      },
      {
        "name": "update_upload_state",
        "line": 125,
        "end_line": 135,
        "docstring": "Update upload state and increment state version.",
        "args": [
          "self"
        ],
        "complexity": 3,
        "calls": [
          "items",
          "_increment_version",
          "debug",
          "hasattr",
          "setattr",
          "warning",
          "list",
          "keys"
        ],
        "decorators": []
      },
      {
        "name": "clear_all_state",
        "line": 137,
        "end_line": 146,
        "docstring": "Clear all application state.",
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "BoreholeData",
          "MapState",
          "SelectionState",
          "PlotState",
          "UploadState",
          "_increment_version",
          "info"
        ],
        "decorators": []
      },
      {
        "name": "get_state_summary",
        "line": 148,
        "end_line": 160,
        "docstring": "Get a summary of current state for debugging.",
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "get_borehole_count",
          "len",
          "len",
          "isoformat"
        ],
        "decorators": []
      },
      {
        "name": "add_change_listener",
        "line": 162,
        "end_line": 165,
        "docstring": "Add a callback to be notified of state changes.",
        "args": [
          "self",
          "callback"
        ],
        "complexity": 1,
        "calls": [
          "append"
        ],
        "decorators": []
      },
      {
        "name": "remove_change_listener",
        "line": 167,
        "end_line": 171,
        "docstring": "Remove a change listener.",
        "args": [
          "self",
          "callback"
        ],
        "complexity": 2,
        "calls": [
          "remove"
        ],
        "decorators": []
      },
      {
        "name": "_increment_version",
        "line": 173,
        "end_line": 180,
        "docstring": "Increment state version and notify listeners.",
        "args": [
          "self"
        ],
        "complexity": 3,
        "calls": [
          "listener",
          "error"
        ],
        "decorators": []
      },
      {
        "name": "to_dash_store_format",
        "line": 182,
        "end_line": 208,
        "docstring": "Convert state to format suitable for Dash Store components.\n\nThis maintains compatibility with existing callback patterns\nwhile providing centralized state management.",
        "args": [
          "self"
        ],
        "complexity": 2,
        "calls": [
          "to_dict",
          "list"
        ],
        "decorators": []
      },
      {
        "name": "from_dash_store_format",
        "line": 210,
        "end_line": 262,
        "docstring": "Update state from Dash Store format.\n\nThis allows backwards compatibility with existing Dash Store patterns.",
        "args": [
          "self",
          "data"
        ],
        "complexity": 14,
        "calls": [
          "_increment_version",
          "debug",
          "DataFrame",
          "tuple"
        ],
        "decorators": []
      }
    ],
    "state_management\\state_models.py": [
      {
        "name": "is_loaded",
        "line": 26,
        "end_line": 28,
        "docstring": "Check if borehole data is loaded.",
        "args": [
          "self"
        ],
        "complexity": 2,
        "calls": [],
        "decorators": [
          "property"
        ]
      },
      {
        "name": "get_borehole_count",
        "line": 30,
        "end_line": 34,
        "docstring": "Get the number of loaded boreholes.",
        "args": [
          "self"
        ],
        "complexity": 2,
        "calls": [
          "len"
        ],
        "decorators": []
      },
      {
        "name": "get_borehole_by_id",
        "line": 36,
        "end_line": 44,
        "docstring": "Get a specific borehole by ID.",
        "args": [
          "self",
          "borehole_id"
        ],
        "complexity": 3,
        "calls": [],
        "decorators": []
      },
      {
        "name": "update_center",
        "line": 57,
        "end_line": 62,
        "docstring": "Update map center and optionally zoom.",
        "args": [
          "self",
          "lat",
          "lon",
          "zoom"
        ],
        "complexity": 2,
        "calls": [
          "now"
        ],
        "decorators": []
      },
      {
        "name": "set_bounds_from_coordinates",
        "line": 64,
        "end_line": 72,
        "docstring": "Calculate and set bounds from a list of coordinates.",
        "args": [
          "self",
          "coordinates"
        ],
        "complexity": 4,
        "calls": [
          "min",
          "min",
          "max",
          "max"
        ],
        "decorators": []
      },
      {
        "name": "clear_selection",
        "line": 87,
        "end_line": 94,
        "docstring": "Clear all selection state.",
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "clear",
          "now"
        ],
        "decorators": []
      },
      {
        "name": "update_selection",
        "line": 96,
        "end_line": 100,
        "docstring": "Update the current selection.",
        "args": [
          "self",
          "borehole_ids",
          "method"
        ],
        "complexity": 1,
        "calls": [
          "copy",
          "now"
        ],
        "decorators": []
      },
      {
        "name": "add_polyline_selection",
        "line": 102,
        "end_line": 114,
        "docstring": "Add a polyline-based selection.",
        "args": [
          "self",
          "borehole_ids",
          "polyline_coords",
          "buffer_meters"
        ],
        "complexity": 1,
        "calls": [
          "copy",
          "copy",
          "now"
        ],
        "decorators": []
      },
      {
        "name": "start_generation",
        "line": 128,
        "end_line": 131,
        "docstring": "Mark plot generation as in progress.",
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [],
        "decorators": []
      },
      {
        "name": "complete_generation",
        "line": 133,
        "end_line": 138,
        "docstring": "Mark plot generation as complete.",
        "args": [
          "self",
          "success",
          "error_message"
        ],
        "complexity": 2,
        "calls": [
          "now"
        ],
        "decorators": []
      },
      {
        "name": "clear_plots",
        "line": 140,
        "end_line": 144,
        "docstring": "Clear all generated plots.",
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [],
        "decorators": []
      },
      {
        "name": "start_upload",
        "line": 157,
        "end_line": 160,
        "docstring": "Mark upload as in progress.",
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "clear"
        ],
        "decorators": []
      },
      {
        "name": "complete_upload",
        "line": 162,
        "end_line": 170,
        "docstring": "Mark upload as complete.",
        "args": [
          "self",
          "files",
          "total_size",
          "errors"
        ],
        "complexity": 1,
        "calls": [
          "copy",
          "now",
          "copy"
        ],
        "decorators": []
      },
      {
        "name": "clear_upload",
        "line": 172,
        "end_line": 178,
        "docstring": "Clear upload state.",
        "args": [
          "self"
        ],
        "complexity": 1,
        "calls": [
          "clear",
          "clear"
        ],
        "decorators": []
      }
    ],
    "state_management\\__init__.py": []
  },
  "classes": {
    "analyze_codebase.py": [
      {
        "name": "CodeAnalyzer",
        "line": 22,
        "docstring": null,
        "methods": [
          {
            "name": "__init__",
            "line": 23,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "should_analyze_file",
            "line": 31,
            "docstring": "Check if file should be analyzed",
            "complexity": 3,
            "is_property": false
          },
          {
            "name": "extract_imports",
            "line": 41,
            "docstring": "Extract import statements from Python file",
            "complexity": 7,
            "is_property": false
          },
          {
            "name": "extract_functions_and_classes",
            "line": 60,
            "docstring": "Extract function and class definitions",
            "complexity": 8,
            "is_property": false
          },
          {
            "name": "get_file_info",
            "line": 97,
            "docstring": "Get basic file information",
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "analyze_file",
            "line": 122,
            "docstring": "Analyze a single file",
            "complexity": 5,
            "is_property": false
          },
          {
            "name": "analyze_project",
            "line": 155,
            "docstring": "Analyze the entire project",
            "complexity": 5,
            "is_property": false
          },
          {
            "name": "generate_analysis_report",
            "line": 170,
            "docstring": "Generate analysis report",
            "complexity": 6,
            "is_property": false
          },
          {
            "name": "save_analysis",
            "line": 195,
            "docstring": "Save analysis results to JSON",
            "complexity": 5,
            "is_property": false
          }
        ],
        "bases": []
      }
    ],
    "analyze_debug_log.py": [],
    "app.py": [],
    "app_constants.py": [
      {
        "name": "FileLimits",
        "line": 17,
        "docstring": "File size and processing limits",
        "methods": [],
        "bases": []
      },
      {
        "name": "MapConfig",
        "line": 31,
        "docstring": "Map display and interaction constants",
        "methods": [],
        "bases": []
      },
      {
        "name": "PlotConfig",
        "line": 63,
        "docstring": "Plotting and visualization constants",
        "methods": [],
        "bases": []
      },
      {
        "name": "DataConfig",
        "line": 106,
        "docstring": "Data processing and validation constants",
        "methods": [],
        "bases": []
      },
      {
        "name": "UIConfig",
        "line": 134,
        "docstring": "User interface constants",
        "methods": [],
        "bases": []
      },
      {
        "name": "PerformanceConfig",
        "line": 175,
        "docstring": "Performance tuning constants",
        "methods": [],
        "bases": []
      },
      {
        "name": "LoggingConfig",
        "line": 198,
        "docstring": "Logging configuration constants",
        "methods": [],
        "bases": []
      },
      {
        "name": "GeologyConfig",
        "line": 227,
        "docstring": "Geology-specific constants",
        "methods": [],
        "bases": []
      }
    ],
    "app_factory.py": [],
    "borehole_log_professional.py": [
      {
        "name": "ProfessionalBoreholeLog",
        "line": 1657,
        "docstring": "Professional borehole log plotter with Openground-style formatting.",
        "methods": [
          {
            "name": "__init__",
            "line": 1660,
            "docstring": "Initialize the professional borehole log plotter.\n\nArgs:\n    geology_csv_path: Path to CSV file containing geology code mappings (optional, uses default if None)",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "create_borehole_log",
            "line": 1671,
            "docstring": "Create a professional borehole log plot.\nReturns a list of base64-encoded PNG images.\n\nArgs:\n    borehole_data: DataFrame with columns including 'Depth_Top', 'Depth_Base',\n                  'Geology_Code', 'Description'\n    borehole_id: Identifier for the borehole\n    title: Optional title for the plot\n    figsize: Figure size (width, height) in inches\n    dpi: Resolution for the plot\n\nReturns:\n    List of base64-encoded PNG images",
            "complexity": 1,
            "is_property": false
          }
        ],
        "bases": []
      }
    ],
    "callbacks_split.py": [
      {
        "name": "CallbackError",
        "line": 59,
        "docstring": "Custom exception for callback errors with user-friendly messages.",
        "methods": [
          {
            "name": "__init__",
            "line": 62,
            "docstring": null,
            "complexity": 2,
            "is_property": false
          }
        ],
        "bases": [
          "Exception"
        ]
      }
    ],
    "comprehensive_optimization_validation.py": [],
    "config.py": [],
    "coordinate_service.py": [
      {
        "name": "CoordinateTransformError",
        "line": 30,
        "docstring": "Custom exception for coordinate transformation errors.",
        "methods": [],
        "bases": [
          "Exception"
        ]
      },
      {
        "name": "CoordinateTransformService",
        "line": 111,
        "docstring": "Centralized service for all coordinate transformations.\n\nThis class provides a single interface for coordinate transformations\nwith caching, error handling, and performance optimization.",
        "methods": [
          {
            "name": "__init__",
            "line": 119,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "transform_bng_to_wgs84",
            "line": 122,
            "docstring": "Transform British National Grid coordinates to WGS84.\n\nArgs:\n    easting: BNG easting coordinate(s)\n    northing: BNG northing coordinate(s)\n\nReturns:\n    tuple: (latitude, longitude) arrays in WGS84",
            "complexity": 5,
            "is_property": false
          },
          {
            "name": "transform_wgs84_to_utm",
            "line": 179,
            "docstring": "Transform WGS84 coordinates to UTM.\n\nArgs:\n    longitude: WGS84 longitude coordinate(s)\n    latitude: WGS84 latitude coordinate(s)\n\nReturns:\n    tuple: (utm_x, utm_y, utm_crs) where utm_crs is the UTM zone used",
            "complexity": 3,
            "is_property": false
          },
          {
            "name": "transform_bng_to_utm",
            "line": 222,
            "docstring": "Transform BNG coordinates directly to UTM (via WGS84).\n\nArgs:\n    easting: BNG easting coordinate(s)\n    northing: BNG northing coordinate(s)\n\nReturns:\n    tuple: (utm_x, utm_y, utm_crs)",
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "transform_dataframe_coordinates",
            "line": 250,
            "docstring": "Transform coordinates in a pandas DataFrame.\n\nArgs:\n    df: DataFrame containing coordinates\n    source_x_col: Column name for source X coordinates\n    source_y_col: Column name for source Y coordinates\n    source_crs: Source coordinate reference system\n    target_crs: Target coordinate reference system\n    target_x_col: Column name for target X coordinates (default: auto-generated)\n    target_y_col: Column name for target Y coordinates (default: auto-generated)\n\nReturns:\n    pd.DataFrame: DataFrame with added transformed coordinates",
            "complexity": 6,
            "is_property": false
          },
          {
            "name": "get_cache_stats",
            "line": 315,
            "docstring": "Get transformation cache statistics.",
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "clear_cache",
            "line": 336,
            "docstring": "Clear the transformer cache.",
            "complexity": 1,
            "is_property": false
          }
        ],
        "bases": []
      }
    ],
    "dataframe_optimizer.py": [],
    "data_loader.py": [],
    "debug_module.py": [],
    "debug_offset_layout.py": [],
    "enhanced_error_handling.py": [
      {
        "name": "ErrorSeverity",
        "line": 18,
        "docstring": "Error severity levels for categorizing different types of failures.",
        "methods": [],
        "bases": [
          "Enum"
        ]
      },
      {
        "name": "ErrorContext",
        "line": 28,
        "docstring": "Structured error context for better debugging and user feedback.",
        "methods": [
          {
            "name": "__post_init__",
            "line": 39,
            "docstring": null,
            "complexity": 2,
            "is_property": false
          }
        ],
        "bases": []
      },
      {
        "name": "PerformanceMonitor",
        "line": 342,
        "docstring": "Context manager for monitoring operation performance.",
        "methods": [
          {
            "name": "__init__",
            "line": 345,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "__enter__",
            "line": 350,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "__exit__",
            "line": 355,
            "docstring": null,
            "complexity": 3,
            "is_property": false
          }
        ],
        "bases": []
      }
    ],
    "error_handling.py": [
      {
        "name": "ErrorSeverity",
        "line": 21,
        "docstring": "Error severity levels.",
        "methods": [],
        "bases": [
          "Enum"
        ]
      },
      {
        "name": "ErrorCategory",
        "line": 30,
        "docstring": "Error categories for better organization.",
        "methods": [],
        "bases": [
          "Enum"
        ]
      },
      {
        "name": "ApplicationError",
        "line": 45,
        "docstring": "Standardized error representation.",
        "methods": [
          {
            "name": "__post_init__",
            "line": 58,
            "docstring": null,
            "complexity": 4,
            "is_property": false
          },
          {
            "name": "to_dict",
            "line": 66,
            "docstring": "Convert error to dictionary format.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "get_user_friendly_message",
            "line": 80,
            "docstring": "Get a user-friendly error message.",
            "complexity": 4,
            "is_property": false
          }
        ],
        "bases": []
      },
      {
        "name": "ErrorHandler",
        "line": 108,
        "docstring": "Centralized error handling service.",
        "methods": [
          {
            "name": "__init__",
            "line": 111,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "create_error",
            "line": 115,
            "docstring": "Create a standardized application error.",
            "complexity": 3,
            "is_property": false
          },
          {
            "name": "handle_callback_error",
            "line": 159,
            "docstring": "Handle errors that occur in Dash callbacks.",
            "complexity": 4,
            "is_property": false
          },
          {
            "name": "get_dash_error_response",
            "line": 196,
            "docstring": "Generate appropriate Dash callback response for an error.\n\nArgs:\n    error: The application error\n    output_count: Number of outputs the callback expects\n\nReturns:\n    Appropriate Dash response (no_update, error div, or list)",
            "complexity": 4,
            "is_property": false
          },
          {
            "name": "get_error_history",
            "line": 229,
            "docstring": "Get recent error history with optional filtering.",
            "complexity": 5,
            "is_property": false
          },
          {
            "name": "clear_error_history",
            "line": 250,
            "docstring": "Clear error history.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "_log_error",
            "line": 255,
            "docstring": "Log error using appropriate logging level.",
            "complexity": 5,
            "is_property": false
          },
          {
            "name": "_add_to_history",
            "line": 271,
            "docstring": "Add error to history with size management.",
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "_categorize_callback_error",
            "line": 279,
            "docstring": "Determine error category from callback name.",
            "complexity": 12,
            "is_property": false
          },
          {
            "name": "_create_error_component",
            "line": 299,
            "docstring": "Create Dash HTML component for displaying error.",
            "complexity": 2,
            "is_property": false
          }
        ],
        "bases": []
      }
    ],
    "error_recovery.py": [
      {
        "name": "ErrorRecoveryError",
        "line": 27,
        "docstring": "Custom exception for error recovery operations.",
        "methods": [],
        "bases": [
          "Exception"
        ]
      },
      {
        "name": "CircuitBreaker",
        "line": 33,
        "docstring": "Circuit breaker pattern implementation for external dependencies.\n\nPrevents cascading failures by temporarily disabling failing operations\nand allowing them to recover.",
        "methods": [
          {
            "name": "__init__",
            "line": 41,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "call",
            "line": 48,
            "docstring": "Execute function with circuit breaker protection.",
            "complexity": 4,
            "is_property": false
          },
          {
            "name": "_on_success",
            "line": 67,
            "docstring": "Handle successful operation.",
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "_on_failure",
            "line": 74,
            "docstring": "Handle failed operation.",
            "complexity": 2,
            "is_property": false
          }
        ],
        "bases": []
      },
      {
        "name": "RetryHandler",
        "line": 84,
        "docstring": "Handles automatic retries with exponential backoff.",
        "methods": [
          {
            "name": "retry_with_backoff",
            "line": 90,
            "docstring": "Decorator for automatic retry with exponential backoff.\n\nArgs:\n    max_retries: Maximum number of retry attempts\n    base_delay: Initial delay between retries (seconds)\n    backoff_factor: Multiplier for delay after each failure\n    max_delay: Maximum delay between retries (seconds)",
            "complexity": 4,
            "is_property": false
          }
        ],
        "bases": []
      },
      {
        "name": "GracefulDegradation",
        "line": 136,
        "docstring": "Manages graceful degradation of application features.",
        "methods": [
          {
            "name": "__init__",
            "line": 141,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "disable_feature",
            "line": 145,
            "docstring": "Disable a feature temporarily.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "enable_feature",
            "line": 150,
            "docstring": "Re-enable a previously disabled feature.",
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "is_feature_enabled",
            "line": 156,
            "docstring": "Check if a feature is currently enabled.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "register_fallback",
            "line": 160,
            "docstring": "Register a fallback handler for a feature.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "execute_with_fallback",
            "line": 164,
            "docstring": "Execute a function with fallback support.\n\nReturns:\n    Tuple[result, used_fallback]: Result and whether fallback was used",
            "complexity": 6,
            "is_property": false
          }
        ],
        "bases": []
      },
      {
        "name": "ErrorHandler",
        "line": 202,
        "docstring": "Comprehensive error handling and user message generation.",
        "methods": [
          {
            "name": "create_user_friendly_message",
            "line": 208,
            "docstring": "Create a user-friendly error message with recovery suggestions.\n\nArgs:\n    error: The exception that occurred\n    context: Additional context about where the error occurred\n\nReturns:\n    Dict containing error details and user message",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "log_error",
            "line": 317,
            "docstring": "Log error details for debugging and monitoring.\n\nArgs:\n    error: The exception that occurred\n    context: Additional context about the error\n    user_id: User identifier for tracking",
            "complexity": 1,
            "is_property": false
          }
        ],
        "bases": []
      },
      {
        "name": "RecoveryManager",
        "line": 338,
        "docstring": "Main recovery manager that coordinates all error recovery mechanisms.",
        "methods": [
          {
            "name": "__init__",
            "line": 343,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "get_circuit_breaker",
            "line": 348,
            "docstring": "Get or create circuit breaker for a service.",
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "handle_operation",
            "line": 355,
            "docstring": "Context manager for handling operations with comprehensive error recovery.\n\nUsage:\n    with recovery_manager.handle_operation(\"file_upload\", \"AGS file processing\"):\n        # Your operation here\n        process_file(file_data)",
            "complexity": 3,
            "is_property": false
          },
          {
            "name": "reset_error_counts",
            "line": 388,
            "docstring": "Reset all error counts (for testing or maintenance).",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "get_system_health",
            "line": 393,
            "docstring": "Get overall system health status.",
            "complexity": 2,
            "is_property": false
          }
        ],
        "bases": []
      }
    ],
    "generate_dependency_graph.py": [],
    "generate_flowchart_data.py": [
      {
        "name": "EnhancedCodeAnalyzer",
        "line": 23,
        "docstring": null,
        "methods": [
          {
            "name": "__init__",
            "line": 24,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "analyze_ast_detailed",
            "line": 34,
            "docstring": "Detailed AST analysis including function calls and complexity",
            "complexity": 22,
            "is_property": false
          },
          {
            "name": "calculate_function_complexity",
            "line": 106,
            "docstring": "Calculate cyclomatic complexity for a function",
            "complexity": 6,
            "is_property": false
          },
          {
            "name": "get_git_info",
            "line": 123,
            "docstring": "Get git information for a file",
            "complexity": 7,
            "is_property": false
          },
          {
            "name": "analyze_file_detailed",
            "line": 158,
            "docstring": "Enhanced file analysis with more metrics",
            "complexity": 11,
            "is_property": false
          },
          {
            "name": "categorize_file_detailed",
            "line": 241,
            "docstring": "Enhanced file categorization",
            "complexity": 21,
            "is_property": false
          },
          {
            "name": "generate_network_metrics",
            "line": 283,
            "docstring": "Generate network analysis metrics",
            "complexity": 9,
            "is_property": false
          },
          {
            "name": "analyze_project",
            "line": 335,
            "docstring": "Analyze the entire project with enhanced metrics",
            "complexity": 7,
            "is_property": false
          },
          {
            "name": "generate_analysis_report",
            "line": 359,
            "docstring": "Generate comprehensive analysis report",
            "complexity": 10,
            "is_property": false
          },
          {
            "name": "save_enhanced_analysis",
            "line": 409,
            "docstring": "Save enhanced analysis with all metrics",
            "complexity": 12,
            "is_property": false
          }
        ],
        "bases": []
      }
    ],
    "geology_code_utils.py": [],
    "health_check.py": [
      {
        "name": "HealthStatus",
        "line": 33,
        "docstring": "Health status constants.",
        "methods": [],
        "bases": []
      },
      {
        "name": "SystemMonitor",
        "line": 42,
        "docstring": "Monitors system resources and performance metrics.",
        "methods": [
          {
            "name": "__init__",
            "line": 47,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "get_system_info",
            "line": 52,
            "docstring": "Get basic system information.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "get_memory_info",
            "line": 64,
            "docstring": "Get memory usage information.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "get_cpu_info",
            "line": 80,
            "docstring": "Get CPU usage information.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "get_disk_info",
            "line": 95,
            "docstring": "Get disk usage information.",
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "_assess_memory_status",
            "line": 116,
            "docstring": "Assess memory health status.",
            "complexity": 3,
            "is_property": false
          },
          {
            "name": "_assess_cpu_status",
            "line": 125,
            "docstring": "Assess CPU health status.",
            "complexity": 3,
            "is_property": false
          },
          {
            "name": "_assess_disk_status",
            "line": 134,
            "docstring": "Assess disk health status.",
            "complexity": 3,
            "is_property": false
          }
        ],
        "bases": []
      },
      {
        "name": "ServiceHealthChecker",
        "line": 144,
        "docstring": "Checks the health of application services and dependencies.",
        "methods": [
          {
            "name": "check_coordinate_service",
            "line": 149,
            "docstring": "Check coordinate transformation service health.",
            "complexity": 4,
            "is_property": false
          },
          {
            "name": "check_file_system",
            "line": 186,
            "docstring": "Check file system access and permissions.",
            "complexity": 4,
            "is_property": false
          },
          {
            "name": "check_required_modules",
            "line": 231,
            "docstring": "Check if all required Python modules are available.",
            "complexity": 4,
            "is_property": false
          }
        ],
        "bases": []
      },
      {
        "name": "PerformanceMonitor",
        "line": 275,
        "docstring": "Monitors application performance metrics.",
        "methods": [
          {
            "name": "__init__",
            "line": 280,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "record_request_time",
            "line": 285,
            "docstring": "Record the duration of an operation.",
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "get_performance_stats",
            "line": 298,
            "docstring": "Get performance statistics.",
            "complexity": 6,
            "is_property": false
          }
        ],
        "bases": []
      },
      {
        "name": "HealthChecker",
        "line": 338,
        "docstring": "Main health checker that coordinates all health monitoring.",
        "methods": [
          {
            "name": "__init__",
            "line": 343,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "run_health_check",
            "line": 350,
            "docstring": "Run a comprehensive health check of the application.\n\nArgs:\n    include_detailed: Whether to include detailed system metrics\n\nReturns:\n    Dict containing health check results",
            "complexity": 6,
            "is_property": false
          },
          {
            "name": "_determine_overall_status",
            "line": 434,
            "docstring": "Determine overall application health status.",
            "complexity": 11,
            "is_property": false
          },
          {
            "name": "get_quick_status",
            "line": 461,
            "docstring": "Get a quick health status without detailed checks.",
            "complexity": 5,
            "is_property": false
          }
        ],
        "bases": []
      }
    ],
    "lazy_marker_manager.py": [
      {
        "name": "ViewportBounds",
        "line": 18,
        "docstring": "Represents the visible area of the map.",
        "methods": [],
        "bases": []
      },
      {
        "name": "MarkerCluster",
        "line": 29,
        "docstring": "Represents a cluster of markers for high-density areas.",
        "methods": [],
        "bases": []
      },
      {
        "name": "LazyMarkerManager",
        "line": 39,
        "docstring": "Manages map markers with lazy loading and viewport culling for performance.\n\nFeatures:\n- Viewport-based marker rendering (only visible markers)\n- Marker clustering for high-density areas\n- Progressive loading based on zoom levels\n- Memory-efficient marker updates",
        "methods": [
          {
            "name": "__init__",
            "line": 50,
            "docstring": "Initialize the lazy marker manager.\n\nArgs:\n    max_markers_per_viewport: Maximum markers to render in viewport\n    clustering_zoom_threshold: Zoom level below which to use clustering",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "get_visible_markers",
            "line": 71,
            "docstring": "Get markers that should be visible based on viewport and zoom level.\n\nArgs:\n    loca_df: DataFrame with borehole location data\n    viewport: Current map viewport bounds and zoom\n    selected_ids: List of selected borehole IDs (always visible)\n    force_all: Force rendering all markers (for small datasets)\n\nReturns:\n    List of Dash Leaflet marker components",
            "complexity": 12,
            "is_property": false
          },
          {
            "name": "_filter_by_viewport",
            "line": 126,
            "docstring": "Filter DataFrame to only include markers within viewport bounds.",
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "_create_viewport_markers",
            "line": 165,
            "docstring": "Create markers for viewport-filtered data.",
            "complexity": 3,
            "is_property": false
          },
          {
            "name": "_create_clustered_markers",
            "line": 200,
            "docstring": "Create clustered markers for zoomed-out views.",
            "complexity": 4,
            "is_property": false
          },
          {
            "name": "_create_grid_clusters",
            "line": 245,
            "docstring": "Create clusters using a simple grid-based approach.",
            "complexity": 4,
            "is_property": false
          },
          {
            "name": "_create_cluster_marker",
            "line": 294,
            "docstring": "Create a cluster marker representing multiple boreholes.",
            "complexity": 3,
            "is_property": false
          },
          {
            "name": "_create_all_markers",
            "line": 336,
            "docstring": "Create markers for all rows in DataFrame.",
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "_create_single_marker",
            "line": 349,
            "docstring": "Create a single marker from a DataFrame row.",
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "_get_marker_icon_url",
            "line": 390,
            "docstring": "Get the appropriate marker icon URL.",
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "_format_depth_value",
            "line": 398,
            "docstring": "Format depth values for display.",
            "complexity": 5,
            "is_property": false
          },
          {
            "name": "update_cache_stats",
            "line": 409,
            "docstring": "Get cache statistics for monitoring.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "clear_cache",
            "line": 417,
            "docstring": "Clear all caches to free memory.",
            "complexity": 1,
            "is_property": false
          }
        ],
        "bases": []
      }
    ],
    "loading_indicators.py": [
      {
        "name": "LoadingIndicator",
        "line": 23,
        "docstring": "Centralized loading indicator management for the application.\n\nProvides consistent loading states, progress feedback, and user notifications\nduring long-running operations.",
        "methods": [
          {
            "name": "create_spinner",
            "line": 32,
            "docstring": "Create a loading spinner component.\n\nArgs:\n    loading_id: Unique identifier for the loading state\n    message: Message to display during loading\n    size: Size of spinner (\"small\", \"default\", \"large\")\n\nReturns:\n    html.Div: Loading spinner component",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "create_progress_bar",
            "line": 86,
            "docstring": "Create a progress bar component.\n\nArgs:\n    progress_id: Unique identifier for the progress bar\n    current: Current progress value\n    total: Total/maximum progress value\n    message: Optional message to display\n\nReturns:\n    html.Div: Progress bar component",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "create_file_upload_feedback",
            "line": 147,
            "docstring": "Create specialized feedback for file upload operations.\n\nArgs:\n    upload_id: Unique identifier for the upload operation\n    files_processed: Number of files processed so far\n    total_files: Total number of files to process\n    current_file: Name of currently processing file\n\nReturns:\n    html.Div: File upload feedback component",
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "create_plot_generation_feedback",
            "line": 201,
            "docstring": "Create specialized feedback for plot generation operations.\n\nArgs:\n    plot_id: Unique identifier for the plot operation\n    stage: Current stage of plot generation\n\nReturns:\n    html.Div: Plot generation feedback component",
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "create_toast_notification",
            "line": 257,
            "docstring": "Create a toast notification for user feedback.\n\nArgs:\n    message: Message to display\n    notification_type: Type of notification (\"success\", \"error\", \"warning\", \"info\")\n    duration: Duration in milliseconds (auto-hide)\n\nReturns:\n    html.Div: Toast notification component",
            "complexity": 1,
            "is_property": false
          }
        ],
        "bases": []
      },
      {
        "name": "LoadingStates",
        "line": 327,
        "docstring": "Manages loading states for different application components.\n\nProvides a centralized way to track and update loading states\nacross the application.",
        "methods": [
          {
            "name": "__init__",
            "line": 335,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "set_loading",
            "line": 338,
            "docstring": "Set loading state for a component.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "is_loading",
            "line": 346,
            "docstring": "Check if a component is currently loading.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "get_message",
            "line": 350,
            "docstring": "Get the loading message for a component.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "clear_state",
            "line": 354,
            "docstring": "Clear loading state for a component.",
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "clear_all",
            "line": 359,
            "docstring": "Clear all loading states.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "get_active_states",
            "line": 363,
            "docstring": "Get all currently active loading states.",
            "complexity": 2,
            "is_property": false
          }
        ],
        "bases": []
      }
    ],
    "map_utils.py": [],
    "memory_manager.py": [
      {
        "name": "MemoryStats",
        "line": 21,
        "docstring": "Memory usage statistics.",
        "methods": [],
        "bases": []
      },
      {
        "name": "MemoryManager",
        "line": 31,
        "docstring": "Comprehensive memory management for the application.\n\nFeatures:\n- Memory usage monitoring and alerts\n- Automatic cleanup routines\n- DataFrame memory optimization\n- Cache management\n- Memory leak detection",
        "methods": [
          {
            "name": "__init__",
            "line": 43,
            "docstring": "Initialize memory manager.\n\nArgs:\n    memory_threshold_mb: Memory usage threshold for alerts (MB)\n    cleanup_interval_minutes: Minutes between automatic cleanup\n    enable_auto_cleanup: Whether to enable automatic cleanup",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "get_current_memory_usage",
            "line": 73,
            "docstring": "Get current memory usage statistics.",
            "complexity": 3,
            "is_property": false
          },
          {
            "name": "check_memory_threshold",
            "line": 103,
            "docstring": "Check if memory usage exceeds threshold.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "should_cleanup",
            "line": 109,
            "docstring": "Determine if cleanup should be performed.",
            "complexity": 3,
            "is_property": false
          },
          {
            "name": "perform_cleanup",
            "line": 123,
            "docstring": "Perform memory cleanup operations.\n\nArgs:\n    force: Force cleanup regardless of conditions\n\nReturns:\n    Dictionary with cleanup results",
            "complexity": 5,
            "is_property": false
          },
          {
            "name": "_clear_global_caches",
            "line": 192,
            "docstring": "Clear caches from global singletons.",
            "complexity": 4,
            "is_property": false
          },
          {
            "name": "optimize_dataframe",
            "line": 215,
            "docstring": "Optimize DataFrame memory usage.\n\nArgs:\n    df: DataFrame to optimize\n    inplace: Whether to modify DataFrame in place\n\nReturns:\n    Optimized DataFrame",
            "complexity": 12,
            "is_property": false
          },
          {
            "name": "register_cache_reference",
            "line": 272,
            "docstring": "Register a cache object for cleanup.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "unregister_cache_reference",
            "line": 278,
            "docstring": "Unregister a cache object.",
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "get_memory_report",
            "line": 285,
            "docstring": "Generate comprehensive memory usage report.",
            "complexity": 4,
            "is_property": false
          },
          {
            "name": "monitor_memory_async",
            "line": 345,
            "docstring": "Start asynchronous memory monitoring.\n\nArgs:\n    callback_func: Optional callback function to call on threshold breach",
            "complexity": 5,
            "is_property": false
          }
        ],
        "bases": []
      }
    ],
    "optimization_baseline_test.py": [],
    "polyline_utils.py": [],
    "section_plot_professional.py": [],
    "test_ags_integration.py": [],
    "test_alignment.py": [],
    "test_callback_refactoring_comprehensive.py": [
      {
        "name": "MockApp",
        "line": 134,
        "docstring": null,
        "methods": [
          {
            "name": "__init__",
            "line": 135,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "callback",
            "line": 138,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          }
        ],
        "bases": []
      }
    ],
    "test_cascading.py": [],
    "test_column_width_diagnostic.py": [],
    "test_comprehensive_text_boxes.py": [],
    "test_coordinate_service.py": [],
    "test_enhanced_text_boxes.py": [],
    "test_forced_overlap.py": [],
    "test_implementation_validation.py": [
      {
        "name": "ValidationResults",
        "line": 35,
        "docstring": "Tracks validation test results.",
        "methods": [
          {
            "name": "__init__",
            "line": 38,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "add_test",
            "line": 44,
            "docstring": "Add a test result.",
            "complexity": 5,
            "is_property": false
          },
          {
            "name": "get_summary",
            "line": 63,
            "docstring": "Get test summary.",
            "complexity": 1,
            "is_property": false
          }
        ],
        "bases": []
      }
    ],
    "test_layer_order.py": [],
    "test_legend_mapping.py": [],
    "test_optimizations.py": [],
    "test_overflow.py": [],
    "test_overflow_management.py": [],
    "test_pushdown_extension.py": [],
    "test_refactoring_validation.py": [
      {
        "name": "MockCallback",
        "line": 74,
        "docstring": null,
        "methods": [
          {
            "name": "__init__",
            "line": 75,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "register",
            "line": 79,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          }
        ],
        "bases": []
      }
    ],
    "test_short_text_alignment.py": [],
    "test_text_boxes.py": [],
    "test_text_box_extension.py": [],
    "test_verification.py": [],
    "utils.py": [],
    "callbacks\\base.py": [
      {
        "name": "CallbackBase",
        "line": 12,
        "docstring": "Abstract base class for all callbacks.",
        "methods": [
          {
            "name": "__init__",
            "line": 15,
            "docstring": null,
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "register",
            "line": 21,
            "docstring": "Register this callback with the Dash app.",
            "complexity": 1,
            "is_property": false
          }
        ],
        "bases": [
          "ABC"
        ]
      },
      {
        "name": "FileUploadCallbackBase",
        "line": 26,
        "docstring": "Base class for file upload related callbacks.",
        "methods": [
          {
            "name": "__init__",
            "line": 29,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          }
        ],
        "bases": [
          "CallbackBase"
        ]
      },
      {
        "name": "MapInteractionCallbackBase",
        "line": 33,
        "docstring": "Base class for map interaction callbacks.",
        "methods": [
          {
            "name": "__init__",
            "line": 36,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          }
        ],
        "bases": [
          "CallbackBase"
        ]
      },
      {
        "name": "PlotGenerationCallbackBase",
        "line": 40,
        "docstring": "Base class for plot generation callbacks.",
        "methods": [
          {
            "name": "__init__",
            "line": 43,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          }
        ],
        "bases": [
          "CallbackBase"
        ]
      },
      {
        "name": "SearchCallbackBase",
        "line": 47,
        "docstring": "Base class for search functionality callbacks.",
        "methods": [
          {
            "name": "__init__",
            "line": 50,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          }
        ],
        "bases": [
          "CallbackBase"
        ]
      },
      {
        "name": "MarkerHandlingCallbackBase",
        "line": 54,
        "docstring": "Base class for marker handling callbacks.",
        "methods": [
          {
            "name": "__init__",
            "line": 57,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          }
        ],
        "bases": [
          "CallbackBase"
        ]
      }
    ],
    "callbacks\\file_upload.py": [
      {
        "name": "FileUploadCallback",
        "line": 27,
        "docstring": "Main file upload processing callback.",
        "methods": [
          {
            "name": "__init__",
            "line": 30,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "register",
            "line": 33,
            "docstring": "Register the file upload callback.",
            "complexity": 6,
            "is_property": false
          },
          {
            "name": "_process_upload",
            "line": 79,
            "docstring": "Process the uploaded files and return results.",
            "complexity": 6,
            "is_property": false
          },
          {
            "name": "_validate_total_upload_size",
            "line": 155,
            "docstring": "Validate total upload size.",
            "complexity": 4,
            "is_property": false
          },
          {
            "name": "_validate_file_size",
            "line": 180,
            "docstring": "Validate individual file size.",
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "_process_files",
            "line": 197,
            "docstring": "Process individual uploaded files.",
            "complexity": 5,
            "is_property": false
          },
          {
            "name": "_create_markers",
            "line": 264,
            "docstring": "Create map markers from borehole data.",
            "complexity": 9,
            "is_property": false
          },
          {
            "name": "_calculate_optimal_view",
            "line": 366,
            "docstring": "Calculate optimal map center and zoom from coordinates.",
            "complexity": 6,
            "is_property": false
          },
          {
            "name": "_update_app_state",
            "line": 399,
            "docstring": "Update the centralized application state.",
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "_format_depth_value",
            "line": 421,
            "docstring": "Format depth values for display.",
            "complexity": 5,
            "is_property": false
          },
          {
            "name": "_add_upload_summary",
            "line": 432,
            "docstring": "Add upload summary to file status.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "_add_file_breakdown",
            "line": 460,
            "docstring": "Add file breakdown information.",
            "complexity": 4,
            "is_property": false
          },
          {
            "name": "_create_error_message",
            "line": 487,
            "docstring": "Create standardized error message.",
            "complexity": 2,
            "is_property": false
          }
        ],
        "bases": [
          "FileUploadCallbackBase"
        ]
      }
    ],
    "callbacks\\map_interactions.py": [
      {
        "name": "MapInteractionCallback",
        "line": 36,
        "docstring": "Main map interaction callback handling drawing, selection, and updates.",
        "methods": [
          {
            "name": "__init__",
            "line": 39,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "register",
            "line": 42,
            "docstring": "Register the map interaction callback.",
            "complexity": 6,
            "is_property": false
          },
          {
            "name": "_get_trigger",
            "line": 124,
            "docstring": "Get the name of the triggered input.",
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "_is_drawing_trigger",
            "line": 131,
            "docstring": "Check if this is a drawing trigger.",
            "complexity": 4,
            "is_property": false
          },
          {
            "name": "_is_checkbox_trigger",
            "line": 139,
            "docstring": "Check if this is a checkbox trigger.",
            "complexity": 3,
            "is_property": false
          },
          {
            "name": "_is_buffer_trigger",
            "line": 143,
            "docstring": "Check if this is a buffer update trigger.",
            "complexity": 4,
            "is_property": false
          },
          {
            "name": "_empty_response",
            "line": 153,
            "docstring": "Return empty response when no action is needed.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "_handle_shape_drawing",
            "line": 166,
            "docstring": "Handle shape drawing and borehole selection.",
            "complexity": 3,
            "is_property": false
          },
          {
            "name": "_handle_polyline_selection",
            "line": 201,
            "docstring": "Handle polyline selection with buffer.",
            "complexity": 6,
            "is_property": false
          },
          {
            "name": "_handle_polygon_selection",
            "line": 272,
            "docstring": "Handle polygon/rectangle selection.",
            "complexity": 5,
            "is_property": false
          },
          {
            "name": "_handle_checkbox_selection",
            "line": 326,
            "docstring": "Handle checkbox selection changes.",
            "complexity": 5,
            "is_property": false
          },
          {
            "name": "_handle_buffer_update",
            "line": 383,
            "docstring": "Handle buffer distance update.",
            "complexity": 4,
            "is_property": false
          },
          {
            "name": "_calculate_pca_line",
            "line": 431,
            "docstring": "Calculate and create PCA line for display.",
            "complexity": 3,
            "is_property": false
          },
          {
            "name": "_create_checkbox_grid",
            "line": 480,
            "docstring": "Create checkbox grid for borehole selection.",
            "complexity": 3,
            "is_property": false
          },
          {
            "name": "_update_marker_colors",
            "line": 508,
            "docstring": "Update marker colors based on selection using lazy loading.",
            "complexity": 3,
            "is_property": false
          },
          {
            "name": "_update_marker_colors_fallback",
            "line": 544,
            "docstring": "Fallback marker update method (original implementation).",
            "complexity": 5,
            "is_property": false
          },
          {
            "name": "_format_depth_value",
            "line": 603,
            "docstring": "Format depth values for display.",
            "complexity": 5,
            "is_property": false
          },
          {
            "name": "_success_response",
            "line": 614,
            "docstring": "Create a successful response tuple.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "_error_response",
            "line": 648,
            "docstring": "Create an error response tuple.",
            "complexity": 1,
            "is_property": false
          }
        ],
        "bases": [
          "MapInteractionCallbackBase"
        ]
      }
    ],
    "callbacks\\marker_handling.py": [
      {
        "name": "MarkerHandlingCallback",
        "line": 27,
        "docstring": "Handles borehole marker interactions and click functionality.",
        "methods": [
          {
            "name": "__init__",
            "line": 30,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "register",
            "line": 40,
            "docstring": "Register all marker handling callbacks with the Dash app.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "_register_marker_click_callback",
            "line": 45,
            "docstring": "Register callback to handle marker clicks.",
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "_handle_marker_click_logic",
            "line": 85,
            "docstring": "Core logic for handling marker clicks.",
            "complexity": 8,
            "is_property": false
          },
          {
            "name": "_find_clicked_marker_index",
            "line": 134,
            "docstring": "Find which marker was clicked based on click counts.",
            "complexity": 4,
            "is_property": false
          },
          {
            "name": "_generate_borehole_log_display",
            "line": 146,
            "docstring": "Generate the borehole log display for the selected borehole.",
            "complexity": 6,
            "is_property": false
          },
          {
            "name": "_create_borehole_log_html",
            "line": 187,
            "docstring": "Create HTML display for borehole log images.",
            "complexity": 3,
            "is_property": false
          },
          {
            "name": "_update_marker_colors",
            "line": 244,
            "docstring": "Update marker colors - make clicked marker green, others blue.",
            "complexity": 8,
            "is_property": false
          },
          {
            "name": "create_selection_shape_visual",
            "line": 276,
            "docstring": "Create a visual representation of a drawn selection shape for display.",
            "complexity": 13,
            "is_property": false
          }
        ],
        "bases": [
          "MarkerHandlingCallbackBase"
        ]
      }
    ],
    "callbacks\\plot_generation.py": [
      {
        "name": "PlotGenerationCallback",
        "line": 32,
        "docstring": "Handles plot generation and download functionality.",
        "methods": [
          {
            "name": "__init__",
            "line": 35,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "register",
            "line": 42,
            "docstring": "Register all plot generation callbacks with the Dash app.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "_register_plot_generation_callback",
            "line": 49,
            "docstring": "Register the main plot generation callback.",
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "_handle_plot_generation_logic",
            "line": 90,
            "docstring": "Core logic for plot generation.",
            "complexity": 7,
            "is_property": false
          },
          {
            "name": "_process_polyline_data",
            "line": 131,
            "docstring": "Process polyline data for section generation.",
            "complexity": 6,
            "is_property": false
          },
          {
            "name": "_process_plot_figure",
            "line": 177,
            "docstring": "Process the matplotlib figure into display and download formats.",
            "complexity": 3,
            "is_property": false
          },
          {
            "name": "_register_shape_clearing_callback",
            "line": 216,
            "docstring": "Register callback to explicitly clear shapes.",
            "complexity": 4,
            "is_property": false
          },
          {
            "name": "_register_map_update_clientside_callback",
            "line": 234,
            "docstring": "Register client-side callback for map updates on initial load.",
            "complexity": 1,
            "is_property": false
          }
        ],
        "bases": [
          "PlotGenerationCallbackBase"
        ]
      }
    ],
    "callbacks\\search_functionality.py": [
      {
        "name": "SearchFunctionalityCallback",
        "line": 26,
        "docstring": "Handles borehole search and navigation functionality.",
        "methods": [
          {
            "name": "__init__",
            "line": 29,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "register",
            "line": 36,
            "docstring": "Register all search-related callbacks with the Dash app.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "_register_search_dropdown_callback",
            "line": 43,
            "docstring": "Register callback to update search dropdown options.",
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "_update_search_dropdown_logic",
            "line": 66,
            "docstring": "Core logic for updating search dropdown.",
            "complexity": 12,
            "is_property": false
          },
          {
            "name": "_register_search_button_toggle_callback",
            "line": 125,
            "docstring": "Register callback to toggle search button state.",
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "_register_search_go_callback",
            "line": 140,
            "docstring": "Register the main search go functionality callback.",
            "complexity": 4,
            "is_property": false
          },
          {
            "name": "_handle_search_go_logic",
            "line": 200,
            "docstring": "Core logic for handling search go functionality.",
            "complexity": 7,
            "is_property": false
          },
          {
            "name": "_generate_borehole_log",
            "line": 285,
            "docstring": "Generate borehole log for the selected borehole.",
            "complexity": 6,
            "is_property": false
          }
        ],
        "bases": [
          "SearchCallbackBase"
        ]
      }
    ],
    "callbacks\\__init__.py": [
      {
        "name": "CallbackManager",
        "line": 37,
        "docstring": "Manages registration and organization of all callbacks.",
        "methods": [
          {
            "name": "__init__",
            "line": 40,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "add_callback",
            "line": 44,
            "docstring": "Add a callback to the manager.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "register_all",
            "line": 49,
            "docstring": "Register all callbacks with the Dash app.",
            "complexity": 3,
            "is_property": false
          },
          {
            "name": "get_callback_summary",
            "line": 59,
            "docstring": "Get a summary of registered callbacks.",
            "complexity": 4,
            "is_property": false
          }
        ],
        "bases": []
      }
    ],
    "old_streamlit_files\\app.py": [],
    "old_streamlit_files\\borehole_log.py": [],
    "old_streamlit_files\\borehole_selection.py": [],
    "old_streamlit_files\\config.py": [],
    "old_streamlit_files\\data_loader.py": [],
    "old_streamlit_files\\map_render.py": [],
    "old_streamlit_files\\map_utils.py": [],
    "old_streamlit_files\\section_logic.py": [],
    "old_streamlit_files\\section_plot.py": [],
    "old_streamlit_files\\utils.py": [],
    "state_management\\app_state.py": [
      {
        "name": "AppState",
        "line": 25,
        "docstring": "Centralized application state manager.\n\nThis class provides a single source of truth for all application state,\nwith proper synchronization and change tracking.",
        "methods": [
          {
            "name": "__init__",
            "line": 33,
            "docstring": null,
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "borehole_data",
            "line": 46,
            "docstring": "Get borehole data state.",
            "complexity": 1,
            "is_property": true
          },
          {
            "name": "map_state",
            "line": 51,
            "docstring": "Get map state.",
            "complexity": 1,
            "is_property": true
          },
          {
            "name": "selection_state",
            "line": 56,
            "docstring": "Get selection state.",
            "complexity": 1,
            "is_property": true
          },
          {
            "name": "plot_state",
            "line": 61,
            "docstring": "Get plot state.",
            "complexity": 1,
            "is_property": true
          },
          {
            "name": "upload_state",
            "line": 66,
            "docstring": "Get upload state.",
            "complexity": 1,
            "is_property": true
          },
          {
            "name": "get_state_version",
            "line": 70,
            "docstring": "Get current state version for change tracking.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "update_borehole_data",
            "line": 75,
            "docstring": "Update borehole data and increment state version.",
            "complexity": 3,
            "is_property": false
          },
          {
            "name": "update_map_state",
            "line": 88,
            "docstring": "Update map state and increment state version.",
            "complexity": 3,
            "is_property": false
          },
          {
            "name": "update_selection_state",
            "line": 100,
            "docstring": "Update selection state and increment state version.",
            "complexity": 3,
            "is_property": false
          },
          {
            "name": "update_plot_state",
            "line": 113,
            "docstring": "Update plot state and increment state version.",
            "complexity": 3,
            "is_property": false
          },
          {
            "name": "update_upload_state",
            "line": 125,
            "docstring": "Update upload state and increment state version.",
            "complexity": 3,
            "is_property": false
          },
          {
            "name": "clear_all_state",
            "line": 137,
            "docstring": "Clear all application state.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "get_state_summary",
            "line": 148,
            "docstring": "Get a summary of current state for debugging.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "add_change_listener",
            "line": 162,
            "docstring": "Add a callback to be notified of state changes.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "remove_change_listener",
            "line": 167,
            "docstring": "Remove a change listener.",
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "_increment_version",
            "line": 173,
            "docstring": "Increment state version and notify listeners.",
            "complexity": 3,
            "is_property": false
          },
          {
            "name": "to_dash_store_format",
            "line": 182,
            "docstring": "Convert state to format suitable for Dash Store components.\n\nThis maintains compatibility with existing callback patterns\nwhile providing centralized state management.",
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "from_dash_store_format",
            "line": 210,
            "docstring": "Update state from Dash Store format.\n\nThis allows backwards compatibility with existing Dash Store patterns.",
            "complexity": 14,
            "is_property": false
          }
        ],
        "bases": []
      }
    ],
    "state_management\\state_models.py": [
      {
        "name": "BoreholeData",
        "line": 16,
        "docstring": "Model for borehole data management.",
        "methods": [
          {
            "name": "is_loaded",
            "line": 26,
            "docstring": "Check if borehole data is loaded.",
            "complexity": 2,
            "is_property": true
          },
          {
            "name": "get_borehole_count",
            "line": 30,
            "docstring": "Get the number of loaded boreholes.",
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "get_borehole_by_id",
            "line": 36,
            "docstring": "Get a specific borehole by ID.",
            "complexity": 3,
            "is_property": false
          }
        ],
        "bases": []
      },
      {
        "name": "MapState",
        "line": 48,
        "docstring": "Model for map-related state.",
        "methods": [
          {
            "name": "update_center",
            "line": 57,
            "docstring": "Update map center and optionally zoom.",
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "set_bounds_from_coordinates",
            "line": 64,
            "docstring": "Calculate and set bounds from a list of coordinates.",
            "complexity": 4,
            "is_property": false
          }
        ],
        "bases": []
      },
      {
        "name": "SelectionState",
        "line": 76,
        "docstring": "Model for borehole selection state.",
        "methods": [
          {
            "name": "clear_selection",
            "line": 87,
            "docstring": "Clear all selection state.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "update_selection",
            "line": 96,
            "docstring": "Update the current selection.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "add_polyline_selection",
            "line": 102,
            "docstring": "Add a polyline-based selection.",
            "complexity": 1,
            "is_property": false
          }
        ],
        "bases": []
      },
      {
        "name": "PlotState",
        "line": 118,
        "docstring": "Model for plot generation state.",
        "methods": [
          {
            "name": "start_generation",
            "line": 128,
            "docstring": "Mark plot generation as in progress.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "complete_generation",
            "line": 133,
            "docstring": "Mark plot generation as complete.",
            "complexity": 2,
            "is_property": false
          },
          {
            "name": "clear_plots",
            "line": 140,
            "docstring": "Clear all generated plots.",
            "complexity": 1,
            "is_property": false
          }
        ],
        "bases": []
      },
      {
        "name": "UploadState",
        "line": 148,
        "docstring": "Model for file upload state.",
        "methods": [
          {
            "name": "start_upload",
            "line": 157,
            "docstring": "Mark upload as in progress.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "complete_upload",
            "line": 162,
            "docstring": "Mark upload as complete.",
            "complexity": 1,
            "is_property": false
          },
          {
            "name": "clear_upload",
            "line": 172,
            "docstring": "Clear upload state.",
            "complexity": 1,
            "is_property": false
          }
        ],
        "bases": []
      }
    ],
    "state_management\\__init__.py": []
  },
  "imports": {
    "analyze_codebase.py": [
      "datetime",
      "json",
      "pathlib",
      "importlib",
      "re",
      "os",
      "collections",
      "ast"
    ],
    "analyze_debug_log.py": [
      "datetime",
      "re",
      "json",
      "collections"
    ],
    "app.py": [
      "datetime",
      "webbrowser",
      "config",
      "dash",
      "sys",
      "logging",
      "dash_leaflet",
      "callbacks_split",
      "app_factory"
    ],
    "app_constants.py": [],
    "app_factory.py": [
      "dash"
    ],
    "borehole_log_professional.py": [
      "base64",
      "typing",
      "pandas",
      "matplotlib",
      "geology_code_utils",
      "logging",
      "io",
      "numpy",
      "section_plot_professional",
      "contextlib",
      "textwrap",
      "csv"
    ],
    "callbacks_split.py": [
      "base64",
      "dash",
      "loading_indicators",
      "io",
      "coordinate_service",
      "polyline_utils",
      "config",
      "memory_manager",
      "matplotlib",
      "statistics",
      "map_utils",
      "borehole_log_professional",
      "datetime",
      "sklearn",
      "dataframe_optimizer",
      "numpy",
      "app_constants",
      "traceback",
      "data_loader",
      "pandas",
      "logging",
      "dash_leaflet",
      "section_plot_professional"
    ],
    "comprehensive_optimization_validation.py": [
      "dataframe_optimizer",
      "memory_manager",
      "sys",
      "pandas",
      "matplotlib",
      "io",
      "logging",
      "enhanced_error_handling",
      "numpy",
      "traceback",
      "coordinate_service",
      "time"
    ],
    "config.py": [],
    "coordinate_service.py": [
      "pyproj",
      "typing",
      "pandas",
      "functools",
      "logging",
      "numpy"
    ],
    "dataframe_optimizer.py": [
      "typing",
      "pandas",
      "logging",
      "numpy"
    ],
    "data_loader.py": [
      "pandas",
      "os",
      "csv"
    ],
    "debug_module.py": [
      "typing",
      "pandas",
      "geology_code_utils",
      "matplotlib",
      "logging"
    ],
    "debug_offset_layout.py": [
      "borehole_log_professional",
      "traceback",
      "logging",
      "sys"
    ],
    "enhanced_error_handling.py": [
      "typing",
      "enum",
      "data_loader",
      "dataclasses",
      "functools",
      "logging",
      "coordinate_service",
      "time"
    ],
    "error_handling.py": [
      "datetime",
      "typing",
      "dash",
      "enum",
      "dataclasses",
      "logging",
      "traceback"
    ],
    "error_recovery.py": [
      "typing",
      "functools",
      "logging",
      "app_constants",
      "contextlib",
      "traceback",
      "time"
    ],
    "generate_dependency_graph.py": [
      "pathlib",
      "os",
      "sys",
      "subprocess",
      "glob",
      "ast"
    ],
    "generate_flowchart_data.py": [
      "datetime",
      "json",
      "pathlib",
      "importlib",
      "re",
      "os",
      "subprocess",
      "collections",
      "networkx",
      "ast"
    ],
    "geology_code_utils.py": [
      "os",
      "csv"
    ],
    "health_check.py": [
      "psutil",
      "datetime",
      "typing",
      "platform",
      "os",
      "sys",
      "logging",
      "error_recovery",
      "app_constants",
      "traceback",
      "coordinate_service",
      "time"
    ],
    "lazy_marker_manager.py": [
      "typing",
      "dataclasses",
      "pandas",
      "logging",
      "dash_leaflet"
    ],
    "loading_indicators.py": [
      "typing",
      "dash",
      "app_constants",
      "time"
    ],
    "map_utils.py": [
      "pandas",
      "logging",
      "shapely",
      "pyproj"
    ],
    "memory_manager.py": [
      "psutil",
      "datetime",
      "gc",
      "typing",
      "sys",
      "dataclasses",
      "pandas",
      "lazy_marker_manager",
      "logging",
      "coordinate_service"
    ],
    "optimization_baseline_test.py": [
      "json",
      "pandas",
      "matplotlib",
      "io",
      "logging",
      "callbacks_split",
      "numpy",
      "tracemalloc",
      "coordinate_service",
      "time"
    ],
    "polyline_utils.py": [
      "shapely",
      "pyproj",
      "pandas",
      "logging",
      "dash_leaflet",
      "numpy",
      "coordinate_service"
    ],
    "section_plot_professional.py": [
      "shapely",
      "pyproj",
      "re",
      "pandas",
      "geology_code_utils",
      "matplotlib",
      "numpy",
      "csv"
    ],
    "test_ags_integration.py": [
      "borehole_log_professional"
    ],
    "test_alignment.py": [
      "base64",
      "pandas",
      "logging",
      "traceback",
      "borehole_log_professional"
    ],
    "test_callback_refactoring_comprehensive.py": [
      "sys",
      "logging",
      "state_management",
      "traceback",
      "coordinate_service",
      "error_handling",
      "callbacks"
    ],
    "test_cascading.py": [
      "pandas",
      "base64",
      "borehole_log_professional"
    ],
    "test_column_width_diagnostic.py": [],
    "test_comprehensive_text_boxes.py": [
      "pandas",
      "borehole_log_professional",
      "base64",
      "logging"
    ],
    "test_coordinate_service.py": [
      "os",
      "sys",
      "logging",
      "callbacks_split",
      "numpy",
      "coordinate_service"
    ],
    "test_enhanced_text_boxes.py": [
      "pandas",
      "borehole_log_professional",
      "traceback",
      "logging"
    ],
    "test_forced_overlap.py": [
      "pandas",
      "base64",
      "borehole_log_professional"
    ],
    "test_implementation_validation.py": [
      "error_recovery",
      "health_check",
      "typing",
      "os",
      "loading_indicators",
      "sys",
      "logging",
      "callbacks_split",
      "coordinate_service",
      "app_constants",
      "traceback",
      "borehole_log_professional",
      "time"
    ],
    "test_layer_order.py": [
      "base64",
      "pandas",
      "logging",
      "traceback",
      "borehole_log_professional"
    ],
    "test_legend_mapping.py": [
      "pandas",
      "geology_code_utils",
      "borehole_log_professional"
    ],
    "test_optimizations.py": [
      "importlib",
      "memory_manager",
      "os",
      "sys",
      "pandas",
      "lazy_marker_manager",
      "numpy",
      "traceback",
      "coordinate_service"
    ],
    "test_overflow.py": [],
    "test_overflow_management.py": [
      "base64",
      "pandas",
      "logging",
      "traceback",
      "borehole_log_professional"
    ],
    "test_pushdown_extension.py": [
      "base64",
      "pandas",
      "logging",
      "traceback",
      "borehole_log_professional"
    ],
    "test_refactoring_validation.py": [
      "pytest",
      "unittest",
      "numpy",
      "pandas",
      "logging",
      "state_management",
      "traceback",
      "coordinate_service",
      "error_handling",
      "callbacks"
    ],
    "test_short_text_alignment.py": [],
    "test_text_boxes.py": [
      "base64",
      "pandas",
      "logging",
      "traceback",
      "borehole_log_professional"
    ],
    "test_text_box_extension.py": [
      "base64",
      "pandas",
      "logging",
      "traceback",
      "borehole_log_professional"
    ],
    "test_verification.py": [
      "base64",
      "pandas",
      "logging",
      "traceback",
      "borehole_log_professional"
    ],
    "utils.py": [],
    "callbacks\\base.py": [
      "abc",
      "logging"
    ],
    "callbacks\\file_upload.py": [
      "datetime",
      "base64",
      "config",
      "typing",
      "dash",
      "data_loader",
      "pandas",
      "statistics",
      "logging",
      "state_management",
      "dash_leaflet",
      "app_constants",
      "base",
      "coordinate_service",
      "error_handling"
    ],
    "callbacks\\map_interactions.py": [
      "datetime",
      "polyline_utils",
      "state_management",
      "sklearn",
      "config",
      "typing",
      "dash",
      "pandas",
      "lazy_marker_manager",
      "logging",
      "dash_leaflet",
      "map_utils",
      "app_constants",
      "base",
      "coordinate_service",
      "error_handling"
    ],
    "callbacks\\marker_handling.py": [
      "dash",
      "pandas",
      "logging",
      "dash_leaflet",
      "state_management",
      "app_constants",
      "base",
      "borehole_log_professional",
      "error_handling"
    ],
    "callbacks\\plot_generation.py": [
      "datetime",
      "base64",
      "config",
      "shapely",
      "dash",
      "pandas",
      "io",
      "matplotlib",
      "logging",
      "section_plot_professional",
      "state_management",
      "app_constants",
      "base",
      "coordinate_service",
      "error_handling"
    ],
    "callbacks\\search_functionality.py": [
      "config",
      "dash",
      "pandas",
      "borehole_log_professional",
      "logging",
      "state_management",
      "base",
      "coordinate_service",
      "error_handling"
    ],
    "callbacks\\__init__.py": [
      "map_interactions",
      "typing",
      "file_upload",
      "plot_generation",
      "marker_handling",
      "logging",
      "search_functionality",
      "base"
    ],
    "old_streamlit_files\\app.py": [
      "borehole_selection",
      "config",
      "json",
      "borehole_log",
      "pyproj",
      "data_loader",
      "map_render",
      "numpy",
      "streamlit",
      "section_logic",
      "pandas",
      "io",
      "map_utils",
      "streamlit_folium"
    ],
    "old_streamlit_files\\borehole_log.py": [
      "config",
      "section_plot",
      "os",
      "streamlit",
      "matplotlib",
      "tempfile",
      "numpy"
    ],
    "old_streamlit_files\\borehole_selection.py": [
      "streamlit"
    ],
    "old_streamlit_files\\config.py": [],
    "old_streamlit_files\\data_loader.py": [
      "pandas",
      "os",
      "csv",
      "utils"
    ],
    "old_streamlit_files\\map_render.py": [
      "shapely",
      "sklearn",
      "folium",
      "pyproj",
      "streamlit",
      "math",
      "pandas",
      "numpy"
    ],
    "old_streamlit_files\\map_utils.py": [
      "pandas",
      "shapely",
      "pyproj"
    ],
    "old_streamlit_files\\section_logic.py": [
      "sklearn",
      "pyproj",
      "section_plot",
      "os",
      "streamlit",
      "tempfile"
    ],
    "old_streamlit_files\\section_plot.py": [
      "config",
      "shapely",
      "re",
      "os",
      "pandas",
      "matplotlib",
      "numpy",
      "contextlib",
      "traceback",
      "csv"
    ],
    "old_streamlit_files\\utils.py": [
      "pyproj",
      "os",
      "streamlit",
      "math",
      "matplotlib"
    ],
    "state_management\\app_state.py": [
      "datetime",
      "state_models",
      "typing",
      "pandas",
      "logging",
      "threading"
    ],
    "state_management\\state_models.py": [
      "dataclasses",
      "pandas",
      "datetime",
      "typing"
    ],
    "state_management\\__init__.py": [
      "app_state",
      "state_models"
    ]
  },
  "dependencies": {
    "app.py": [
      "app_factory.py",
      "callbacks_split.py",
      "config.py"
    ],
    "borehole_log_professional.py": [
      "geology_code_utils.py",
      "section_plot_professional.py"
    ],
    "callbacks_split.py": [
      "loading_indicators.py",
      "map_utils.py",
      "app_constants.py",
      "data_loader.py",
      "memory_manager.py",
      "coordinate_service.py",
      "dataframe_optimizer.py",
      "section_plot_professional.py",
      "config.py",
      "borehole_log_professional.py",
      "polyline_utils.py"
    ],
    "comprehensive_optimization_validation.py": [
      "memory_manager.py",
      "dataframe_optimizer.py",
      "enhanced_error_handling.py",
      "coordinate_service.py"
    ],
    "debug_module.py": [
      "geology_code_utils.py"
    ],
    "debug_offset_layout.py": [
      "borehole_log_professional.py"
    ],
    "enhanced_error_handling.py": [
      "coordinate_service.py",
      "data_loader.py"
    ],
    "error_recovery.py": [
      "app_constants.py"
    ],
    "health_check.py": [
      "error_recovery.py",
      "app_constants.py",
      "coordinate_service.py"
    ],
    "loading_indicators.py": [
      "app_constants.py"
    ],
    "memory_manager.py": [
      "lazy_marker_manager.py",
      "coordinate_service.py"
    ],
    "optimization_baseline_test.py": [
      "coordinate_service.py",
      "callbacks_split.py"
    ],
    "polyline_utils.py": [
      "coordinate_service.py"
    ],
    "section_plot_professional.py": [
      "geology_code_utils.py"
    ],
    "test_ags_integration.py": [
      "borehole_log_professional.py"
    ],
    "test_alignment.py": [
      "borehole_log_professional.py"
    ],
    "test_callback_refactoring_comprehensive.py": [
      "callbacks/__init__.py",
      "coordinate_service.py",
      "state_management/__init__.py",
      "error_handling.py"
    ],
    "test_cascading.py": [
      "borehole_log_professional.py"
    ],
    "test_comprehensive_text_boxes.py": [
      "borehole_log_professional.py"
    ],
    "test_coordinate_service.py": [
      "coordinate_service.py",
      "callbacks_split.py"
    ],
    "test_enhanced_text_boxes.py": [
      "borehole_log_professional.py"
    ],
    "test_forced_overlap.py": [
      "borehole_log_professional.py"
    ],
    "test_implementation_validation.py": [
      "health_check.py",
      "loading_indicators.py",
      "error_recovery.py",
      "app_constants.py",
      "coordinate_service.py",
      "callbacks_split.py",
      "borehole_log_professional.py"
    ],
    "test_layer_order.py": [
      "borehole_log_professional.py"
    ],
    "test_legend_mapping.py": [
      "geology_code_utils.py",
      "borehole_log_professional.py"
    ],
    "test_optimizations.py": [
      "memory_manager.py",
      "lazy_marker_manager.py",
      "coordinate_service.py"
    ],
    "test_overflow_management.py": [
      "borehole_log_professional.py"
    ],
    "test_pushdown_extension.py": [
      "borehole_log_professional.py"
    ],
    "test_refactoring_validation.py": [
      "callbacks/__init__.py",
      "coordinate_service.py",
      "state_management/__init__.py",
      "error_handling.py"
    ],
    "test_text_boxes.py": [
      "borehole_log_professional.py"
    ],
    "test_text_box_extension.py": [
      "borehole_log_professional.py"
    ],
    "test_verification.py": [
      "borehole_log_professional.py"
    ],
    "callbacks\\file_upload.py": [
      "app_constants.py",
      "data_loader.py",
      "error_handling.py",
      "coordinate_service.py",
      "state_management/__init__.py",
      "config.py"
    ],
    "callbacks\\map_interactions.py": [
      "map_utils.py",
      "app_constants.py",
      "error_handling.py",
      "coordinate_service.py",
      "state_management/__init__.py",
      "config.py",
      "lazy_marker_manager.py",
      "polyline_utils.py"
    ],
    "callbacks\\marker_handling.py": [
      "app_constants.py",
      "borehole_log_professional.py",
      "state_management/__init__.py",
      "error_handling.py"
    ],
    "callbacks\\plot_generation.py": [
      "app_constants.py",
      "error_handling.py",
      "section_plot_professional.py",
      "coordinate_service.py",
      "state_management/__init__.py",
      "config.py"
    ],
    "callbacks\\search_functionality.py": [
      "error_handling.py",
      "coordinate_service.py",
      "state_management/__init__.py",
      "config.py",
      "borehole_log_professional.py"
    ],
    "old_streamlit_files\\app.py": [
      "map_utils.py",
      "config.py",
      "data_loader.py"
    ],
    "old_streamlit_files\\borehole_log.py": [
      "config.py"
    ],
    "old_streamlit_files\\data_loader.py": [
      "utils.py"
    ],
    "old_streamlit_files\\section_plot.py": [
      "config.py"
    ]
  },
  "function_calls": {
    "analyze_codebase.py": [
      {
        "function": "main",
        "calls": "CodeAnalyzer",
        "line": 221
      },
      {
        "function": "main",
        "calls": "print",
        "line": 221
      },
      {
        "function": "main",
        "calls": "analyze_project",
        "line": 221
      },
      {
        "function": "main",
        "calls": "generate_analysis_report",
        "line": 221
      },
      {
        "function": "main",
        "calls": "save_analysis",
        "line": 221
      },
      {
        "function": "main",
        "calls": "Path",
        "line": 221
      },
      {
        "function": "__init__",
        "calls": "Path",
        "line": 23
      },
      {
        "function": "__init__",
        "calls": "defaultdict",
        "line": 23
      },
      {
        "function": "__init__",
        "calls": "defaultdict",
        "line": 23
      },
      {
        "function": "__init__",
        "calls": "defaultdict",
        "line": 23
      },
      {
        "function": "__init__",
        "calls": "defaultdict",
        "line": 23
      },
      {
        "function": "extract_imports",
        "calls": "parse",
        "line": 41
      },
      {
        "function": "extract_imports",
        "calls": "set",
        "line": 41
      },
      {
        "function": "extract_imports",
        "calls": "walk",
        "line": 41
      },
      {
        "function": "extract_imports",
        "calls": "isinstance",
        "line": 41
      },
      {
        "function": "extract_imports",
        "calls": "print",
        "line": 41
      },
      {
        "function": "extract_imports",
        "calls": "set",
        "line": 41
      },
      {
        "function": "extract_imports",
        "calls": "isinstance",
        "line": 41
      },
      {
        "function": "extract_imports",
        "calls": "add",
        "line": 41
      },
      {
        "function": "extract_imports",
        "calls": "add",
        "line": 41
      },
      {
        "function": "extract_imports",
        "calls": "split",
        "line": 41
      },
      {
        "function": "extract_imports",
        "calls": "split",
        "line": 41
      },
      {
        "function": "extract_functions_and_classes",
        "calls": "parse",
        "line": 60
      },
      {
        "function": "extract_functions_and_classes",
        "calls": "walk",
        "line": 60
      },
      {
        "function": "extract_functions_and_classes",
        "calls": "isinstance",
        "line": 60
      },
      {
        "function": "extract_functions_and_classes",
        "calls": "print",
        "line": 60
      },
      {
        "function": "extract_functions_and_classes",
        "calls": "append",
        "line": 60
      },
      {
        "function": "extract_functions_and_classes",
        "calls": "isinstance",
        "line": 60
      },
      {
        "function": "extract_functions_and_classes",
        "calls": "append",
        "line": 60
      },
      {
        "function": "extract_functions_and_classes",
        "calls": "get_docstring",
        "line": 60
      },
      {
        "function": "extract_functions_and_classes",
        "calls": "isinstance",
        "line": 60
      },
      {
        "function": "extract_functions_and_classes",
        "calls": "append",
        "line": 60
      },
      {
        "function": "extract_functions_and_classes",
        "calls": "get_docstring",
        "line": 60
      },
      {
        "function": "extract_functions_and_classes",
        "calls": "get_docstring",
        "line": 60
      },
      {
        "function": "get_file_info",
        "calls": "stat",
        "line": 97
      },
      {
        "function": "get_file_info",
        "calls": "len",
        "line": 97
      },
      {
        "function": "get_file_info",
        "calls": "open",
        "line": 97
      },
      {
        "function": "get_file_info",
        "calls": "read",
        "line": 97
      },
      {
        "function": "get_file_info",
        "calls": "splitlines",
        "line": 97
      },
      {
        "function": "get_file_info",
        "calls": "count",
        "line": 97
      },
      {
        "function": "get_file_info",
        "calls": "str",
        "line": 97
      },
      {
        "function": "get_file_info",
        "calls": "print",
        "line": 97
      },
      {
        "function": "get_file_info",
        "calls": "count",
        "line": 97
      },
      {
        "function": "get_file_info",
        "calls": "relative_to",
        "line": 97
      },
      {
        "function": "get_file_info",
        "calls": "count",
        "line": 97
      },
      {
        "function": "get_file_info",
        "calls": "count",
        "line": 97
      },
      {
        "function": "get_file_info",
        "calls": "len",
        "line": 97
      },
      {
        "function": "analyze_file",
        "calls": "get_file_info",
        "line": 122
      },
      {
        "function": "analyze_file",
        "calls": "relative_to",
        "line": 122
      },
      {
        "function": "analyze_file",
        "calls": "extract_imports",
        "line": 122
      },
      {
        "function": "analyze_file",
        "calls": "extract_functions_and_classes",
        "line": 122
      },
      {
        "function": "analyze_file",
        "calls": "open",
        "line": 122
      },
      {
        "function": "analyze_file",
        "calls": "read",
        "line": 122
      },
      {
        "function": "analyze_file",
        "calls": "str",
        "line": 122
      },
      {
        "function": "analyze_file",
        "calls": "str",
        "line": 122
      },
      {
        "function": "analyze_file",
        "calls": "str",
        "line": 122
      },
      {
        "function": "analyze_file",
        "calls": "str",
        "line": 122
      },
      {
        "function": "analyze_file",
        "calls": "exists",
        "line": 122
      },
      {
        "function": "analyze_file",
        "calls": "print",
        "line": 122
      },
      {
        "function": "analyze_file",
        "calls": "add",
        "line": 122
      },
      {
        "function": "analyze_file",
        "calls": "str",
        "line": 122
      },
      {
        "function": "analyze_project",
        "calls": "print",
        "line": 155
      },
      {
        "function": "analyze_project",
        "calls": "walk",
        "line": 155
      },
      {
        "function": "analyze_project",
        "calls": "should_analyze_file",
        "line": 155
      },
      {
        "function": "analyze_project",
        "calls": "Path",
        "line": 155
      },
      {
        "function": "analyze_project",
        "calls": "print",
        "line": 155
      },
      {
        "function": "analyze_project",
        "calls": "analyze_file",
        "line": 155
      },
      {
        "function": "analyze_project",
        "calls": "relative_to",
        "line": 155
      },
      {
        "function": "generate_analysis_report",
        "calls": "len",
        "line": 170
      },
      {
        "function": "generate_analysis_report",
        "calls": "sum",
        "line": 170
      },
      {
        "function": "generate_analysis_report",
        "calls": "sum",
        "line": 170
      },
      {
        "function": "generate_analysis_report",
        "calls": "sum",
        "line": 170
      },
      {
        "function": "generate_analysis_report",
        "calls": "print",
        "line": 170
      },
      {
        "function": "generate_analysis_report",
        "calls": "print",
        "line": 170
      },
      {
        "function": "generate_analysis_report",
        "calls": "print",
        "line": 170
      },
      {
        "function": "generate_analysis_report",
        "calls": "print",
        "line": 170
      },
      {
        "function": "generate_analysis_report",
        "calls": "print",
        "line": 170
      },
      {
        "function": "generate_analysis_report",
        "calls": "print",
        "line": 170
      },
      {
        "function": "generate_analysis_report",
        "calls": "print",
        "line": 170
      },
      {
        "function": "generate_analysis_report",
        "calls": "sorted",
        "line": 170
      },
      {
        "function": "generate_analysis_report",
        "calls": "print",
        "line": 170
      },
      {
        "function": "generate_analysis_report",
        "calls": "len",
        "line": 170
      },
      {
        "function": "generate_analysis_report",
        "calls": "len",
        "line": 170
      },
      {
        "function": "generate_analysis_report",
        "calls": "items",
        "line": 170
      },
      {
        "function": "generate_analysis_report",
        "calls": "values",
        "line": 170
      },
      {
        "function": "generate_analysis_report",
        "calls": "values",
        "line": 170
      },
      {
        "function": "generate_analysis_report",
        "calls": "values",
        "line": 170
      },
      {
        "function": "generate_analysis_report",
        "calls": "sum",
        "line": 170
      },
      {
        "function": "generate_analysis_report",
        "calls": "len",
        "line": 170
      },
      {
        "function": "generate_analysis_report",
        "calls": "values",
        "line": 170
      },
      {
        "function": "save_analysis",
        "calls": "print",
        "line": 195
      },
      {
        "function": "save_analysis",
        "calls": "dict",
        "line": 195
      },
      {
        "function": "save_analysis",
        "calls": "dict",
        "line": 195
      },
      {
        "function": "save_analysis",
        "calls": "open",
        "line": 195
      },
      {
        "function": "save_analysis",
        "calls": "dump",
        "line": 195
      },
      {
        "function": "save_analysis",
        "calls": "str",
        "line": 195
      },
      {
        "function": "save_analysis",
        "calls": "len",
        "line": 195
      },
      {
        "function": "save_analysis",
        "calls": "sum",
        "line": 195
      },
      {
        "function": "save_analysis",
        "calls": "isoformat",
        "line": 195
      },
      {
        "function": "save_analysis",
        "calls": "list",
        "line": 195
      },
      {
        "function": "save_analysis",
        "calls": "list",
        "line": 195
      },
      {
        "function": "save_analysis",
        "calls": "items",
        "line": 195
      },
      {
        "function": "save_analysis",
        "calls": "items",
        "line": 195
      },
      {
        "function": "save_analysis",
        "calls": "now",
        "line": 195
      },
      {
        "function": "save_analysis",
        "calls": "values",
        "line": 195
      }
    ],
    "analyze_debug_log.py": [
      {
        "function": "parse_timestamp",
        "calls": "match",
        "line": 12
      },
      {
        "function": "parse_timestamp",
        "calls": "strptime",
        "line": 12
      },
      {
        "function": "parse_timestamp",
        "calls": "group",
        "line": 12
      },
      {
        "function": "analyze_log",
        "calls": "defaultdict",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "generate_report",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "print",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "compile",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "compile",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "compile",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "compile",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "compile",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "compile",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "compile",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "compile",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "compile",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "compile",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "compile",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "print",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "enumerate",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "total_seconds",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "len",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "open",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "write",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "open",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "readlines",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "parse_timestamp",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "search",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "print",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "search",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "append",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "search",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "search",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "append",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "search",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "append",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "search",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "len",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "len",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "search",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "int",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "append",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "group",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "append",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "int",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "append",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "int",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "append",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "append",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "groups",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "append",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "group",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "group",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "group",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "strip",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "strip",
        "line": 18
      },
      {
        "function": "analyze_log",
        "calls": "float",
        "line": 18
      },
      {
        "function": "generate_report",
        "calls": "items",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "append",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "enumerate",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "enumerate",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "len",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "len",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "strftime",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "strftime",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "strftime",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "len",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "len",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "len",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "len",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "len",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "len",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "len",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "strftime",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "strftime",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "title",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "len",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "len",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "strftime",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "strftime",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "len",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "now",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "strftime",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "get",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "strftime",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "strftime",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "strftime",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "strftime",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "title",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "strftime",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "now",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "strftime",
        "line": 229
      },
      {
        "function": "generate_report",
        "calls": "replace",
        "line": 229
      }
    ],
    "app.py": [
      {
        "function": "log_layout_ids",
        "calls": "hasattr",
        "line": 349
      },
      {
        "function": "log_layout_ids",
        "calls": "hasattr",
        "line": 349
      },
      {
        "function": "log_layout_ids",
        "calls": "info",
        "line": 349
      },
      {
        "function": "log_layout_ids",
        "calls": "isinstance",
        "line": 349
      },
      {
        "function": "log_layout_ids",
        "calls": "warning",
        "line": 349
      },
      {
        "function": "log_layout_ids",
        "calls": "log_layout_ids",
        "line": 349
      },
      {
        "function": "log_layout_ids",
        "calls": "log_layout_ids",
        "line": 349
      },
      {
        "function": "store_upload_data",
        "calls": "callback",
        "line": 459
      },
      {
        "function": "store_upload_data",
        "calls": "Output",
        "line": 459
      },
      {
        "function": "store_upload_data",
        "calls": "Input",
        "line": 459
      },
      {
        "function": "store_upload_data",
        "calls": "State",
        "line": 459
      },
      {
        "function": "store_upload_data",
        "calls": "info",
        "line": 459
      },
      {
        "function": "store_upload_data",
        "calls": "info",
        "line": 459
      },
      {
        "function": "store_upload_data",
        "calls": "isinstance",
        "line": 459
      },
      {
        "function": "store_upload_data",
        "calls": "info",
        "line": 459
      },
      {
        "function": "store_upload_data",
        "calls": "info",
        "line": 459
      },
      {
        "function": "store_upload_data",
        "calls": "error",
        "line": 459
      },
      {
        "function": "store_upload_data",
        "calls": "len",
        "line": 459
      },
      {
        "function": "store_upload_data",
        "calls": "str",
        "line": 459
      }
    ],
    "app_factory.py": [
      {
        "function": "create_app_with_duplicate_callbacks",
        "calls": "Dash",
        "line": 10
      }
    ],
    "borehole_log_professional.py": [
      {
        "function": "matplotlib_figure",
        "calls": "figure",
        "line": 53
      },
      {
        "function": "matplotlib_figure",
        "calls": "close",
        "line": 53
      },
      {
        "function": "safe_close_figure",
        "calls": "close",
        "line": 70
      },
      {
        "function": "safe_close_figure",
        "calls": "warning",
        "line": 70
      },
      {
        "function": "classify_text_box_overflow",
        "calls": "enumerate",
        "line": 84
      },
      {
        "function": "classify_text_box_overflow",
        "calls": "len",
        "line": 84
      },
      {
        "function": "classify_text_box_overflow",
        "calls": "append",
        "line": 84
      },
      {
        "function": "classify_text_box_overflow",
        "calls": "append",
        "line": 84
      },
      {
        "function": "classify_text_box_overflow",
        "calls": "append",
        "line": 84
      },
      {
        "function": "classify_text_box_overflow",
        "calls": "float",
        "line": 84
      },
      {
        "function": "create_overflow_page",
        "calls": "sum",
        "line": 161
      },
      {
        "function": "create_overflow_page",
        "calls": "figure",
        "line": 161
      },
      {
        "function": "create_overflow_page",
        "calls": "add_axes",
        "line": 161
      },
      {
        "function": "create_overflow_page",
        "calls": "draw_header",
        "line": 161
      },
      {
        "function": "create_overflow_page",
        "calls": "set_xlim",
        "line": 161
      },
      {
        "function": "create_overflow_page",
        "calls": "set_ylim",
        "line": 161
      },
      {
        "function": "create_overflow_page",
        "calls": "axis",
        "line": 161
      },
      {
        "function": "create_overflow_page",
        "calls": "add_axes",
        "line": 161
      },
      {
        "function": "create_overflow_page",
        "calls": "set_xlim",
        "line": 161
      },
      {
        "function": "create_overflow_page",
        "calls": "set_ylim",
        "line": 161
      },
      {
        "function": "create_overflow_page",
        "calls": "axis",
        "line": 161
      },
      {
        "function": "create_overflow_page",
        "calls": "Rectangle",
        "line": 161
      },
      {
        "function": "create_overflow_page",
        "calls": "add_patch",
        "line": 161
      },
      {
        "function": "create_overflow_page",
        "calls": "enumerate",
        "line": 161
      },
      {
        "function": "create_overflow_page",
        "calls": "plot",
        "line": 161
      },
      {
        "function": "create_overflow_page",
        "calls": "text",
        "line": 161
      },
      {
        "function": "create_overflow_page",
        "calls": "BytesIO",
        "line": 161
      },
      {
        "function": "create_overflow_page",
        "calls": "savefig",
        "line": 161
      },
      {
        "function": "create_overflow_page",
        "calls": "close",
        "line": 161
      },
      {
        "function": "create_overflow_page",
        "calls": "seek",
        "line": 161
      },
      {
        "function": "create_overflow_page",
        "calls": "read",
        "line": 161
      },
      {
        "function": "create_overflow_page",
        "calls": "decode",
        "line": 161
      },
      {
        "function": "create_overflow_page",
        "calls": "append",
        "line": 161
      },
      {
        "function": "create_overflow_page",
        "calls": "plot",
        "line": 161
      },
      {
        "function": "create_overflow_page",
        "calls": "copy",
        "line": 161
      },
      {
        "function": "create_overflow_page",
        "calls": "text",
        "line": 161
      },
      {
        "function": "create_overflow_page",
        "calls": "draw_text_box",
        "line": 161
      },
      {
        "function": "create_overflow_page",
        "calls": "warning",
        "line": 161
      },
      {
        "function": "create_overflow_page",
        "calls": "b64encode",
        "line": 161
      },
      {
        "function": "wrap_text_and_calculate_height",
        "calls": "wrap",
        "line": 347
      },
      {
        "function": "wrap_text_and_calculate_height",
        "calls": "isna",
        "line": 347
      },
      {
        "function": "wrap_text_and_calculate_height",
        "calls": "str",
        "line": 347
      },
      {
        "function": "wrap_text_and_calculate_height",
        "calls": "len",
        "line": 347
      },
      {
        "function": "wrap_text_and_calculate_height",
        "calls": "max",
        "line": 347
      },
      {
        "function": "calculate_text_box_positions_aligned",
        "calls": "enumerate",
        "line": 378
      },
      {
        "function": "calculate_text_box_positions_aligned",
        "calls": "zip",
        "line": 378
      },
      {
        "function": "calculate_text_box_positions_aligned",
        "calls": "wrap_text_and_calculate_height",
        "line": 378
      },
      {
        "function": "calculate_text_box_positions_aligned",
        "calls": "append",
        "line": 378
      },
      {
        "function": "calculate_text_box_positions_aligned",
        "calls": "len",
        "line": 378
      },
      {
        "function": "calculate_text_box_positions_aligned",
        "calls": "range",
        "line": 378
      },
      {
        "function": "calculate_text_box_positions_aligned",
        "calls": "get",
        "line": 378
      },
      {
        "function": "calculate_text_box_positions_aligned",
        "calls": "len",
        "line": 378
      },
      {
        "function": "calculate_text_box_positions_aligned",
        "calls": "get",
        "line": 378
      },
      {
        "function": "calculate_text_box_positions_aligned",
        "calls": "get",
        "line": 378
      },
      {
        "function": "draw_text_box",
        "calls": "plot",
        "line": 487
      },
      {
        "function": "draw_text_box",
        "calls": "plot",
        "line": 487
      },
      {
        "function": "draw_text_box",
        "calls": "plot",
        "line": 487
      },
      {
        "function": "draw_text_box",
        "calls": "plot",
        "line": 487
      },
      {
        "function": "draw_text_box",
        "calls": "len",
        "line": 487
      },
      {
        "function": "draw_text_box",
        "calls": "enumerate",
        "line": 487
      },
      {
        "function": "draw_text_box",
        "calls": "get",
        "line": 487
      },
      {
        "function": "draw_text_box",
        "calls": "get",
        "line": 487
      },
      {
        "function": "draw_text_box",
        "calls": "depth_to_y_abs",
        "line": 487
      },
      {
        "function": "draw_text_box",
        "calls": "depth_to_y_abs",
        "line": 487
      },
      {
        "function": "draw_text_box",
        "calls": "max",
        "line": 487
      },
      {
        "function": "draw_text_box",
        "calls": "max",
        "line": 487
      },
      {
        "function": "draw_text_box",
        "calls": "plot",
        "line": 487
      },
      {
        "function": "draw_text_box",
        "calls": "plot",
        "line": 487
      },
      {
        "function": "draw_text_box",
        "calls": "plot",
        "line": 487
      },
      {
        "function": "draw_text_box",
        "calls": "plot",
        "line": 487
      },
      {
        "function": "draw_text_box",
        "calls": "text",
        "line": 487
      },
      {
        "function": "draw_text_box",
        "calls": "get",
        "line": 487
      },
      {
        "function": "draw_text_box",
        "calls": "get",
        "line": 487
      },
      {
        "function": "draw_text_box",
        "calls": "min",
        "line": 487
      },
      {
        "function": "draw_text_box",
        "calls": "min",
        "line": 487
      },
      {
        "function": "draw_header",
        "calls": "axis",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "range",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "sum",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "range",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "sum",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "enumerate",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "matplotlib_figure",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "add_subplot",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "FontProperties",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "range",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "range",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "range",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "add_patch",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "text",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "text",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "zip",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "add_patch",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "range",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "append",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "max",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "sum",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "add_patch",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "Rectangle",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "Rectangle",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "text",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "plot",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "text",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "append",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "get_text_width_height_descent",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "get_text_width_height_descent",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "range",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "Rectangle",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "text",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "text",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "sum",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "text",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "get_text_width_height_descent",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "get_text_width_height_descent",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "max",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "get_renderer",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "get_renderer",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "get_renderer",
        "line": 627
      },
      {
        "function": "draw_header",
        "calls": "get_renderer",
        "line": 627
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "parse_ags_geol_section_from_string",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "DataFrame",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "max",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "reset_index",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "parse_ags_ispt_group",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "create_professional_borehole_log_multi_page",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "splitlines",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "list",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "DataFrame",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "error",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "astype",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "astype",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "sort_values",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "reader",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "index",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "index",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "index",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "index",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "float",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "str",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "str",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "str",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "append",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "len",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "strip",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "str",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "append",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "warning",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "len",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "max",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "range",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "len",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "strip",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "strip",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "strip",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "len",
        "line": 914
      },
      {
        "function": "plot_borehole_log_from_ags_content",
        "calls": "len",
        "line": 914
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "info",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "float",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "int",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "range",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "info",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "warning",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "max",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "ceil",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "sum",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "min",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "figure",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "add_axes",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "draw_header",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "set_xlim",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "set_ylim",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "axis",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "add_axes",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "set_xlim",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "set_ylim",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "axis",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "Rectangle",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "add_patch",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "enumerate",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "plot",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "plot",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "plot",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "range",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "enumerate",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "calculate_text_box_positions_aligned",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "classify_text_box_overflow",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "BytesIO",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "savefig",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "close",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "seek",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "read",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "decode",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "append",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "locals",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "range",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "append",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "plot",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "plot",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "plot",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "len",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "maximum",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "minimum",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "any",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "depth_to_y_abs",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "depth_to_y_abs",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "max",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "locals",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "astype",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "astype",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "astype",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "zip",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "text",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "range",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "enumerate",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "strip",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "get_geology_color",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "get_geology_pattern",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "add_patch",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "max",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "append",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "text",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "text",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "text",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "plot",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "append",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "draw_text_box",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "depth_to_y_abs",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "text",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "text",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "text",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "b64encode",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "len",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "plot",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "zip",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "append",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "Rectangle",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "add_patch",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "split",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "strip",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "info",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "create_overflow_page",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "append",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "info",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "str",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "Rectangle",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "strip",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "float",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "len",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log_multi_page",
        "calls": "len",
        "line": 1097
      },
      {
        "function": "create_professional_borehole_log",
        "calls": "create_professional_borehole_log_multi_page",
        "line": 1710
      },
      {
        "function": "create_professional_borehole_log",
        "calls": "isinstance",
        "line": 1710
      },
      {
        "function": "depth_to_y_abs",
        "calls": "float",
        "line": 103
      },
      {
        "function": "parse_ags_ispt_group",
        "calls": "splitlines",
        "line": 1019
      },
      {
        "function": "parse_ags_ispt_group",
        "calls": "list",
        "line": 1019
      },
      {
        "function": "parse_ags_ispt_group",
        "calls": "DataFrame",
        "line": 1019
      },
      {
        "function": "parse_ags_ispt_group",
        "calls": "reader",
        "line": 1019
      },
      {
        "function": "parse_ags_ispt_group",
        "calls": "index",
        "line": 1019
      },
      {
        "function": "parse_ags_ispt_group",
        "calls": "index",
        "line": 1019
      },
      {
        "function": "parse_ags_ispt_group",
        "calls": "index",
        "line": 1019
      },
      {
        "function": "parse_ags_ispt_group",
        "calls": "index",
        "line": 1019
      },
      {
        "function": "parse_ags_ispt_group",
        "calls": "append",
        "line": 1019
      },
      {
        "function": "parse_ags_ispt_group",
        "calls": "len",
        "line": 1019
      },
      {
        "function": "parse_ags_ispt_group",
        "calls": "strip",
        "line": 1019
      },
      {
        "function": "parse_ags_ispt_group",
        "calls": "str",
        "line": 1019
      },
      {
        "function": "parse_ags_ispt_group",
        "calls": "append",
        "line": 1019
      },
      {
        "function": "parse_ags_ispt_group",
        "calls": "len",
        "line": 1019
      },
      {
        "function": "parse_ags_ispt_group",
        "calls": "max",
        "line": 1019
      },
      {
        "function": "parse_ags_ispt_group",
        "calls": "len",
        "line": 1019
      },
      {
        "function": "parse_ags_ispt_group",
        "calls": "strip",
        "line": 1019
      },
      {
        "function": "parse_ags_ispt_group",
        "calls": "strip",
        "line": 1019
      },
      {
        "function": "parse_ags_ispt_group",
        "calls": "strip",
        "line": 1019
      },
      {
        "function": "parse_ags_ispt_group",
        "calls": "len",
        "line": 1019
      },
      {
        "function": "create_borehole_log",
        "calls": "info",
        "line": 1671
      },
      {
        "function": "create_borehole_log",
        "calls": "create_professional_borehole_log_multi_page",
        "line": 1671
      },
      {
        "function": "depth_to_y_abs",
        "calls": "float",
        "line": 1310
      }
    ],
    "callbacks_split.py": [
      {
        "function": "create_error_message",
        "calls": "isinstance",
        "line": 69
      },
      {
        "function": "create_error_message",
        "calls": "get",
        "line": 69
      },
      {
        "function": "create_error_message",
        "calls": "Div",
        "line": 69
      },
      {
        "function": "create_error_message",
        "calls": "str",
        "line": 69
      },
      {
        "function": "create_error_message",
        "calls": "Div",
        "line": 69
      },
      {
        "function": "create_error_message",
        "calls": "P",
        "line": 69
      },
      {
        "function": "create_error_message",
        "calls": "Details",
        "line": 69
      },
      {
        "function": "create_error_message",
        "calls": "Summary",
        "line": 69
      },
      {
        "function": "create_error_message",
        "calls": "P",
        "line": 69
      },
      {
        "function": "create_success_message",
        "calls": "Div",
        "line": 144
      },
      {
        "function": "create_success_message",
        "calls": "P",
        "line": 144
      },
      {
        "function": "create_success_message",
        "calls": "P",
        "line": 144
      },
      {
        "function": "handle_callback_error",
        "calls": "func",
        "line": 177
      },
      {
        "function": "handle_callback_error",
        "calls": "error",
        "line": 177
      },
      {
        "function": "handle_callback_error",
        "calls": "create_callback_error_response",
        "line": 177
      },
      {
        "function": "handle_callback_error",
        "calls": "error",
        "line": 177
      },
      {
        "function": "handle_callback_error",
        "calls": "CallbackError",
        "line": 177
      },
      {
        "function": "handle_callback_error",
        "calls": "create_callback_error_response",
        "line": 177
      },
      {
        "function": "handle_callback_error",
        "calls": "str",
        "line": 177
      },
      {
        "function": "handle_callback_error",
        "calls": "replace",
        "line": 177
      },
      {
        "function": "create_callback_error_response",
        "calls": "create_error_message",
        "line": 206
      },
      {
        "function": "create_callback_error_response",
        "calls": "title",
        "line": 206
      },
      {
        "function": "create_callback_error_response",
        "calls": "replace",
        "line": 206
      },
      {
        "function": "validate_file_size",
        "calls": "len",
        "line": 216
      },
      {
        "function": "validate_file_size",
        "calls": "b64decode",
        "line": 216
      },
      {
        "function": "validate_file_size",
        "calls": "str",
        "line": 216
      },
      {
        "function": "validate_total_upload_size",
        "calls": "len",
        "line": 245
      },
      {
        "function": "validate_total_upload_size",
        "calls": "len",
        "line": 245
      },
      {
        "function": "validate_total_upload_size",
        "calls": "b64decode",
        "line": 245
      },
      {
        "function": "validate_total_upload_size",
        "calls": "len",
        "line": 245
      },
      {
        "function": "validate_total_upload_size",
        "calls": "str",
        "line": 245
      },
      {
        "function": "transform_coordinates",
        "calls": "get_coordinate_service",
        "line": 287
      },
      {
        "function": "transform_coordinates",
        "calls": "transform_bng_to_wgs84",
        "line": 287
      },
      {
        "function": "transform_coordinates",
        "calls": "debug",
        "line": 287
      },
      {
        "function": "transform_coordinates",
        "calls": "error",
        "line": 287
      },
      {
        "function": "transform_coordinates",
        "calls": "error",
        "line": 287
      },
      {
        "function": "create_selection_shape_visual",
        "calls": "get",
        "line": 310
      },
      {
        "function": "create_selection_shape_visual",
        "calls": "get",
        "line": 310
      },
      {
        "function": "create_selection_shape_visual",
        "calls": "error",
        "line": 310
      },
      {
        "function": "create_selection_shape_visual",
        "calls": "len",
        "line": 310
      },
      {
        "function": "create_selection_shape_visual",
        "calls": "Polygon",
        "line": 310
      },
      {
        "function": "create_selection_shape_visual",
        "calls": "len",
        "line": 310
      },
      {
        "function": "create_selection_shape_visual",
        "calls": "Polygon",
        "line": 310
      },
      {
        "function": "create_selection_shape_visual",
        "calls": "Tooltip",
        "line": 310
      },
      {
        "function": "create_selection_shape_visual",
        "calls": "Tooltip",
        "line": 310
      },
      {
        "function": "register_callbacks",
        "calls": "callback",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "callback",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "callback",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "callback",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "clientside_callback",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "callback",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "callback",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "callback",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "clientside_callback",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "handle_marker_click",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Div",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Input",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Input",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Input",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Input",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "zip",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "validate_total_upload_size",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "zip",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "insert",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "load_all_loca_data",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "monitor_memory_usage",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "optimize_borehole_dataframe",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get_coordinate_service",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "full",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "full",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "iterrows",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "iterrows",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "items",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Div",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "append",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "warning",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "timestamp",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Input",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "State",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "State",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "warning",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "handle_shape_drawing",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Input",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Input",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Input",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "State",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "State",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "State",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "isinstance",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "DataFrame",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "DataFrame",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "create_checkbox_grid",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Div",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "update_marker_colors",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "PCA",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "fit_transform",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "mean",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get_coordinate_service",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "transform_bng_to_wgs84",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "warning",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Div",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "DataFrame",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "iterrows",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "items",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "plot_section_from_ags_content",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Input",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Input",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Input",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "State",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "timestamp",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Input",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "DataFrame",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "iterrows",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "sort",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Div",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Div",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "DataFrame",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "items",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "plot_borehole_log_from_ags_content",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Div",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Output",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "State",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "State",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "State",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "State",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Input",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Input",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "DataFrame",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "split",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "append",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "warning",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "create_error_message",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "create_error_message",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Div",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "apply",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "apply",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "transform_bng_to_wgs84",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "median",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "median",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "max",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "warning",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "to_dict",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "tolist",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "append",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "error",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "create_error_message",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "timestamp",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "handle_checkbox_selection",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "enumerate",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "warning",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "project_boreholes_to_polyline",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "filter_selection_by_shape",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "isinstance",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "create_checkbox_grid",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "update_marker_colors",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Div",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Div",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "update_marker_colors",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "error",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Div",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "update_marker_colors",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "isin",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "create_polyline_section",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "create_buffer_visualization",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "isinstance",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "isinstance",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "calculate_pca_line",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "error",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "update_marker_colors",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "max",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "min",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "error",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "H4",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "P",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Checklist",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "error",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "error",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "strip",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "append",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "error",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Div",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "isinstance",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Div",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "enumerate",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "error",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Div",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "error",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "CallbackError",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "split",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "validate_file_size",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "b64decode",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "decode",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "append",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "append",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "CallbackError",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "astype",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "astype",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "float",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "float",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "transform_bng_to_wgs84",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "notnull",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "notnull",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "str",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "append",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "append",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "max",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "min",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "max",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "min",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "append",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Div",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "H4",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "P",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "P",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "P",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "P",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "P",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "now",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "CallbackError",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "DataFrame",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "project_boreholes_to_polyline",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "dict",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "create_polyline_section",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "create_buffer_visualization",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "isinstance",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "update_marker_colors",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "create_checkbox_grid",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Div",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "isinstance",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "warning",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "range",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "tolist",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "isinstance",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "create_polyline_section",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "create_buffer_zone",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "dict",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "isinstance",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "isinstance",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "isinstance",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "dict",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "H4",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "P",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "P",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "P",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "P",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "add_polyline_distance_info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "create_selection_shape_visual",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "extend",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "extend",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Polyline",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "H4",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "P",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "str",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get_coordinate_service",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "zip",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "transform_wgs84_to_utm",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "list",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "BytesIO",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "savefig",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "seek",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "read",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "decode",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Img",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "close",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "now",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "strip",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "strip",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Div",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Span",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Span",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "calculate_distance_along_polyline",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "append",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "warning",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "append",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Div",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "error",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "append",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "P",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "P",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "P",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "warning",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "strip",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "strip",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Marker",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Li",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "now",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "tolist",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "extend",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "append",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Div",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "type",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "min",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "tolist",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "warning",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "extend",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "extend",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "calculate_pca_line",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "calculate_pca_line",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "append",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "append",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "append",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "append",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "append",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "warning",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "zip",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "error",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "send_bytes",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "str",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "float",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "append",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "float",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "append",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "lower",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "H3",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "P",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Div",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "enumerate",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Div",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "hasattr",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "hasattr",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "hasattr",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Marker",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "append",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "append",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Div",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Div",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "notnull",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "isdigit",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "notnull",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "isdigit",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "min",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "max",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "min",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "max",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "H4",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Ul",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "append",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "list",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "list",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "type",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "append",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "append",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "isin",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Hr",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "H5",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "append",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Tooltip",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "info",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "strip",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "strip",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Marker",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "str",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "b64encode",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "str",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "str",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "join",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "H3",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "append",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "H3",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "P",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "str",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Span",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Span",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "str",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "str",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Tooltip",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "B",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "min",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "max",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "min",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "max",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "str",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "keys",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "join",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "P",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "H3",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Img",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "append",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Img",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "getattr",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Span",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Span",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Span",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Span",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "replace",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "replace",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "float",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "float",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "strip",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "type",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "str",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "str",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "Tooltip",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "H4",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "get",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "float",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "float",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "strip",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "replace",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "replace",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "len",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "str",
        "line": 361
      },
      {
        "function": "register_callbacks",
        "calls": "str",
        "line": 361
      },
      {
        "function": "validate_borehole_near_polyline",
        "calls": "range",
        "line": 2120
      },
      {
        "function": "validate_borehole_near_polyline",
        "calls": "point_to_line_distance",
        "line": 2120
      },
      {
        "function": "validate_borehole_near_polyline",
        "calls": "error",
        "line": 2120
      },
      {
        "function": "validate_borehole_near_polyline",
        "calls": "len",
        "line": 2120
      },
      {
        "function": "validate_borehole_near_polyline",
        "calls": "project_point_to_line_segment",
        "line": 2120
      },
      {
        "function": "validate_borehole_near_polyline",
        "calls": "debug",
        "line": 2120
      },
      {
        "function": "handle_marker_click",
        "calls": "callback",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "info",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "info",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "info",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "enumerate",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "info",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "DataFrame",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "info",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "items",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "info",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "plot_borehole_log_from_ags_content",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "Output",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "Output",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "Input",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "State",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "State",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "State",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "get",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "get",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "all",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "info",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "info",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "warning",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "len",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "warning",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "enumerate",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "Div",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "Div",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "enumerate",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "error",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "print_exc",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "error",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "Div",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "Div",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "len",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "append",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "Div",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "len",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "append",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "Img",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "H3",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "P",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "Div",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "get",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "copy",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "copy",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "append",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "append",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "len",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "Polygon",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "len",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "H4",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "len",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "Polygon",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "len",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "copy",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "copy",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "Tooltip",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "len",
        "line": 2155
      },
      {
        "function": "handle_marker_click",
        "calls": "Tooltip",
        "line": 2155
      },
      {
        "function": "__init__",
        "calls": "__init__",
        "line": 62
      },
      {
        "function": "__init__",
        "calls": "super",
        "line": 62
      },
      {
        "function": "wrapper",
        "calls": "func",
        "line": 188
      },
      {
        "function": "wrapper",
        "calls": "error",
        "line": 188
      },
      {
        "function": "wrapper",
        "calls": "create_callback_error_response",
        "line": 188
      },
      {
        "function": "wrapper",
        "calls": "error",
        "line": 188
      },
      {
        "function": "wrapper",
        "calls": "CallbackError",
        "line": 188
      },
      {
        "function": "wrapper",
        "calls": "create_callback_error_response",
        "line": 188
      },
      {
        "function": "wrapper",
        "calls": "str",
        "line": 188
      },
      {
        "function": "wrapper",
        "calls": "replace",
        "line": 188
      },
      {
        "function": "handle_file_upload",
        "calls": "callback",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "info",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "info",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "info",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "zip",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "validate_total_upload_size",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "zip",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "insert",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "load_all_loca_data",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "info",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "monitor_memory_usage",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "optimize_borehole_dataframe",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "info",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "get_coordinate_service",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "full",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "full",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "iterrows",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "iterrows",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "items",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "Div",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "append",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "info",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "warning",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "timestamp",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "Output",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "Output",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "Output",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "Output",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "Output",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "Output",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "Input",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "State",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "State",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "split",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "append",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "warning",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "create_error_message",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "create_error_message",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "Div",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "apply",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "apply",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "len",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "len",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "transform_bng_to_wgs84",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "median",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "median",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "max",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "info",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "info",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "warning",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "to_dict",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "tolist",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "append",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "error",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "create_error_message",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "timestamp",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "CallbackError",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "split",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "validate_file_size",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "b64decode",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "decode",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "append",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "append",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "info",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "CallbackError",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "astype",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "astype",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "float",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "float",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "transform_bng_to_wgs84",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "notnull",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "notnull",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "str",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "get",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "get",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "append",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "append",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "max",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "min",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "max",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "min",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "len",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "append",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "Div",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "H4",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "P",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "P",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "P",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "P",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "P",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "now",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "CallbackError",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "len",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "warning",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "append",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "Div",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "error",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "append",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "P",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "P",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "P",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "len",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "len",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "warning",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "strip",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "strip",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "Marker",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "info",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "Li",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "now",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "Div",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "Div",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "notnull",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "isdigit",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "notnull",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "isdigit",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "min",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "max",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "min",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "max",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "H4",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "Ul",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "Span",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "Span",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "str",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "str",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "Tooltip",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "B",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "len",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "min",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "max",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "min",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "max",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "str",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "Span",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "Span",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "Span",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "Span",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "len",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "len",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "replace",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "replace",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "float",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "float",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "strip",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "len",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "replace",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "replace",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "str",
        "line": 385
      },
      {
        "function": "handle_file_upload",
        "calls": "str",
        "line": 385
      },
      {
        "function": "handle_map_interactions",
        "calls": "callback",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "info",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "info",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "warning",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "get",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "info",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "handle_shape_drawing",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "Output",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "Output",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "Output",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "Output",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "Output",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "Output",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "Output",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "Output",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "Input",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "Input",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "Input",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "State",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "State",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "State",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "info",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "handle_checkbox_selection",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "get",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "info",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "get",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "DataFrame",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "project_boreholes_to_polyline",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "dict",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "create_polyline_section",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "create_buffer_visualization",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "isinstance",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "update_marker_colors",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "create_checkbox_grid",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "tolist",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "extend",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "append",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "Div",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "append",
        "line": 793
      },
      {
        "function": "handle_map_interactions",
        "calls": "len",
        "line": 793
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "isinstance",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "DataFrame",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "get",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "get",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "enumerate",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "warning",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "project_boreholes_to_polyline",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "filter_selection_by_shape",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "isinstance",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "create_checkbox_grid",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "update_marker_colors",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "len",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "Div",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "Div",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "update_marker_colors",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "error",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "Div",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "update_marker_colors",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "get",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "Div",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "get",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "isinstance",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "warning",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "get",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "len",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "range",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "tolist",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "isinstance",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "create_polyline_section",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "create_buffer_zone",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "dict",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "isinstance",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "isinstance",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "isinstance",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "dict",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "get",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "len",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "H4",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "P",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "P",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "P",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "P",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "add_polyline_distance_info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "create_selection_shape_visual",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "type",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "len",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "min",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "tolist",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "info",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "warning",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "extend",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "extend",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "calculate_pca_line",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "calculate_pca_line",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "append",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "append",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "list",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "len",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "list",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "len",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "len",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "type",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "len",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "append",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "append",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "isin",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "len",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "len",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "len",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "Hr",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "H5",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "append",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "len",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "len",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "keys",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "get",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "get",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "len",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "join",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "len",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "P",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "get",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "get",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "get",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "get",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "get",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "get",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "len",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "len",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "type",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "len",
        "line": 908
      },
      {
        "function": "handle_shape_drawing",
        "calls": "get",
        "line": 908
      },
      {
        "function": "handle_checkbox_selection",
        "calls": "DataFrame",
        "line": 1212
      },
      {
        "function": "handle_checkbox_selection",
        "calls": "create_checkbox_grid",
        "line": 1212
      },
      {
        "function": "handle_checkbox_selection",
        "calls": "Div",
        "line": 1212
      },
      {
        "function": "handle_checkbox_selection",
        "calls": "update_marker_colors",
        "line": 1212
      },
      {
        "function": "handle_checkbox_selection",
        "calls": "isin",
        "line": 1212
      },
      {
        "function": "handle_checkbox_selection",
        "calls": "get",
        "line": 1212
      },
      {
        "function": "handle_checkbox_selection",
        "calls": "create_polyline_section",
        "line": 1212
      },
      {
        "function": "handle_checkbox_selection",
        "calls": "create_buffer_visualization",
        "line": 1212
      },
      {
        "function": "handle_checkbox_selection",
        "calls": "isinstance",
        "line": 1212
      },
      {
        "function": "handle_checkbox_selection",
        "calls": "isinstance",
        "line": 1212
      },
      {
        "function": "handle_checkbox_selection",
        "calls": "calculate_pca_line",
        "line": 1212
      },
      {
        "function": "handle_checkbox_selection",
        "calls": "error",
        "line": 1212
      },
      {
        "function": "handle_checkbox_selection",
        "calls": "update_marker_colors",
        "line": 1212
      },
      {
        "function": "handle_checkbox_selection",
        "calls": "extend",
        "line": 1212
      },
      {
        "function": "handle_checkbox_selection",
        "calls": "extend",
        "line": 1212
      },
      {
        "function": "handle_checkbox_selection",
        "calls": "append",
        "line": 1212
      },
      {
        "function": "handle_checkbox_selection",
        "calls": "append",
        "line": 1212
      },
      {
        "function": "handle_checkbox_selection",
        "calls": "len",
        "line": 1212
      },
      {
        "function": "calculate_pca_line",
        "calls": "len",
        "line": 1296
      },
      {
        "function": "calculate_pca_line",
        "calls": "info",
        "line": 1296
      },
      {
        "function": "calculate_pca_line",
        "calls": "info",
        "line": 1296
      },
      {
        "function": "calculate_pca_line",
        "calls": "PCA",
        "line": 1296
      },
      {
        "function": "calculate_pca_line",
        "calls": "fit_transform",
        "line": 1296
      },
      {
        "function": "calculate_pca_line",
        "calls": "mean",
        "line": 1296
      },
      {
        "function": "calculate_pca_line",
        "calls": "info",
        "line": 1296
      },
      {
        "function": "calculate_pca_line",
        "calls": "info",
        "line": 1296
      },
      {
        "function": "calculate_pca_line",
        "calls": "get_coordinate_service",
        "line": 1296
      },
      {
        "function": "calculate_pca_line",
        "calls": "transform_bng_to_wgs84",
        "line": 1296
      },
      {
        "function": "calculate_pca_line",
        "calls": "max",
        "line": 1296
      },
      {
        "function": "calculate_pca_line",
        "calls": "min",
        "line": 1296
      },
      {
        "function": "calculate_pca_line",
        "calls": "info",
        "line": 1296
      },
      {
        "function": "calculate_pca_line",
        "calls": "error",
        "line": 1296
      },
      {
        "function": "calculate_pca_line",
        "calls": "Polyline",
        "line": 1296
      },
      {
        "function": "calculate_pca_line",
        "calls": "len",
        "line": 1296
      },
      {
        "function": "calculate_pca_line",
        "calls": "Tooltip",
        "line": 1296
      },
      {
        "function": "create_checkbox_grid",
        "calls": "Div",
        "line": 1357
      },
      {
        "function": "create_checkbox_grid",
        "calls": "warning",
        "line": 1357
      },
      {
        "function": "create_checkbox_grid",
        "calls": "Div",
        "line": 1357
      },
      {
        "function": "create_checkbox_grid",
        "calls": "H4",
        "line": 1357
      },
      {
        "function": "create_checkbox_grid",
        "calls": "P",
        "line": 1357
      },
      {
        "function": "create_checkbox_grid",
        "calls": "Checklist",
        "line": 1357
      },
      {
        "function": "create_checkbox_grid",
        "calls": "H4",
        "line": 1357
      },
      {
        "function": "create_checkbox_grid",
        "calls": "P",
        "line": 1357
      },
      {
        "function": "update_marker_colors",
        "calls": "info",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "info",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "info",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "DataFrame",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "info",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "iterrows",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "len",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "info",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "info",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "len",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "error",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "get",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "get",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "str",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "len",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "len",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "get",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "get",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "append",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "warning",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "len",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "info",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "strip",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "strip",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "Marker",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "str",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "str",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "str",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "Tooltip",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "float",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "float",
        "line": 1395
      },
      {
        "function": "update_marker_colors",
        "calls": "strip",
        "line": 1395
      },
      {
        "function": "handle_plot_generation",
        "calls": "callback",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "info",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "info",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "items",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "plot_section_from_ags_content",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "Output",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "Output",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "Output",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "Input",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "Input",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "Input",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "State",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "error",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "get_coordinate_service",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "zip",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "transform_wgs84_to_utm",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "list",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "info",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "info",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "info",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "BytesIO",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "savefig",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "seek",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "read",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "decode",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "Img",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "close",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "zip",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "error",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "info",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "send_bytes",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "b64encode",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "len",
        "line": 1520
      },
      {
        "function": "handle_plot_generation",
        "calls": "len",
        "line": 1520
      },
      {
        "function": "clear_all_shapes",
        "calls": "callback",
        "line": 1637
      },
      {
        "function": "clear_all_shapes",
        "calls": "Output",
        "line": 1637
      },
      {
        "function": "clear_all_shapes",
        "calls": "Input",
        "line": 1637
      },
      {
        "function": "clear_all_shapes",
        "calls": "get",
        "line": 1637
      },
      {
        "function": "clear_all_shapes",
        "calls": "info",
        "line": 1637
      },
      {
        "function": "clear_all_shapes",
        "calls": "timestamp",
        "line": 1637
      },
      {
        "function": "clear_all_shapes",
        "calls": "len",
        "line": 1637
      },
      {
        "function": "clear_all_shapes",
        "calls": "get",
        "line": 1637
      },
      {
        "function": "clear_all_shapes",
        "calls": "now",
        "line": 1637
      },
      {
        "function": "clear_all_shapes",
        "calls": "len",
        "line": 1637
      },
      {
        "function": "clear_all_shapes",
        "calls": "get",
        "line": 1637
      },
      {
        "function": "update_search_dropdown",
        "calls": "callback",
        "line": 1693
      },
      {
        "function": "update_search_dropdown",
        "calls": "info",
        "line": 1693
      },
      {
        "function": "update_search_dropdown",
        "calls": "Output",
        "line": 1693
      },
      {
        "function": "update_search_dropdown",
        "calls": "Output",
        "line": 1693
      },
      {
        "function": "update_search_dropdown",
        "calls": "Input",
        "line": 1693
      },
      {
        "function": "update_search_dropdown",
        "calls": "info",
        "line": 1693
      },
      {
        "function": "update_search_dropdown",
        "calls": "DataFrame",
        "line": 1693
      },
      {
        "function": "update_search_dropdown",
        "calls": "iterrows",
        "line": 1693
      },
      {
        "function": "update_search_dropdown",
        "calls": "sort",
        "line": 1693
      },
      {
        "function": "update_search_dropdown",
        "calls": "info",
        "line": 1693
      },
      {
        "function": "update_search_dropdown",
        "calls": "info",
        "line": 1693
      },
      {
        "function": "update_search_dropdown",
        "calls": "strip",
        "line": 1693
      },
      {
        "function": "update_search_dropdown",
        "calls": "get",
        "line": 1693
      },
      {
        "function": "update_search_dropdown",
        "calls": "get",
        "line": 1693
      },
      {
        "function": "update_search_dropdown",
        "calls": "append",
        "line": 1693
      },
      {
        "function": "update_search_dropdown",
        "calls": "error",
        "line": 1693
      },
      {
        "function": "update_search_dropdown",
        "calls": "strip",
        "line": 1693
      },
      {
        "function": "update_search_dropdown",
        "calls": "strip",
        "line": 1693
      },
      {
        "function": "update_search_dropdown",
        "calls": "str",
        "line": 1693
      },
      {
        "function": "update_search_dropdown",
        "calls": "float",
        "line": 1693
      },
      {
        "function": "update_search_dropdown",
        "calls": "append",
        "line": 1693
      },
      {
        "function": "update_search_dropdown",
        "calls": "float",
        "line": 1693
      },
      {
        "function": "update_search_dropdown",
        "calls": "append",
        "line": 1693
      },
      {
        "function": "update_search_dropdown",
        "calls": "lower",
        "line": 1693
      },
      {
        "function": "update_search_dropdown",
        "calls": "len",
        "line": 1693
      },
      {
        "function": "update_search_dropdown",
        "calls": "str",
        "line": 1693
      },
      {
        "function": "update_search_dropdown",
        "calls": "str",
        "line": 1693
      },
      {
        "function": "update_search_dropdown",
        "calls": "join",
        "line": 1693
      },
      {
        "function": "toggle_search_button",
        "calls": "callback",
        "line": 1764
      },
      {
        "function": "toggle_search_button",
        "calls": "Output",
        "line": 1764
      },
      {
        "function": "toggle_search_button",
        "calls": "Output",
        "line": 1764
      },
      {
        "function": "toggle_search_button",
        "calls": "Input",
        "line": 1764
      },
      {
        "function": "handle_search_go",
        "calls": "callback",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "info",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "Input",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "Div",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "Div",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "DataFrame",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "get",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "get",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "info",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "items",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "plot_borehole_log_from_ags_content",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "Div",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "Output",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "Output",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "Output",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "Output",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "Output",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "Output",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "State",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "State",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "State",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "State",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "len",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "Div",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "isinstance",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "Div",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "enumerate",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "error",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "Div",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "Div",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "Span",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "Span",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "H3",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "P",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "len",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "len",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "Div",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "enumerate",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "Div",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "hasattr",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "hasattr",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "hasattr",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "Marker",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "append",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "append",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "H3",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "append",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "H3",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "P",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "str",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "H3",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "Img",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "append",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "Img",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "getattr",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "H4",
        "line": 1789
      },
      {
        "function": "handle_search_go",
        "calls": "len",
        "line": 1789
      },
      {
        "function": "add_polyline_distance_info",
        "calls": "DataFrame",
        "line": 2078
      },
      {
        "function": "add_polyline_distance_info",
        "calls": "error",
        "line": 2078
      },
      {
        "function": "add_polyline_distance_info",
        "calls": "calculate_distance_along_polyline",
        "line": 2078
      },
      {
        "function": "add_polyline_distance_info",
        "calls": "append",
        "line": 2078
      },
      {
        "function": "marker_click_handler",
        "calls": "callback",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "info",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "info",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "info",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "enumerate",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "info",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "DataFrame",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "info",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "items",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "info",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "plot_borehole_log_from_ags_content",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "Output",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "Output",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "Input",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "State",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "State",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "State",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "all",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "info",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "info",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "warning",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "len",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "warning",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "enumerate",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "Div",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "Div",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "enumerate",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "error",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "print_exc",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "Div",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "Div",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "len",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "append",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "Div",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "len",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "append",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "Img",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "H3",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "P",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "Div",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "get",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "copy",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "copy",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "append",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "append",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "len",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "H4",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "len",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "copy",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "copy",
        "line": 2179
      },
      {
        "function": "marker_click_handler",
        "calls": "len",
        "line": 2179
      },
      {
        "function": "create_selection_shape_visual",
        "calls": "get",
        "line": 2351
      },
      {
        "function": "create_selection_shape_visual",
        "calls": "get",
        "line": 2351
      },
      {
        "function": "create_selection_shape_visual",
        "calls": "error",
        "line": 2351
      },
      {
        "function": "create_selection_shape_visual",
        "calls": "len",
        "line": 2351
      },
      {
        "function": "create_selection_shape_visual",
        "calls": "Polygon",
        "line": 2351
      },
      {
        "function": "create_selection_shape_visual",
        "calls": "len",
        "line": 2351
      },
      {
        "function": "create_selection_shape_visual",
        "calls": "Polygon",
        "line": 2351
      },
      {
        "function": "create_selection_shape_visual",
        "calls": "Tooltip",
        "line": 2351
      },
      {
        "function": "create_selection_shape_visual",
        "calls": "Tooltip",
        "line": 2351
      }
    ],
    "comprehensive_optimization_validation.py": [
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "print",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "print",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "print",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "getLogger",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "getLogger",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "print",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "print",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "StringIO",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "StreamHandler",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "setLevel",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "getLogger",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "copy",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "setLevel",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "addHandler",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "time",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "subplots",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "text",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "text",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "text",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "set_title",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "close",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "getvalue",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "print",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "print",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "print",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "print",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "removeHandler",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "setLevel",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "time",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "strip",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "split",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "len",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "print",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "print",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "print",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "print",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "getLevelName",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "getLevelName",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "removeHandler",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "strip",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "lower",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "len",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "len",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "len",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "lower",
        "line": 42
      },
      {
        "function": "test_matplotlib_logging_verbosity",
        "calls": "len",
        "line": 42
      },
      {
        "function": "test_marker_click_logging_optimization",
        "calls": "print",
        "line": 144
      },
      {
        "function": "test_marker_click_logging_optimization",
        "calls": "print",
        "line": 144
      },
      {
        "function": "test_marker_click_logging_optimization",
        "calls": "print",
        "line": 144
      },
      {
        "function": "test_marker_click_logging_optimization",
        "calls": "range",
        "line": 144
      },
      {
        "function": "test_marker_click_logging_optimization",
        "calls": "time",
        "line": 144
      },
      {
        "function": "test_marker_click_logging_optimization",
        "calls": "time",
        "line": 144
      },
      {
        "function": "test_marker_click_logging_optimization",
        "calls": "print",
        "line": 144
      },
      {
        "function": "test_marker_click_logging_optimization",
        "calls": "print",
        "line": 144
      },
      {
        "function": "test_marker_click_logging_optimization",
        "calls": "print",
        "line": 144
      },
      {
        "function": "test_marker_click_logging_optimization",
        "calls": "print",
        "line": 144
      },
      {
        "function": "test_marker_click_logging_optimization",
        "calls": "append",
        "line": 144
      },
      {
        "function": "test_marker_click_logging_optimization",
        "calls": "len",
        "line": 144
      },
      {
        "function": "test_marker_click_logging_optimization",
        "calls": "print",
        "line": 144
      },
      {
        "function": "test_marker_click_logging_optimization",
        "calls": "print",
        "line": 144
      },
      {
        "function": "test_marker_click_logging_optimization",
        "calls": "time",
        "line": 144
      },
      {
        "function": "test_marker_click_logging_optimization",
        "calls": "time",
        "line": 144
      },
      {
        "function": "test_marker_click_logging_optimization",
        "calls": "print",
        "line": 144
      },
      {
        "function": "test_marker_click_logging_optimization",
        "calls": "print",
        "line": 144
      },
      {
        "function": "test_marker_click_logging_optimization",
        "calls": "len",
        "line": 144
      },
      {
        "function": "test_marker_click_logging_optimization",
        "calls": "len",
        "line": 144
      },
      {
        "function": "test_marker_click_logging_optimization",
        "calls": "len",
        "line": 144
      },
      {
        "function": "test_marker_click_logging_optimization",
        "calls": "len",
        "line": 144
      },
      {
        "function": "test_marker_click_logging_optimization",
        "calls": "len",
        "line": 144
      },
      {
        "function": "test_marker_click_logging_optimization",
        "calls": "uniform",
        "line": 144
      },
      {
        "function": "test_marker_click_logging_optimization",
        "calls": "uniform",
        "line": 144
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "print",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "print",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "print",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "uniform",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "uniform",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "get_coordinate_service",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "print",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "print",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "time",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "range",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "print",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "time",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "transform_bng_to_wgs84",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "list",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "print",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "print",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "print",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "print",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "print",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "robust_coordinate_transform",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "time",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "time",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "zip",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "float",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "abs",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "abs",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "print",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "print",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "append",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "len",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "len",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "print",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "print",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "len",
        "line": 205
      },
      {
        "function": "test_batch_coordinate_transformations",
        "calls": "len",
        "line": 205
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "print",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "print",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "print",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "print",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "DataFrame",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "sum",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "print",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "sum",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "sum",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "print",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "print",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "print",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "print",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "print",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "print",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "print",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "print",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "print",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "print",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "max",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "uniform",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "uniform",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "choice",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "choice",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "choice",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "uniform",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "uniform",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "uniform",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "uniform",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "PerformanceMonitor",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "optimize_borehole_dataframe",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "PerformanceMonitor",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "optimize_dataframe_memory",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "print",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "get_dataframe_memory_report",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "print",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "select_dtypes",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "len",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "len",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "print",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "memory_usage",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "copy",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "copy",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "memory_usage",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "memory_usage",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "print",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "print",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "print",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "range",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "len",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "len",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "len",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "len",
        "line": 271
      },
      {
        "function": "test_dataframe_operations_optimization",
        "calls": "len",
        "line": 271
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "print",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "print",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "print",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "print",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "print",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "print",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "print",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "print",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "print",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "print",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "robust_coordinate_transform",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "robust_coordinate_transform",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "print",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "print",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "retry_with_backoff",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "successful_operation",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "graceful_fallback",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "failing_operation",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "print",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "print",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "print",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "print",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "print",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "print",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "print",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "print",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "PerformanceMonitor",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "sleep",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "print",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "PerformanceMonitor",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "sleep",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "print",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "print",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "print",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "print",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "ValueError",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "print",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "print",
        "line": 375
      },
      {
        "function": "test_enhanced_error_handling",
        "calls": "print",
        "line": 375
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "print",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "print",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "print",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "print",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "print",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "print",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "print",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "get_coordinate_service",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "array",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "array",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "transform_bng_to_wgs84",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "DataFrame",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "range",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "concat",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "range",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "print",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "print",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "print",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "print",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "print",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "print",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "len",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "optimize_dataframe_memory",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "append",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "len",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "len",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "print",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "print",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "print",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "sum",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "len",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "len",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "print",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "print",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "print",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "len",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "len",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "rand",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "choice",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "PerformanceMonitor",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "time",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "optimize_dataframe_memory",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "append",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "DataFrame",
        "line": 473
      },
      {
        "function": "test_asynchronous_processing",
        "calls": "time",
        "line": 473
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "sum",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "len",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "items",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "values",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "title",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "test_func",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "strftime",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print_exc",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "replace",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "strftime",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "replace",
        "line": 571
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "upper",
        "line": 571
      },
      {
        "function": "successful_operation",
        "calls": "retry_with_backoff",
        "line": 433
      },
      {
        "function": "failing_operation",
        "calls": "graceful_fallback",
        "line": 450
      },
      {
        "function": "failing_operation",
        "calls": "ValueError",
        "line": 450
      }
    ],
    "coordinate_service.py": [
      {
        "function": "get_transformer",
        "calls": "lru_cache",
        "line": 37
      },
      {
        "function": "get_transformer",
        "calls": "from_crs",
        "line": 37
      },
      {
        "function": "get_transformer",
        "calls": "debug",
        "line": 37
      },
      {
        "function": "get_transformer",
        "calls": "CoordinateTransformError",
        "line": 37
      },
      {
        "function": "validate_coordinates",
        "calls": "isnan",
        "line": 63
      },
      {
        "function": "validate_coordinates",
        "calls": "isnan",
        "line": 63
      },
      {
        "function": "validate_coordinates",
        "calls": "isinf",
        "line": 63
      },
      {
        "function": "validate_coordinates",
        "calls": "isinf",
        "line": 63
      },
      {
        "function": "determine_utm_zone",
        "calls": "CoordinateTransformError",
        "line": 85
      },
      {
        "function": "determine_utm_zone",
        "calls": "int",
        "line": 85
      },
      {
        "function": "transform_bng_to_wgs84",
        "calls": "transform_bng_to_wgs84",
        "line": 353
      },
      {
        "function": "transform_bng_to_wgs84",
        "calls": "get_coordinate_service",
        "line": 353
      },
      {
        "function": "transform_wgs84_to_utm",
        "calls": "transform_wgs84_to_utm",
        "line": 360
      },
      {
        "function": "transform_wgs84_to_utm",
        "calls": "get_coordinate_service",
        "line": 360
      },
      {
        "function": "transform_bng_to_utm",
        "calls": "transform_bng_to_utm",
        "line": 367
      },
      {
        "function": "transform_bng_to_utm",
        "calls": "get_coordinate_service",
        "line": 367
      },
      {
        "function": "transform_bng_to_wgs84",
        "calls": "get_transformer",
        "line": 122
      },
      {
        "function": "transform_bng_to_wgs84",
        "calls": "asarray",
        "line": 122
      },
      {
        "function": "transform_bng_to_wgs84",
        "calls": "asarray",
        "line": 122
      },
      {
        "function": "transform_bng_to_wgs84",
        "calls": "transform",
        "line": 122
      },
      {
        "function": "transform_bng_to_wgs84",
        "calls": "isscalar",
        "line": 122
      },
      {
        "function": "transform_bng_to_wgs84",
        "calls": "debug",
        "line": 122
      },
      {
        "function": "transform_bng_to_wgs84",
        "calls": "any",
        "line": 122
      },
      {
        "function": "transform_bng_to_wgs84",
        "calls": "error",
        "line": 122
      },
      {
        "function": "transform_bng_to_wgs84",
        "calls": "CoordinateTransformError",
        "line": 122
      },
      {
        "function": "transform_bng_to_wgs84",
        "calls": "validate_coordinates",
        "line": 122
      },
      {
        "function": "transform_bng_to_wgs84",
        "calls": "CoordinateTransformError",
        "line": 122
      },
      {
        "function": "transform_bng_to_wgs84",
        "calls": "sum",
        "line": 122
      },
      {
        "function": "transform_bng_to_wgs84",
        "calls": "warning",
        "line": 122
      },
      {
        "function": "transform_bng_to_wgs84",
        "calls": "len",
        "line": 122
      },
      {
        "function": "transform_bng_to_wgs84",
        "calls": "atleast_1d",
        "line": 122
      },
      {
        "function": "transform_wgs84_to_utm",
        "calls": "asarray",
        "line": 179
      },
      {
        "function": "transform_wgs84_to_utm",
        "calls": "asarray",
        "line": 179
      },
      {
        "function": "transform_wgs84_to_utm",
        "calls": "isscalar",
        "line": 179
      },
      {
        "function": "transform_wgs84_to_utm",
        "calls": "determine_utm_zone",
        "line": 179
      },
      {
        "function": "transform_wgs84_to_utm",
        "calls": "get_transformer",
        "line": 179
      },
      {
        "function": "transform_wgs84_to_utm",
        "calls": "transform",
        "line": 179
      },
      {
        "function": "transform_wgs84_to_utm",
        "calls": "debug",
        "line": 179
      },
      {
        "function": "transform_wgs84_to_utm",
        "calls": "float",
        "line": 179
      },
      {
        "function": "transform_wgs84_to_utm",
        "calls": "float",
        "line": 179
      },
      {
        "function": "transform_wgs84_to_utm",
        "calls": "error",
        "line": 179
      },
      {
        "function": "transform_wgs84_to_utm",
        "calls": "CoordinateTransformError",
        "line": 179
      },
      {
        "function": "transform_wgs84_to_utm",
        "calls": "median",
        "line": 179
      },
      {
        "function": "transform_wgs84_to_utm",
        "calls": "len",
        "line": 179
      },
      {
        "function": "transform_wgs84_to_utm",
        "calls": "atleast_1d",
        "line": 179
      },
      {
        "function": "transform_wgs84_to_utm",
        "calls": "isnan",
        "line": 179
      },
      {
        "function": "transform_bng_to_utm",
        "calls": "transform_bng_to_wgs84",
        "line": 222
      },
      {
        "function": "transform_bng_to_utm",
        "calls": "transform_wgs84_to_utm",
        "line": 222
      },
      {
        "function": "transform_bng_to_utm",
        "calls": "error",
        "line": 222
      },
      {
        "function": "transform_bng_to_utm",
        "calls": "CoordinateTransformError",
        "line": 222
      },
      {
        "function": "transform_dataframe_coordinates",
        "calls": "get_transformer",
        "line": 250
      },
      {
        "function": "transform_dataframe_coordinates",
        "calls": "transform",
        "line": 250
      },
      {
        "function": "transform_dataframe_coordinates",
        "calls": "info",
        "line": 250
      },
      {
        "function": "transform_dataframe_coordinates",
        "calls": "warning",
        "line": 250
      },
      {
        "function": "transform_dataframe_coordinates",
        "calls": "copy",
        "line": 250
      },
      {
        "function": "transform_dataframe_coordinates",
        "calls": "error",
        "line": 250
      },
      {
        "function": "transform_dataframe_coordinates",
        "calls": "CoordinateTransformError",
        "line": 250
      },
      {
        "function": "transform_dataframe_coordinates",
        "calls": "lower",
        "line": 250
      },
      {
        "function": "transform_dataframe_coordinates",
        "calls": "lower",
        "line": 250
      },
      {
        "function": "transform_dataframe_coordinates",
        "calls": "len",
        "line": 250
      },
      {
        "function": "transform_dataframe_coordinates",
        "calls": "replace",
        "line": 250
      },
      {
        "function": "transform_dataframe_coordinates",
        "calls": "replace",
        "line": 250
      },
      {
        "function": "clear_cache",
        "calls": "cache_clear",
        "line": 336
      },
      {
        "function": "clear_cache",
        "calls": "info",
        "line": 336
      }
    ],
    "dataframe_optimizer.py": [
      {
        "function": "optimize_dataframe_memory",
        "calls": "info",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "sum",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "copy",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "sum",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "info",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "info",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "info",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "info",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "info",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "info",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "select_dtypes",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "select_dtypes",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "memory_usage",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "nunique",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "len",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "memory_usage",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "memory_usage",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "memory_usage",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "memory_usage",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "astype",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "memory_usage",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "append",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "debug",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "str",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "to_numeric",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "append",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "debug",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "len",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "len",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "str",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "min",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "max",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "str",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "str",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "astype",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "isna",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "isna",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "finfo",
        "line": 16
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "finfo",
        "line": 16
      },
      {
        "function": "get_dataframe_memory_report",
        "calls": "memory_usage",
        "line": 140
      },
      {
        "function": "get_dataframe_memory_report",
        "calls": "sum",
        "line": 140
      },
      {
        "function": "get_dataframe_memory_report",
        "calls": "nunique",
        "line": 140
      },
      {
        "function": "get_dataframe_memory_report",
        "calls": "len",
        "line": 140
      },
      {
        "function": "get_dataframe_memory_report",
        "calls": "str",
        "line": 140
      },
      {
        "function": "get_dataframe_memory_report",
        "calls": "append",
        "line": 140
      },
      {
        "function": "get_dataframe_memory_report",
        "calls": "append",
        "line": 140
      },
      {
        "function": "apply_categorical_optimization",
        "calls": "copy",
        "line": 205
      },
      {
        "function": "apply_categorical_optimization",
        "calls": "select_dtypes",
        "line": 205
      },
      {
        "function": "apply_categorical_optimization",
        "calls": "memory_usage",
        "line": 205
      },
      {
        "function": "apply_categorical_optimization",
        "calls": "astype",
        "line": 205
      },
      {
        "function": "apply_categorical_optimization",
        "calls": "memory_usage",
        "line": 205
      },
      {
        "function": "apply_categorical_optimization",
        "calls": "info",
        "line": 205
      },
      {
        "function": "apply_categorical_optimization",
        "calls": "nunique",
        "line": 205
      },
      {
        "function": "apply_categorical_optimization",
        "calls": "len",
        "line": 205
      },
      {
        "function": "apply_categorical_optimization",
        "calls": "append",
        "line": 205
      },
      {
        "function": "optimize_borehole_dataframe",
        "calls": "info",
        "line": 243
      },
      {
        "function": "optimize_borehole_dataframe",
        "calls": "copy",
        "line": 243
      },
      {
        "function": "optimize_borehole_dataframe",
        "calls": "optimize_dataframe_memory",
        "line": 243
      },
      {
        "function": "optimize_borehole_dataframe",
        "calls": "nunique",
        "line": 243
      },
      {
        "function": "optimize_borehole_dataframe",
        "calls": "len",
        "line": 243
      },
      {
        "function": "optimize_borehole_dataframe",
        "calls": "memory_usage",
        "line": 243
      },
      {
        "function": "optimize_borehole_dataframe",
        "calls": "astype",
        "line": 243
      },
      {
        "function": "optimize_borehole_dataframe",
        "calls": "memory_usage",
        "line": 243
      },
      {
        "function": "optimize_borehole_dataframe",
        "calls": "info",
        "line": 243
      }
    ],
    "data_loader.py": [
      {
        "function": "parse_group",
        "calls": "splitlines",
        "line": 6
      },
      {
        "function": "parse_group",
        "calls": "list",
        "line": 6
      },
      {
        "function": "parse_group",
        "calls": "DataFrame",
        "line": 6
      },
      {
        "function": "parse_group",
        "calls": "reader",
        "line": 6
      },
      {
        "function": "parse_group",
        "calls": "append",
        "line": 6
      },
      {
        "function": "parse_group",
        "calls": "len",
        "line": 6
      },
      {
        "function": "parse_group",
        "calls": "len",
        "line": 6
      },
      {
        "function": "parse_group",
        "calls": "len",
        "line": 6
      },
      {
        "function": "load_all_loca_data",
        "calls": "set",
        "line": 33
      },
      {
        "function": "load_all_loca_data",
        "calls": "parse_group",
        "line": 33
      },
      {
        "function": "load_all_loca_data",
        "calls": "dropna",
        "line": 33
      },
      {
        "function": "load_all_loca_data",
        "calls": "apply",
        "line": 33
      },
      {
        "function": "load_all_loca_data",
        "calls": "update",
        "line": 33
      },
      {
        "function": "load_all_loca_data",
        "calls": "append",
        "line": 33
      },
      {
        "function": "load_all_loca_data",
        "calls": "concat",
        "line": 33
      },
      {
        "function": "load_all_loca_data",
        "calls": "tolist",
        "line": 33
      },
      {
        "function": "load_all_loca_data",
        "calls": "to_numeric",
        "line": 33
      },
      {
        "function": "load_all_loca_data",
        "calls": "splitext",
        "line": 33
      }
    ],
    "enhanced_error_handling.py": [
      {
        "function": "retry_with_backoff",
        "calls": "wraps",
        "line": 44
      },
      {
        "function": "retry_with_backoff",
        "calls": "range",
        "line": 44
      },
      {
        "function": "retry_with_backoff",
        "calls": "getLogger",
        "line": 44
      },
      {
        "function": "retry_with_backoff",
        "calls": "func",
        "line": 44
      },
      {
        "function": "retry_with_backoff",
        "calls": "warning",
        "line": 44
      },
      {
        "function": "retry_with_backoff",
        "calls": "sleep",
        "line": 44
      },
      {
        "function": "retry_with_backoff",
        "calls": "error",
        "line": 44
      },
      {
        "function": "graceful_fallback",
        "calls": "wraps",
        "line": 99
      },
      {
        "function": "graceful_fallback",
        "calls": "func",
        "line": 99
      },
      {
        "function": "graceful_fallback",
        "calls": "error",
        "line": 99
      },
      {
        "function": "graceful_fallback",
        "calls": "error",
        "line": 99
      },
      {
        "function": "robust_coordinate_transform",
        "calls": "retry_with_backoff",
        "line": 132
      },
      {
        "function": "robust_coordinate_transform",
        "calls": "get_coordinate_service",
        "line": 132
      },
      {
        "function": "robust_coordinate_transform",
        "calls": "transform_bng_to_wgs84",
        "line": 132
      },
      {
        "function": "robust_coordinate_transform",
        "calls": "ValueError",
        "line": 132
      },
      {
        "function": "robust_coordinate_transform",
        "calls": "error",
        "line": 132
      },
      {
        "function": "safe_file_processing",
        "calls": "info",
        "line": 162
      },
      {
        "function": "safe_file_processing",
        "calls": "process_ags_content",
        "line": 162
      },
      {
        "function": "safe_file_processing",
        "calls": "info",
        "line": 162
      },
      {
        "function": "safe_file_processing",
        "calls": "ValueError",
        "line": 162
      },
      {
        "function": "safe_file_processing",
        "calls": "ValueError",
        "line": 162
      },
      {
        "function": "safe_file_processing",
        "calls": "ErrorContext",
        "line": 162
      },
      {
        "function": "safe_file_processing",
        "calls": "error",
        "line": 162
      },
      {
        "function": "safe_file_processing",
        "calls": "strip",
        "line": 162
      },
      {
        "function": "safe_file_processing",
        "calls": "str",
        "line": 162
      },
      {
        "function": "safe_marker_creation",
        "calls": "graceful_fallback",
        "line": 207
      },
      {
        "function": "safe_marker_creation",
        "calls": "enumerate",
        "line": 207
      },
      {
        "function": "safe_marker_creation",
        "calls": "info",
        "line": 207
      },
      {
        "function": "safe_marker_creation",
        "calls": "warning",
        "line": 207
      },
      {
        "function": "safe_marker_creation",
        "calls": "append",
        "line": 207
      },
      {
        "function": "safe_marker_creation",
        "calls": "ValueError",
        "line": 207
      },
      {
        "function": "safe_marker_creation",
        "calls": "ValueError",
        "line": 207
      },
      {
        "function": "safe_marker_creation",
        "calls": "ValueError",
        "line": 207
      },
      {
        "function": "safe_marker_creation",
        "calls": "ValueError",
        "line": 207
      },
      {
        "function": "safe_marker_creation",
        "calls": "warning",
        "line": 207
      },
      {
        "function": "safe_marker_creation",
        "calls": "len",
        "line": 207
      },
      {
        "function": "safe_marker_creation",
        "calls": "isinstance",
        "line": 207
      },
      {
        "function": "safe_marker_creation",
        "calls": "isinstance",
        "line": 207
      },
      {
        "function": "safe_marker_creation",
        "calls": "len",
        "line": 207
      },
      {
        "function": "safe_marker_creation",
        "calls": "type",
        "line": 207
      },
      {
        "function": "safe_marker_creation",
        "calls": "type",
        "line": 207
      },
      {
        "function": "create_user_friendly_error",
        "calls": "str",
        "line": 264
      },
      {
        "function": "create_user_friendly_error",
        "calls": "get",
        "line": 264
      },
      {
        "function": "create_user_friendly_error",
        "calls": "type",
        "line": 264
      },
      {
        "function": "create_user_friendly_error",
        "calls": "time",
        "line": 264
      },
      {
        "function": "log_performance_warning",
        "calls": "warning",
        "line": 324
      },
      {
        "function": "log_performance_warning",
        "calls": "debug",
        "line": 324
      },
      {
        "function": "__post_init__",
        "calls": "time",
        "line": 39
      },
      {
        "function": "decorator",
        "calls": "wraps",
        "line": 62
      },
      {
        "function": "decorator",
        "calls": "range",
        "line": 62
      },
      {
        "function": "decorator",
        "calls": "getLogger",
        "line": 62
      },
      {
        "function": "decorator",
        "calls": "func",
        "line": 62
      },
      {
        "function": "decorator",
        "calls": "warning",
        "line": 62
      },
      {
        "function": "decorator",
        "calls": "sleep",
        "line": 62
      },
      {
        "function": "decorator",
        "calls": "error",
        "line": 62
      },
      {
        "function": "decorator",
        "calls": "wraps",
        "line": 113
      },
      {
        "function": "decorator",
        "calls": "func",
        "line": 113
      },
      {
        "function": "decorator",
        "calls": "error",
        "line": 113
      },
      {
        "function": "decorator",
        "calls": "error",
        "line": 113
      },
      {
        "function": "__enter__",
        "calls": "time",
        "line": 350
      },
      {
        "function": "__enter__",
        "calls": "debug",
        "line": 350
      },
      {
        "function": "__exit__",
        "calls": "log_performance_warning",
        "line": 355
      },
      {
        "function": "__exit__",
        "calls": "time",
        "line": 355
      },
      {
        "function": "__exit__",
        "calls": "error",
        "line": 355
      },
      {
        "function": "failing_function",
        "calls": "retry_with_backoff",
        "line": 374
      },
      {
        "function": "failing_function",
        "calls": "ConnectionError",
        "line": 374
      },
      {
        "function": "unreliable_function",
        "calls": "graceful_fallback",
        "line": 379
      },
      {
        "function": "unreliable_function",
        "calls": "ValueError",
        "line": 379
      },
      {
        "function": "wrapper",
        "calls": "wraps",
        "line": 64
      },
      {
        "function": "wrapper",
        "calls": "range",
        "line": 64
      },
      {
        "function": "wrapper",
        "calls": "getLogger",
        "line": 64
      },
      {
        "function": "wrapper",
        "calls": "func",
        "line": 64
      },
      {
        "function": "wrapper",
        "calls": "warning",
        "line": 64
      },
      {
        "function": "wrapper",
        "calls": "sleep",
        "line": 64
      },
      {
        "function": "wrapper",
        "calls": "error",
        "line": 64
      },
      {
        "function": "wrapper",
        "calls": "wraps",
        "line": 115
      },
      {
        "function": "wrapper",
        "calls": "func",
        "line": 115
      },
      {
        "function": "wrapper",
        "calls": "error",
        "line": 115
      },
      {
        "function": "wrapper",
        "calls": "error",
        "line": 115
      }
    ],
    "error_handling.py": [
      {
        "function": "get_error_handler",
        "calls": "ErrorHandler",
        "line": 348
      },
      {
        "function": "get_error_handler",
        "calls": "info",
        "line": 348
      },
      {
        "function": "handle_callback_errors",
        "calls": "func",
        "line": 359
      },
      {
        "function": "handle_callback_errors",
        "calls": "get_error_handler",
        "line": 359
      },
      {
        "function": "handle_callback_errors",
        "calls": "handle_callback_error",
        "line": 359
      },
      {
        "function": "handle_callback_errors",
        "calls": "get_dash_error_response",
        "line": 359
      },
      {
        "function": "__post_init__",
        "calls": "now",
        "line": 58
      },
      {
        "function": "to_dict",
        "calls": "isoformat",
        "line": 66
      },
      {
        "function": "get_user_friendly_message",
        "calls": "get",
        "line": 80
      },
      {
        "function": "create_error",
        "calls": "ApplicationError",
        "line": 115
      },
      {
        "function": "create_error",
        "calls": "_log_error",
        "line": 115
      },
      {
        "function": "create_error",
        "calls": "_add_to_history",
        "line": 115
      },
      {
        "function": "create_error",
        "calls": "update",
        "line": 115
      },
      {
        "function": "create_error",
        "calls": "str",
        "line": 115
      },
      {
        "function": "create_error",
        "calls": "format_exc",
        "line": 115
      },
      {
        "function": "create_error",
        "calls": "type",
        "line": 115
      },
      {
        "function": "handle_callback_error",
        "calls": "_categorize_callback_error",
        "line": 159
      },
      {
        "function": "handle_callback_error",
        "calls": "create_error",
        "line": 159
      },
      {
        "function": "handle_callback_error",
        "calls": "lower",
        "line": 159
      },
      {
        "function": "handle_callback_error",
        "calls": "lower",
        "line": 159
      },
      {
        "function": "handle_callback_error",
        "calls": "lower",
        "line": 159
      },
      {
        "function": "handle_callback_error",
        "calls": "str",
        "line": 159
      },
      {
        "function": "handle_callback_error",
        "calls": "str",
        "line": 159
      },
      {
        "function": "handle_callback_error",
        "calls": "str",
        "line": 159
      },
      {
        "function": "handle_callback_error",
        "calls": "str",
        "line": 159
      },
      {
        "function": "handle_callback_error",
        "calls": "str",
        "line": 159
      },
      {
        "function": "get_dash_error_response",
        "calls": "_create_error_component",
        "line": 196
      },
      {
        "function": "get_dash_error_response",
        "calls": "extend",
        "line": 196
      },
      {
        "function": "get_error_history",
        "calls": "copy",
        "line": 229
      },
      {
        "function": "get_error_history",
        "calls": "sort",
        "line": 229
      },
      {
        "function": "clear_error_history",
        "calls": "clear",
        "line": 250
      },
      {
        "function": "clear_error_history",
        "calls": "info",
        "line": 250
      },
      {
        "function": "_log_error",
        "calls": "critical",
        "line": 255
      },
      {
        "function": "_log_error",
        "calls": "error",
        "line": 255
      },
      {
        "function": "_log_error",
        "calls": "warning",
        "line": 255
      },
      {
        "function": "_log_error",
        "calls": "info",
        "line": 255
      },
      {
        "function": "_log_error",
        "calls": "to_dict",
        "line": 255
      },
      {
        "function": "_log_error",
        "calls": "to_dict",
        "line": 255
      },
      {
        "function": "_log_error",
        "calls": "to_dict",
        "line": 255
      },
      {
        "function": "_log_error",
        "calls": "to_dict",
        "line": 255
      },
      {
        "function": "_add_to_history",
        "calls": "append",
        "line": 271
      },
      {
        "function": "_add_to_history",
        "calls": "len",
        "line": 271
      },
      {
        "function": "_categorize_callback_error",
        "calls": "lower",
        "line": 279
      },
      {
        "function": "_create_error_component",
        "calls": "Div",
        "line": 299
      },
      {
        "function": "_create_error_component",
        "calls": "Span",
        "line": 299
      },
      {
        "function": "_create_error_component",
        "calls": "Span",
        "line": 299
      },
      {
        "function": "_create_error_component",
        "calls": "append",
        "line": 299
      },
      {
        "function": "_create_error_component",
        "calls": "append",
        "line": 299
      },
      {
        "function": "_create_error_component",
        "calls": "get_user_friendly_message",
        "line": 299
      },
      {
        "function": "_create_error_component",
        "calls": "Br",
        "line": 299
      },
      {
        "function": "_create_error_component",
        "calls": "Small",
        "line": 299
      },
      {
        "function": "_create_error_component",
        "calls": "join",
        "line": 299
      },
      {
        "function": "decorator",
        "calls": "func",
        "line": 369
      },
      {
        "function": "decorator",
        "calls": "get_error_handler",
        "line": 369
      },
      {
        "function": "decorator",
        "calls": "handle_callback_error",
        "line": 369
      },
      {
        "function": "decorator",
        "calls": "get_dash_error_response",
        "line": 369
      },
      {
        "function": "wrapper",
        "calls": "func",
        "line": 370
      },
      {
        "function": "wrapper",
        "calls": "get_error_handler",
        "line": 370
      },
      {
        "function": "wrapper",
        "calls": "handle_callback_error",
        "line": 370
      },
      {
        "function": "wrapper",
        "calls": "get_dash_error_response",
        "line": 370
      }
    ],
    "error_recovery.py": [
      {
        "function": "with_retry",
        "calls": "retry_with_backoff",
        "line": 416
      },
      {
        "function": "with_circuit_breaker",
        "calls": "wraps",
        "line": 421
      },
      {
        "function": "with_circuit_breaker",
        "calls": "get_circuit_breaker",
        "line": 421
      },
      {
        "function": "with_circuit_breaker",
        "calls": "call",
        "line": 421
      },
      {
        "function": "with_circuit_breaker",
        "calls": "get_recovery_manager",
        "line": 421
      },
      {
        "function": "handle_gracefully",
        "calls": "wraps",
        "line": 435
      },
      {
        "function": "handle_gracefully",
        "calls": "get_recovery_manager",
        "line": 435
      },
      {
        "function": "handle_gracefully",
        "calls": "execute_with_fallback",
        "line": 435
      },
      {
        "function": "handle_gracefully",
        "calls": "register_fallback",
        "line": 435
      },
      {
        "function": "call",
        "calls": "func",
        "line": 48
      },
      {
        "function": "call",
        "calls": "_on_success",
        "line": 48
      },
      {
        "function": "call",
        "calls": "info",
        "line": 48
      },
      {
        "function": "call",
        "calls": "ErrorRecoveryError",
        "line": 48
      },
      {
        "function": "call",
        "calls": "_on_failure",
        "line": 48
      },
      {
        "function": "call",
        "calls": "time",
        "line": 48
      },
      {
        "function": "_on_success",
        "calls": "info",
        "line": 67
      },
      {
        "function": "_on_failure",
        "calls": "time",
        "line": 74
      },
      {
        "function": "_on_failure",
        "calls": "warning",
        "line": 74
      },
      {
        "function": "retry_with_backoff",
        "calls": "wraps",
        "line": 90
      },
      {
        "function": "retry_with_backoff",
        "calls": "range",
        "line": 90
      },
      {
        "function": "retry_with_backoff",
        "calls": "func",
        "line": 90
      },
      {
        "function": "retry_with_backoff",
        "calls": "min",
        "line": 90
      },
      {
        "function": "retry_with_backoff",
        "calls": "warning",
        "line": 90
      },
      {
        "function": "retry_with_backoff",
        "calls": "sleep",
        "line": 90
      },
      {
        "function": "retry_with_backoff",
        "calls": "error",
        "line": 90
      },
      {
        "function": "__init__",
        "calls": "set",
        "line": 141
      },
      {
        "function": "disable_feature",
        "calls": "add",
        "line": 145
      },
      {
        "function": "disable_feature",
        "calls": "warning",
        "line": 145
      },
      {
        "function": "enable_feature",
        "calls": "remove",
        "line": 150
      },
      {
        "function": "enable_feature",
        "calls": "info",
        "line": 150
      },
      {
        "function": "execute_with_fallback",
        "calls": "is_feature_enabled",
        "line": 164
      },
      {
        "function": "execute_with_fallback",
        "calls": "primary_func",
        "line": 164
      },
      {
        "function": "execute_with_fallback",
        "calls": "info",
        "line": 164
      },
      {
        "function": "execute_with_fallback",
        "calls": "ErrorRecoveryError",
        "line": 164
      },
      {
        "function": "execute_with_fallback",
        "calls": "error",
        "line": 164
      },
      {
        "function": "execute_with_fallback",
        "calls": "info",
        "line": 164
      },
      {
        "function": "execute_with_fallback",
        "calls": "error",
        "line": 164
      },
      {
        "function": "create_user_friendly_message",
        "calls": "str",
        "line": 208
      },
      {
        "function": "create_user_friendly_message",
        "calls": "get",
        "line": 208
      },
      {
        "function": "create_user_friendly_message",
        "calls": "type",
        "line": 208
      },
      {
        "function": "create_user_friendly_message",
        "calls": "format_exc",
        "line": 208
      },
      {
        "function": "log_error",
        "calls": "error",
        "line": 317
      },
      {
        "function": "log_error",
        "calls": "str",
        "line": 317
      },
      {
        "function": "log_error",
        "calls": "time",
        "line": 317
      },
      {
        "function": "log_error",
        "calls": "format_exc",
        "line": 317
      },
      {
        "function": "log_error",
        "calls": "type",
        "line": 317
      },
      {
        "function": "__init__",
        "calls": "GracefulDegradation",
        "line": 343
      },
      {
        "function": "get_circuit_breaker",
        "calls": "CircuitBreaker",
        "line": 348
      },
      {
        "function": "handle_operation",
        "calls": "log_error",
        "line": 355
      },
      {
        "function": "handle_operation",
        "calls": "create_user_friendly_message",
        "line": 355
      },
      {
        "function": "handle_operation",
        "calls": "ErrorRecoveryError",
        "line": 355
      },
      {
        "function": "handle_operation",
        "calls": "get",
        "line": 355
      },
      {
        "function": "handle_operation",
        "calls": "disable_feature",
        "line": 355
      },
      {
        "function": "reset_error_counts",
        "calls": "clear",
        "line": 388
      },
      {
        "function": "reset_error_counts",
        "calls": "info",
        "line": 388
      },
      {
        "function": "get_system_health",
        "calls": "list",
        "line": 393
      },
      {
        "function": "get_system_health",
        "calls": "dict",
        "line": 393
      },
      {
        "function": "get_system_health",
        "calls": "sum",
        "line": 393
      },
      {
        "function": "get_system_health",
        "calls": "values",
        "line": 393
      },
      {
        "function": "get_system_health",
        "calls": "items",
        "line": 393
      },
      {
        "function": "decorator",
        "calls": "wraps",
        "line": 424
      },
      {
        "function": "decorator",
        "calls": "get_circuit_breaker",
        "line": 424
      },
      {
        "function": "decorator",
        "calls": "call",
        "line": 424
      },
      {
        "function": "decorator",
        "calls": "get_recovery_manager",
        "line": 424
      },
      {
        "function": "decorator",
        "calls": "wraps",
        "line": 438
      },
      {
        "function": "decorator",
        "calls": "get_recovery_manager",
        "line": 438
      },
      {
        "function": "decorator",
        "calls": "execute_with_fallback",
        "line": 438
      },
      {
        "function": "decorator",
        "calls": "register_fallback",
        "line": 438
      },
      {
        "function": "test_function",
        "calls": "with_retry",
        "line": 467
      },
      {
        "function": "decorator",
        "calls": "wraps",
        "line": 106
      },
      {
        "function": "decorator",
        "calls": "range",
        "line": 106
      },
      {
        "function": "decorator",
        "calls": "func",
        "line": 106
      },
      {
        "function": "decorator",
        "calls": "min",
        "line": 106
      },
      {
        "function": "decorator",
        "calls": "warning",
        "line": 106
      },
      {
        "function": "decorator",
        "calls": "sleep",
        "line": 106
      },
      {
        "function": "decorator",
        "calls": "error",
        "line": 106
      },
      {
        "function": "wrapper",
        "calls": "wraps",
        "line": 426
      },
      {
        "function": "wrapper",
        "calls": "get_circuit_breaker",
        "line": 426
      },
      {
        "function": "wrapper",
        "calls": "call",
        "line": 426
      },
      {
        "function": "wrapper",
        "calls": "get_recovery_manager",
        "line": 426
      },
      {
        "function": "wrapper",
        "calls": "wraps",
        "line": 440
      },
      {
        "function": "wrapper",
        "calls": "get_recovery_manager",
        "line": 440
      },
      {
        "function": "wrapper",
        "calls": "execute_with_fallback",
        "line": 440
      },
      {
        "function": "wrapper",
        "calls": "register_fallback",
        "line": 440
      },
      {
        "function": "wrapper",
        "calls": "wraps",
        "line": 108
      },
      {
        "function": "wrapper",
        "calls": "range",
        "line": 108
      },
      {
        "function": "wrapper",
        "calls": "func",
        "line": 108
      },
      {
        "function": "wrapper",
        "calls": "min",
        "line": 108
      },
      {
        "function": "wrapper",
        "calls": "warning",
        "line": 108
      },
      {
        "function": "wrapper",
        "calls": "sleep",
        "line": 108
      },
      {
        "function": "wrapper",
        "calls": "error",
        "line": 108
      }
    ],
    "generate_dependency_graph.py": [
      {
        "function": "extract_imports",
        "calls": "parse",
        "line": 9
      },
      {
        "function": "extract_imports",
        "calls": "walk",
        "line": 9
      },
      {
        "function": "extract_imports",
        "calls": "open",
        "line": 9
      },
      {
        "function": "extract_imports",
        "calls": "read",
        "line": 9
      },
      {
        "function": "extract_imports",
        "calls": "isinstance",
        "line": 9
      },
      {
        "function": "extract_imports",
        "calls": "print",
        "line": 9
      },
      {
        "function": "extract_imports",
        "calls": "isinstance",
        "line": 9
      },
      {
        "function": "extract_imports",
        "calls": "append",
        "line": 9
      },
      {
        "function": "extract_imports",
        "calls": "append",
        "line": 9
      },
      {
        "function": "extract_imports",
        "calls": "split",
        "line": 9
      },
      {
        "function": "extract_imports",
        "calls": "split",
        "line": 9
      },
      {
        "function": "create_dependency_graph",
        "calls": "set",
        "line": 32
      },
      {
        "function": "create_dependency_graph",
        "calls": "add",
        "line": 32
      },
      {
        "function": "create_dependency_graph",
        "calls": "extract_imports",
        "line": 32
      },
      {
        "function": "create_dependency_graph",
        "calls": "open",
        "line": 32
      },
      {
        "function": "create_dependency_graph",
        "calls": "write",
        "line": 32
      },
      {
        "function": "create_dependency_graph",
        "calls": "write",
        "line": 32
      },
      {
        "function": "create_dependency_graph",
        "calls": "write",
        "line": 32
      },
      {
        "function": "create_dependency_graph",
        "calls": "items",
        "line": 32
      },
      {
        "function": "create_dependency_graph",
        "calls": "write",
        "line": 32
      },
      {
        "function": "create_dependency_graph",
        "calls": "Path",
        "line": 32
      },
      {
        "function": "create_dependency_graph",
        "calls": "Path",
        "line": 32
      },
      {
        "function": "create_dependency_graph",
        "calls": "write",
        "line": 32
      },
      {
        "function": "create_dependency_graph",
        "calls": "write",
        "line": 32
      },
      {
        "function": "main",
        "calls": "join",
        "line": 70
      },
      {
        "function": "main",
        "calls": "join",
        "line": 70
      },
      {
        "function": "main",
        "calls": "glob",
        "line": 70
      },
      {
        "function": "main",
        "calls": "makedirs",
        "line": 70
      },
      {
        "function": "main",
        "calls": "print",
        "line": 70
      },
      {
        "function": "main",
        "calls": "create_dependency_graph",
        "line": 70
      },
      {
        "function": "main",
        "calls": "print",
        "line": 70
      },
      {
        "function": "main",
        "calls": "run",
        "line": 70
      },
      {
        "function": "main",
        "calls": "print",
        "line": 70
      },
      {
        "function": "main",
        "calls": "print",
        "line": 70
      },
      {
        "function": "main",
        "calls": "print",
        "line": 70
      },
      {
        "function": "main",
        "calls": "print",
        "line": 70
      },
      {
        "function": "main",
        "calls": "print",
        "line": 70
      },
      {
        "function": "main",
        "calls": "print",
        "line": 70
      },
      {
        "function": "main",
        "calls": "print",
        "line": 70
      }
    ],
    "generate_flowchart_data.py": [
      {
        "function": "main",
        "calls": "EnhancedCodeAnalyzer",
        "line": 458
      },
      {
        "function": "main",
        "calls": "print",
        "line": 458
      },
      {
        "function": "main",
        "calls": "analyze_project",
        "line": 458
      },
      {
        "function": "main",
        "calls": "generate_analysis_report",
        "line": 458
      },
      {
        "function": "main",
        "calls": "save_enhanced_analysis",
        "line": 458
      },
      {
        "function": "main",
        "calls": "Path",
        "line": 458
      },
      {
        "function": "__init__",
        "calls": "Path",
        "line": 24
      },
      {
        "function": "__init__",
        "calls": "defaultdict",
        "line": 24
      },
      {
        "function": "__init__",
        "calls": "defaultdict",
        "line": 24
      },
      {
        "function": "__init__",
        "calls": "defaultdict",
        "line": 24
      },
      {
        "function": "__init__",
        "calls": "defaultdict",
        "line": 24
      },
      {
        "function": "__init__",
        "calls": "defaultdict",
        "line": 24
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "parse",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "set",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "walk",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "walk",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "walk",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "isinstance",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "isinstance",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "isinstance",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "print",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "isinstance",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "calculate_function_complexity",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "walk",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "append",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "append",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "set",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "add",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "isinstance",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "isinstance",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "add",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "isinstance",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "getattr",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "get_docstring",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "calculate_function_complexity",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "append",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "get_docstring",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "split",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "append",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "isinstance",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "split",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "append",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "isinstance",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "str",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "get_docstring",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "any",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "isinstance",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "str",
        "line": 34
      },
      {
        "function": "analyze_ast_detailed",
        "calls": "isinstance",
        "line": 34
      },
      {
        "function": "calculate_function_complexity",
        "calls": "walk",
        "line": 106
      },
      {
        "function": "calculate_function_complexity",
        "calls": "isinstance",
        "line": 106
      },
      {
        "function": "calculate_function_complexity",
        "calls": "isinstance",
        "line": 106
      },
      {
        "function": "calculate_function_complexity",
        "calls": "isinstance",
        "line": 106
      },
      {
        "function": "calculate_function_complexity",
        "calls": "isinstance",
        "line": 106
      },
      {
        "function": "calculate_function_complexity",
        "calls": "len",
        "line": 106
      },
      {
        "function": "get_git_info",
        "calls": "relative_to",
        "line": 123
      },
      {
        "function": "get_git_info",
        "calls": "run",
        "line": 123
      },
      {
        "function": "get_git_info",
        "calls": "run",
        "line": 123
      },
      {
        "function": "get_git_info",
        "calls": "strip",
        "line": 123
      },
      {
        "function": "get_git_info",
        "calls": "split",
        "line": 123
      },
      {
        "function": "get_git_info",
        "calls": "strip",
        "line": 123
      },
      {
        "function": "get_git_info",
        "calls": "int",
        "line": 123
      },
      {
        "function": "get_git_info",
        "calls": "print",
        "line": 123
      },
      {
        "function": "get_git_info",
        "calls": "str",
        "line": 123
      },
      {
        "function": "get_git_info",
        "calls": "len",
        "line": 123
      },
      {
        "function": "get_git_info",
        "calls": "str",
        "line": 123
      },
      {
        "function": "get_git_info",
        "calls": "strip",
        "line": 123
      },
      {
        "function": "get_git_info",
        "calls": "strip",
        "line": 123
      },
      {
        "function": "analyze_file_detailed",
        "calls": "str",
        "line": 158
      },
      {
        "function": "analyze_file_detailed",
        "calls": "splitlines",
        "line": 158
      },
      {
        "function": "analyze_file_detailed",
        "calls": "len",
        "line": 158
      },
      {
        "function": "analyze_file_detailed",
        "calls": "len",
        "line": 158
      },
      {
        "function": "analyze_file_detailed",
        "calls": "len",
        "line": 158
      },
      {
        "function": "analyze_file_detailed",
        "calls": "stat",
        "line": 158
      },
      {
        "function": "analyze_file_detailed",
        "calls": "get_git_info",
        "line": 158
      },
      {
        "function": "analyze_file_detailed",
        "calls": "analyze_ast_detailed",
        "line": 158
      },
      {
        "function": "analyze_file_detailed",
        "calls": "sum",
        "line": 158
      },
      {
        "function": "analyze_file_detailed",
        "calls": "categorize_file_detailed",
        "line": 158
      },
      {
        "function": "analyze_file_detailed",
        "calls": "open",
        "line": 158
      },
      {
        "function": "analyze_file_detailed",
        "calls": "read",
        "line": 158
      },
      {
        "function": "analyze_file_detailed",
        "calls": "relative_to",
        "line": 158
      },
      {
        "function": "analyze_file_detailed",
        "calls": "round",
        "line": 158
      },
      {
        "function": "analyze_file_detailed",
        "calls": "len",
        "line": 158
      },
      {
        "function": "analyze_file_detailed",
        "calls": "len",
        "line": 158
      },
      {
        "function": "analyze_file_detailed",
        "calls": "len",
        "line": 158
      },
      {
        "function": "analyze_file_detailed",
        "calls": "print",
        "line": 158
      },
      {
        "function": "analyze_file_detailed",
        "calls": "len",
        "line": 158
      },
      {
        "function": "analyze_file_detailed",
        "calls": "exists",
        "line": 158
      },
      {
        "function": "analyze_file_detailed",
        "calls": "append",
        "line": 158
      },
      {
        "function": "analyze_file_detailed",
        "calls": "startswith",
        "line": 158
      },
      {
        "function": "analyze_file_detailed",
        "calls": "add",
        "line": 158
      },
      {
        "function": "analyze_file_detailed",
        "calls": "strip",
        "line": 158
      },
      {
        "function": "analyze_file_detailed",
        "calls": "len",
        "line": 158
      },
      {
        "function": "analyze_file_detailed",
        "calls": "startswith",
        "line": 158
      },
      {
        "function": "analyze_file_detailed",
        "calls": "strip",
        "line": 158
      },
      {
        "function": "analyze_file_detailed",
        "calls": "strip",
        "line": 158
      },
      {
        "function": "categorize_file_detailed",
        "calls": "lower",
        "line": 241
      },
      {
        "function": "categorize_file_detailed",
        "calls": "any",
        "line": 241
      },
      {
        "function": "categorize_file_detailed",
        "calls": "any",
        "line": 241
      },
      {
        "function": "categorize_file_detailed",
        "calls": "any",
        "line": 241
      },
      {
        "function": "categorize_file_detailed",
        "calls": "any",
        "line": 241
      },
      {
        "function": "categorize_file_detailed",
        "calls": "any",
        "line": 241
      },
      {
        "function": "categorize_file_detailed",
        "calls": "endswith",
        "line": 241
      },
      {
        "function": "categorize_file_detailed",
        "calls": "len",
        "line": 241
      },
      {
        "function": "categorize_file_detailed",
        "calls": "len",
        "line": 241
      },
      {
        "function": "categorize_file_detailed",
        "calls": "len",
        "line": 241
      },
      {
        "function": "categorize_file_detailed",
        "calls": "len",
        "line": 241
      },
      {
        "function": "generate_network_metrics",
        "calls": "DiGraph",
        "line": 283
      },
      {
        "function": "generate_network_metrics",
        "calls": "items",
        "line": 283
      },
      {
        "function": "generate_network_metrics",
        "calls": "items",
        "line": 283
      },
      {
        "function": "generate_network_metrics",
        "calls": "add_node",
        "line": 283
      },
      {
        "function": "generate_network_metrics",
        "calls": "betweenness_centrality",
        "line": 283
      },
      {
        "function": "generate_network_metrics",
        "calls": "closeness_centrality",
        "line": 283
      },
      {
        "function": "generate_network_metrics",
        "calls": "dict",
        "line": 283
      },
      {
        "function": "generate_network_metrics",
        "calls": "dict",
        "line": 283
      },
      {
        "function": "generate_network_metrics",
        "calls": "dict",
        "line": 283
      },
      {
        "function": "generate_network_metrics",
        "calls": "nodes",
        "line": 283
      },
      {
        "function": "generate_network_metrics",
        "calls": "print",
        "line": 283
      },
      {
        "function": "generate_network_metrics",
        "calls": "degree",
        "line": 283
      },
      {
        "function": "generate_network_metrics",
        "calls": "in_degree",
        "line": 283
      },
      {
        "function": "generate_network_metrics",
        "calls": "out_degree",
        "line": 283
      },
      {
        "function": "generate_network_metrics",
        "calls": "nodes",
        "line": 283
      },
      {
        "function": "generate_network_metrics",
        "calls": "add_edge",
        "line": 283
      },
      {
        "function": "generate_network_metrics",
        "calls": "round",
        "line": 283
      },
      {
        "function": "generate_network_metrics",
        "calls": "round",
        "line": 283
      },
      {
        "function": "generate_network_metrics",
        "calls": "get",
        "line": 283
      },
      {
        "function": "generate_network_metrics",
        "calls": "get",
        "line": 283
      },
      {
        "function": "generate_network_metrics",
        "calls": "get",
        "line": 283
      },
      {
        "function": "generate_network_metrics",
        "calls": "get",
        "line": 283
      },
      {
        "function": "generate_network_metrics",
        "calls": "get",
        "line": 283
      },
      {
        "function": "generate_network_metrics",
        "calls": "degree",
        "line": 283
      },
      {
        "function": "generate_network_metrics",
        "calls": "in_degree",
        "line": 283
      },
      {
        "function": "generate_network_metrics",
        "calls": "out_degree",
        "line": 283
      },
      {
        "function": "analyze_project",
        "calls": "print",
        "line": 335
      },
      {
        "function": "analyze_project",
        "calls": "walk",
        "line": 335
      },
      {
        "function": "analyze_project",
        "calls": "print",
        "line": 335
      },
      {
        "function": "analyze_project",
        "calls": "enumerate",
        "line": 335
      },
      {
        "function": "analyze_project",
        "calls": "print",
        "line": 335
      },
      {
        "function": "analyze_project",
        "calls": "print",
        "line": 335
      },
      {
        "function": "analyze_project",
        "calls": "analyze_file_detailed",
        "line": 335
      },
      {
        "function": "analyze_project",
        "calls": "endswith",
        "line": 335
      },
      {
        "function": "analyze_project",
        "calls": "append",
        "line": 335
      },
      {
        "function": "analyze_project",
        "calls": "len",
        "line": 335
      },
      {
        "function": "analyze_project",
        "calls": "Path",
        "line": 335
      },
      {
        "function": "analyze_project",
        "calls": "len",
        "line": 335
      },
      {
        "function": "analyze_project",
        "calls": "relative_to",
        "line": 335
      },
      {
        "function": "analyze_project",
        "calls": "startswith",
        "line": 335
      },
      {
        "function": "generate_analysis_report",
        "calls": "len",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "sum",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "sum",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "sum",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "sum",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "sum",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "Counter",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "print",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "print",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "print",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "print",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "print",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "print",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "print",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "print",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "print",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "print",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "print",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "print",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "most_common",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "print",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "print",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "sorted",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "sorted",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "print",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "print",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "print",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "len",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "len",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "items",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "items",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "values",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "values",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "values",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "values",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "values",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "values",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "len",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "title",
        "line": 359
      },
      {
        "function": "generate_analysis_report",
        "calls": "len",
        "line": 359
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "generate_network_metrics",
        "line": 409
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "items",
        "line": 409
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "print",
        "line": 409
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "print",
        "line": 409
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "dict",
        "line": 409
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "dict",
        "line": 409
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "dict",
        "line": 409
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "open",
        "line": 409
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "dump",
        "line": 409
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "str",
        "line": 409
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "isoformat",
        "line": 409
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "len",
        "line": 409
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "sum",
        "line": 409
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "sum",
        "line": 409
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "list",
        "line": 409
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "list",
        "line": 409
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "Counter",
        "line": 409
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "items",
        "line": 409
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "items",
        "line": 409
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "len",
        "line": 409
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "len",
        "line": 409
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "len",
        "line": 409
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "now",
        "line": 409
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "values",
        "line": 409
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "values",
        "line": 409
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "values",
        "line": 409
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "stat",
        "line": 409
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "values",
        "line": 409
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "values",
        "line": 409
      },
      {
        "function": "save_enhanced_analysis",
        "calls": "values",
        "line": 409
      }
    ],
    "geology_code_utils.py": [
      {
        "function": "load_geology_code_mappings",
        "calls": "print",
        "line": 7
      },
      {
        "function": "load_geology_code_mappings",
        "calls": "join",
        "line": 7
      },
      {
        "function": "load_geology_code_mappings",
        "calls": "print",
        "line": 7
      },
      {
        "function": "load_geology_code_mappings",
        "calls": "dirname",
        "line": 7
      },
      {
        "function": "load_geology_code_mappings",
        "calls": "open",
        "line": 7
      },
      {
        "function": "load_geology_code_mappings",
        "calls": "DictReader",
        "line": 7
      },
      {
        "function": "load_geology_code_mappings",
        "calls": "print",
        "line": 7
      },
      {
        "function": "load_geology_code_mappings",
        "calls": "strip",
        "line": 7
      },
      {
        "function": "load_geology_code_mappings",
        "calls": "print",
        "line": 7
      },
      {
        "function": "load_geology_code_mappings",
        "calls": "strip",
        "line": 7
      },
      {
        "function": "load_geology_code_mappings",
        "calls": "strip",
        "line": 7
      },
      {
        "function": "load_geology_code_mappings",
        "calls": "len",
        "line": 7
      },
      {
        "function": "load_geology_code_mappings",
        "calls": "len",
        "line": 7
      },
      {
        "function": "load_geology_code_mappings",
        "calls": "str",
        "line": 7
      },
      {
        "function": "get_geology_color",
        "calls": "get",
        "line": 45
      },
      {
        "function": "get_geology_color",
        "calls": "str",
        "line": 45
      },
      {
        "function": "get_geology_pattern",
        "calls": "get",
        "line": 49
      },
      {
        "function": "get_geology_pattern",
        "calls": "str",
        "line": 49
      }
    ],
    "health_check.py": [
      {
        "function": "run_health_check",
        "calls": "run_health_check",
        "line": 504
      },
      {
        "function": "run_health_check",
        "calls": "get_health_checker",
        "line": 504
      },
      {
        "function": "get_quick_health_status",
        "calls": "get_quick_status",
        "line": 509
      },
      {
        "function": "get_quick_health_status",
        "calls": "get_health_checker",
        "line": 509
      },
      {
        "function": "__init__",
        "calls": "time",
        "line": 47
      },
      {
        "function": "get_system_info",
        "calls": "platform",
        "line": 52
      },
      {
        "function": "get_system_info",
        "calls": "python_version",
        "line": 52
      },
      {
        "function": "get_system_info",
        "calls": "processor",
        "line": 52
      },
      {
        "function": "get_system_info",
        "calls": "node",
        "line": 52
      },
      {
        "function": "get_system_info",
        "calls": "isoformat",
        "line": 52
      },
      {
        "function": "get_system_info",
        "calls": "architecture",
        "line": 52
      },
      {
        "function": "get_system_info",
        "calls": "time",
        "line": 52
      },
      {
        "function": "get_system_info",
        "calls": "boot_time",
        "line": 52
      },
      {
        "function": "get_system_info",
        "calls": "fromtimestamp",
        "line": 52
      },
      {
        "function": "get_system_info",
        "calls": "boot_time",
        "line": 52
      },
      {
        "function": "get_memory_info",
        "calls": "virtual_memory",
        "line": 64
      },
      {
        "function": "get_memory_info",
        "calls": "swap_memory",
        "line": 64
      },
      {
        "function": "get_memory_info",
        "calls": "round",
        "line": 64
      },
      {
        "function": "get_memory_info",
        "calls": "round",
        "line": 64
      },
      {
        "function": "get_memory_info",
        "calls": "round",
        "line": 64
      },
      {
        "function": "get_memory_info",
        "calls": "round",
        "line": 64
      },
      {
        "function": "get_memory_info",
        "calls": "round",
        "line": 64
      },
      {
        "function": "get_memory_info",
        "calls": "_assess_memory_status",
        "line": 64
      },
      {
        "function": "get_cpu_info",
        "calls": "cpu_percent",
        "line": 80
      },
      {
        "function": "get_cpu_info",
        "calls": "cpu_count",
        "line": 80
      },
      {
        "function": "get_cpu_info",
        "calls": "cpu_freq",
        "line": 80
      },
      {
        "function": "get_cpu_info",
        "calls": "cpu_count",
        "line": 80
      },
      {
        "function": "get_cpu_info",
        "calls": "_assess_cpu_status",
        "line": 80
      },
      {
        "function": "get_disk_info",
        "calls": "disk_usage",
        "line": 95
      },
      {
        "function": "get_disk_info",
        "calls": "disk_io_counters",
        "line": 95
      },
      {
        "function": "get_disk_info",
        "calls": "round",
        "line": 95
      },
      {
        "function": "get_disk_info",
        "calls": "round",
        "line": 95
      },
      {
        "function": "get_disk_info",
        "calls": "round",
        "line": 95
      },
      {
        "function": "get_disk_info",
        "calls": "round",
        "line": 95
      },
      {
        "function": "get_disk_info",
        "calls": "_assess_disk_status",
        "line": 95
      },
      {
        "function": "get_disk_info",
        "calls": "warning",
        "line": 95
      },
      {
        "function": "get_disk_info",
        "calls": "str",
        "line": 95
      },
      {
        "function": "check_coordinate_service",
        "calls": "time",
        "line": 149
      },
      {
        "function": "check_coordinate_service",
        "calls": "get_coordinate_service",
        "line": 149
      },
      {
        "function": "check_coordinate_service",
        "calls": "transform_bng_to_wgs84",
        "line": 149
      },
      {
        "function": "check_coordinate_service",
        "calls": "get_cache_stats",
        "line": 149
      },
      {
        "function": "check_coordinate_service",
        "calls": "time",
        "line": 149
      },
      {
        "function": "check_coordinate_service",
        "calls": "round",
        "line": 149
      },
      {
        "function": "check_coordinate_service",
        "calls": "format_exc",
        "line": 149
      },
      {
        "function": "check_coordinate_service",
        "calls": "str",
        "line": 149
      },
      {
        "function": "check_file_system",
        "calls": "remove",
        "line": 186
      },
      {
        "function": "check_file_system",
        "calls": "open",
        "line": 186
      },
      {
        "function": "check_file_system",
        "calls": "write",
        "line": 186
      },
      {
        "function": "check_file_system",
        "calls": "open",
        "line": 186
      },
      {
        "function": "check_file_system",
        "calls": "read",
        "line": 186
      },
      {
        "function": "check_file_system",
        "calls": "format_exc",
        "line": 186
      },
      {
        "function": "check_file_system",
        "calls": "str",
        "line": 186
      },
      {
        "function": "check_required_modules",
        "calls": "len",
        "line": 231
      },
      {
        "function": "check_required_modules",
        "calls": "sum",
        "line": 231
      },
      {
        "function": "check_required_modules",
        "calls": "__import__",
        "line": 231
      },
      {
        "function": "check_required_modules",
        "calls": "str",
        "line": 231
      },
      {
        "function": "check_required_modules",
        "calls": "values",
        "line": 231
      },
      {
        "function": "record_request_time",
        "calls": "time",
        "line": 285
      },
      {
        "function": "record_request_time",
        "calls": "append",
        "line": 285
      },
      {
        "function": "get_performance_stats",
        "calls": "max",
        "line": 298
      },
      {
        "function": "get_performance_stats",
        "calls": "min",
        "line": 298
      },
      {
        "function": "get_performance_stats",
        "calls": "sum",
        "line": 298
      },
      {
        "function": "get_performance_stats",
        "calls": "len",
        "line": 298
      },
      {
        "function": "get_performance_stats",
        "calls": "len",
        "line": 298
      },
      {
        "function": "get_performance_stats",
        "calls": "len",
        "line": 298
      },
      {
        "function": "get_performance_stats",
        "calls": "round",
        "line": 298
      },
      {
        "function": "get_performance_stats",
        "calls": "round",
        "line": 298
      },
      {
        "function": "get_performance_stats",
        "calls": "round",
        "line": 298
      },
      {
        "function": "get_performance_stats",
        "calls": "len",
        "line": 298
      },
      {
        "function": "get_performance_stats",
        "calls": "time",
        "line": 298
      },
      {
        "function": "__init__",
        "calls": "SystemMonitor",
        "line": 343
      },
      {
        "function": "__init__",
        "calls": "ServiceHealthChecker",
        "line": 343
      },
      {
        "function": "__init__",
        "calls": "PerformanceMonitor",
        "line": 343
      },
      {
        "function": "run_health_check",
        "calls": "time",
        "line": 350
      },
      {
        "function": "run_health_check",
        "calls": "isoformat",
        "line": 350
      },
      {
        "function": "run_health_check",
        "calls": "_determine_overall_status",
        "line": 350
      },
      {
        "function": "run_health_check",
        "calls": "round",
        "line": 350
      },
      {
        "function": "run_health_check",
        "calls": "time",
        "line": 350
      },
      {
        "function": "run_health_check",
        "calls": "check_coordinate_service",
        "line": 350
      },
      {
        "function": "run_health_check",
        "calls": "check_file_system",
        "line": 350
      },
      {
        "function": "run_health_check",
        "calls": "check_required_modules",
        "line": 350
      },
      {
        "function": "run_health_check",
        "calls": "get_performance_stats",
        "line": 350
      },
      {
        "function": "run_health_check",
        "calls": "get_recovery_manager",
        "line": 350
      },
      {
        "function": "run_health_check",
        "calls": "get_system_health",
        "line": 350
      },
      {
        "function": "run_health_check",
        "calls": "now",
        "line": 350
      },
      {
        "function": "run_health_check",
        "calls": "str",
        "line": 350
      },
      {
        "function": "run_health_check",
        "calls": "get_system_info",
        "line": 350
      },
      {
        "function": "run_health_check",
        "calls": "get_memory_info",
        "line": 350
      },
      {
        "function": "run_health_check",
        "calls": "get_cpu_info",
        "line": 350
      },
      {
        "function": "run_health_check",
        "calls": "get_disk_info",
        "line": 350
      },
      {
        "function": "run_health_check",
        "calls": "time",
        "line": 350
      },
      {
        "function": "run_health_check",
        "calls": "str",
        "line": 350
      },
      {
        "function": "run_health_check",
        "calls": "str",
        "line": 350
      },
      {
        "function": "run_health_check",
        "calls": "str",
        "line": 350
      },
      {
        "function": "run_health_check",
        "calls": "time",
        "line": 350
      },
      {
        "function": "_determine_overall_status",
        "calls": "values",
        "line": 434
      },
      {
        "function": "_determine_overall_status",
        "calls": "values",
        "line": 434
      },
      {
        "function": "_determine_overall_status",
        "calls": "get",
        "line": 434
      },
      {
        "function": "_determine_overall_status",
        "calls": "append",
        "line": 434
      },
      {
        "function": "_determine_overall_status",
        "calls": "get",
        "line": 434
      },
      {
        "function": "_determine_overall_status",
        "calls": "isinstance",
        "line": 434
      },
      {
        "function": "_determine_overall_status",
        "calls": "append",
        "line": 434
      },
      {
        "function": "_determine_overall_status",
        "calls": "get",
        "line": 434
      },
      {
        "function": "_determine_overall_status",
        "calls": "isinstance",
        "line": 434
      },
      {
        "function": "_determine_overall_status",
        "calls": "append",
        "line": 434
      },
      {
        "function": "get_quick_status",
        "calls": "run_health_check",
        "line": 461
      },
      {
        "function": "get_quick_status",
        "calls": "time",
        "line": 461
      },
      {
        "function": "get_quick_status",
        "calls": "time",
        "line": 461
      },
      {
        "function": "get_quick_status",
        "calls": "isoformat",
        "line": 461
      },
      {
        "function": "get_quick_status",
        "calls": "str",
        "line": 461
      },
      {
        "function": "get_quick_status",
        "calls": "time",
        "line": 461
      },
      {
        "function": "get_quick_status",
        "calls": "now",
        "line": 461
      }
    ],
    "lazy_marker_manager.py": [
      {
        "function": "get_lazy_marker_manager",
        "calls": "LazyMarkerManager",
        "line": 429
      },
      {
        "function": "create_viewport_bounds",
        "calls": "ViewportBounds",
        "line": 438
      },
      {
        "function": "__init__",
        "calls": "info",
        "line": 50
      },
      {
        "function": "get_visible_markers",
        "calls": "_filter_by_viewport",
        "line": 71
      },
      {
        "function": "get_visible_markers",
        "calls": "info",
        "line": 71
      },
      {
        "function": "get_visible_markers",
        "calls": "_create_all_markers",
        "line": 71
      },
      {
        "function": "get_visible_markers",
        "calls": "head",
        "line": 71
      },
      {
        "function": "get_visible_markers",
        "calls": "info",
        "line": 71
      },
      {
        "function": "get_visible_markers",
        "calls": "_create_all_markers",
        "line": 71
      },
      {
        "function": "get_visible_markers",
        "calls": "_create_clustered_markers",
        "line": 71
      },
      {
        "function": "get_visible_markers",
        "calls": "_create_viewport_markers",
        "line": 71
      },
      {
        "function": "get_visible_markers",
        "calls": "error",
        "line": 71
      },
      {
        "function": "get_visible_markers",
        "calls": "_create_all_markers",
        "line": 71
      },
      {
        "function": "get_visible_markers",
        "calls": "len",
        "line": 71
      },
      {
        "function": "get_visible_markers",
        "calls": "head",
        "line": 71
      },
      {
        "function": "get_visible_markers",
        "calls": "len",
        "line": 71
      },
      {
        "function": "get_visible_markers",
        "calls": "len",
        "line": 71
      },
      {
        "function": "_filter_by_viewport",
        "calls": "info",
        "line": 126
      },
      {
        "function": "_filter_by_viewport",
        "calls": "abs",
        "line": 126
      },
      {
        "function": "_filter_by_viewport",
        "calls": "abs",
        "line": 126
      },
      {
        "function": "_filter_by_viewport",
        "calls": "len",
        "line": 126
      },
      {
        "function": "_filter_by_viewport",
        "calls": "len",
        "line": 126
      },
      {
        "function": "_create_viewport_markers",
        "calls": "_create_all_markers",
        "line": 165
      },
      {
        "function": "_create_viewport_markers",
        "calls": "len",
        "line": 165
      },
      {
        "function": "_create_viewport_markers",
        "calls": "max",
        "line": 165
      },
      {
        "function": "_create_viewport_markers",
        "calls": "head",
        "line": 165
      },
      {
        "function": "_create_viewport_markers",
        "calls": "info",
        "line": 165
      },
      {
        "function": "_create_viewport_markers",
        "calls": "DataFrame",
        "line": 165
      },
      {
        "function": "_create_viewport_markers",
        "calls": "concat",
        "line": 165
      },
      {
        "function": "_create_viewport_markers",
        "calls": "isin",
        "line": 165
      },
      {
        "function": "_create_viewport_markers",
        "calls": "len",
        "line": 165
      },
      {
        "function": "_create_viewport_markers",
        "calls": "isin",
        "line": 165
      },
      {
        "function": "_create_viewport_markers",
        "calls": "len",
        "line": 165
      },
      {
        "function": "_create_viewport_markers",
        "calls": "len",
        "line": 165
      },
      {
        "function": "_create_viewport_markers",
        "calls": "len",
        "line": 165
      },
      {
        "function": "_create_clustered_markers",
        "calls": "_create_grid_clusters",
        "line": 200
      },
      {
        "function": "_create_clustered_markers",
        "calls": "info",
        "line": 200
      },
      {
        "function": "_create_clustered_markers",
        "calls": "DataFrame",
        "line": 200
      },
      {
        "function": "_create_clustered_markers",
        "calls": "_create_all_markers",
        "line": 200
      },
      {
        "function": "_create_clustered_markers",
        "calls": "len",
        "line": 200
      },
      {
        "function": "_create_clustered_markers",
        "calls": "_create_all_markers",
        "line": 200
      },
      {
        "function": "_create_clustered_markers",
        "calls": "isin",
        "line": 200
      },
      {
        "function": "_create_clustered_markers",
        "calls": "_create_single_marker",
        "line": 200
      },
      {
        "function": "_create_clustered_markers",
        "calls": "append",
        "line": 200
      },
      {
        "function": "_create_clustered_markers",
        "calls": "_create_cluster_marker",
        "line": 200
      },
      {
        "function": "_create_clustered_markers",
        "calls": "append",
        "line": 200
      },
      {
        "function": "_create_clustered_markers",
        "calls": "isin",
        "line": 200
      },
      {
        "function": "_create_clustered_markers",
        "calls": "len",
        "line": 200
      },
      {
        "function": "_create_clustered_markers",
        "calls": "len",
        "line": 200
      },
      {
        "function": "_create_clustered_markers",
        "calls": "isin",
        "line": 200
      },
      {
        "function": "_create_grid_clusters",
        "calls": "max",
        "line": 245
      },
      {
        "function": "_create_grid_clusters",
        "calls": "iterrows",
        "line": 245
      },
      {
        "function": "_create_grid_clusters",
        "calls": "items",
        "line": 245
      },
      {
        "function": "_create_grid_clusters",
        "calls": "append",
        "line": 245
      },
      {
        "function": "_create_grid_clusters",
        "calls": "append",
        "line": 245
      },
      {
        "function": "_create_grid_clusters",
        "calls": "append",
        "line": 245
      },
      {
        "function": "_create_grid_clusters",
        "calls": "MarkerCluster",
        "line": 245
      },
      {
        "function": "_create_grid_clusters",
        "calls": "append",
        "line": 245
      },
      {
        "function": "_create_grid_clusters",
        "calls": "int",
        "line": 245
      },
      {
        "function": "_create_grid_clusters",
        "calls": "int",
        "line": 245
      },
      {
        "function": "_create_grid_clusters",
        "calls": "sum",
        "line": 245
      },
      {
        "function": "_create_grid_clusters",
        "calls": "len",
        "line": 245
      },
      {
        "function": "_create_grid_clusters",
        "calls": "sum",
        "line": 245
      },
      {
        "function": "_create_grid_clusters",
        "calls": "len",
        "line": 245
      },
      {
        "function": "_create_grid_clusters",
        "calls": "len",
        "line": 245
      },
      {
        "function": "_create_cluster_marker",
        "calls": "Marker",
        "line": 294
      },
      {
        "function": "_create_cluster_marker",
        "calls": "replace",
        "line": 294
      },
      {
        "function": "_create_cluster_marker",
        "calls": "join",
        "line": 294
      },
      {
        "function": "_create_cluster_marker",
        "calls": "str",
        "line": 294
      },
      {
        "function": "_create_cluster_marker",
        "calls": "Tooltip",
        "line": 294
      },
      {
        "function": "_create_cluster_marker",
        "calls": "replace",
        "line": 294
      },
      {
        "function": "_create_cluster_marker",
        "calls": "strip",
        "line": 294
      },
      {
        "function": "_create_cluster_marker",
        "calls": "len",
        "line": 294
      },
      {
        "function": "_create_all_markers",
        "calls": "iterrows",
        "line": 336
      },
      {
        "function": "_create_all_markers",
        "calls": "_create_single_marker",
        "line": 336
      },
      {
        "function": "_create_all_markers",
        "calls": "append",
        "line": 336
      },
      {
        "function": "_create_single_marker",
        "calls": "strip",
        "line": 349
      },
      {
        "function": "_create_single_marker",
        "calls": "_get_marker_icon_url",
        "line": 349
      },
      {
        "function": "_create_single_marker",
        "calls": "_format_depth_value",
        "line": 349
      },
      {
        "function": "_create_single_marker",
        "calls": "_format_depth_value",
        "line": 349
      },
      {
        "function": "_create_single_marker",
        "calls": "Marker",
        "line": 349
      },
      {
        "function": "_create_single_marker",
        "calls": "get",
        "line": 349
      },
      {
        "function": "_create_single_marker",
        "calls": "get",
        "line": 349
      },
      {
        "function": "_create_single_marker",
        "calls": "str",
        "line": 349
      },
      {
        "function": "_create_single_marker",
        "calls": "Tooltip",
        "line": 349
      },
      {
        "function": "_create_single_marker",
        "calls": "strip",
        "line": 349
      },
      {
        "function": "_format_depth_value",
        "calls": "strip",
        "line": 398
      },
      {
        "function": "_format_depth_value",
        "calls": "float",
        "line": 398
      },
      {
        "function": "_format_depth_value",
        "calls": "str",
        "line": 398
      },
      {
        "function": "update_cache_stats",
        "calls": "len",
        "line": 409
      },
      {
        "function": "update_cache_stats",
        "calls": "len",
        "line": 409
      },
      {
        "function": "clear_cache",
        "calls": "clear",
        "line": 417
      },
      {
        "function": "clear_cache",
        "calls": "clear",
        "line": 417
      },
      {
        "function": "clear_cache",
        "calls": "info",
        "line": 417
      }
    ],
    "loading_indicators.py": [
      {
        "function": "create_upload_loading",
        "calls": "create_file_upload_feedback",
        "line": 378
      },
      {
        "function": "create_plot_loading",
        "calls": "create_plot_generation_feedback",
        "line": 385
      },
      {
        "function": "create_data_loading",
        "calls": "create_spinner",
        "line": 390
      },
      {
        "function": "create_success_toast",
        "calls": "create_toast_notification",
        "line": 395
      },
      {
        "function": "create_error_toast",
        "calls": "create_toast_notification",
        "line": 400
      },
      {
        "function": "create_spinner",
        "calls": "Div",
        "line": 32
      },
      {
        "function": "create_spinner",
        "calls": "get",
        "line": 32
      },
      {
        "function": "create_spinner",
        "calls": "Store",
        "line": 32
      },
      {
        "function": "create_spinner",
        "calls": "Div",
        "line": 32
      },
      {
        "function": "create_spinner",
        "calls": "P",
        "line": 32
      },
      {
        "function": "create_progress_bar",
        "calls": "Div",
        "line": 86
      },
      {
        "function": "create_progress_bar",
        "calls": "Div",
        "line": 86
      },
      {
        "function": "create_progress_bar",
        "calls": "P",
        "line": 86
      },
      {
        "function": "create_progress_bar",
        "calls": "P",
        "line": 86
      },
      {
        "function": "create_progress_bar",
        "calls": "Div",
        "line": 86
      },
      {
        "function": "create_file_upload_feedback",
        "calls": "Div",
        "line": 147
      },
      {
        "function": "create_file_upload_feedback",
        "calls": "create_spinner",
        "line": 147
      },
      {
        "function": "create_file_upload_feedback",
        "calls": "create_progress_bar",
        "line": 147
      },
      {
        "function": "create_file_upload_feedback",
        "calls": "P",
        "line": 147
      },
      {
        "function": "create_file_upload_feedback",
        "calls": "P",
        "line": 147
      },
      {
        "function": "create_plot_generation_feedback",
        "calls": "get",
        "line": 201
      },
      {
        "function": "create_plot_generation_feedback",
        "calls": "Div",
        "line": 201
      },
      {
        "function": "create_plot_generation_feedback",
        "calls": "Div",
        "line": 201
      },
      {
        "function": "create_plot_generation_feedback",
        "calls": "create_spinner",
        "line": 201
      },
      {
        "function": "create_plot_generation_feedback",
        "calls": "P",
        "line": 201
      },
      {
        "function": "create_plot_generation_feedback",
        "calls": "P",
        "line": 201
      },
      {
        "function": "create_toast_notification",
        "calls": "get",
        "line": 257
      },
      {
        "function": "create_toast_notification",
        "calls": "get",
        "line": 257
      },
      {
        "function": "create_toast_notification",
        "calls": "Div",
        "line": 257
      },
      {
        "function": "create_toast_notification",
        "calls": "Div",
        "line": 257
      },
      {
        "function": "create_toast_notification",
        "calls": "Span",
        "line": 257
      },
      {
        "function": "create_toast_notification",
        "calls": "Span",
        "line": 257
      },
      {
        "function": "create_toast_notification",
        "calls": "Button",
        "line": 257
      },
      {
        "function": "set_loading",
        "calls": "time",
        "line": 338
      },
      {
        "function": "is_loading",
        "calls": "get",
        "line": 346
      },
      {
        "function": "is_loading",
        "calls": "get",
        "line": 346
      },
      {
        "function": "get_message",
        "calls": "get",
        "line": 350
      },
      {
        "function": "get_message",
        "calls": "get",
        "line": 350
      },
      {
        "function": "clear_all",
        "calls": "clear",
        "line": 359
      },
      {
        "function": "get_active_states",
        "calls": "items",
        "line": 363
      },
      {
        "function": "get_active_states",
        "calls": "get",
        "line": 363
      }
    ],
    "map_utils.py": [
      {
        "function": "filter_selection_by_shape",
        "calls": "info",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "info",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "info",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "hasattr",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "info",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "get",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "info",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "info",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "info",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "get",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "info",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "get",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "get",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "info",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "info",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "error",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "error",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "info",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "info",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "warning",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "isinstance",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "warning",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "info",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "filter_by_geometry",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "info",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "error",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "len",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "info",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "info",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "info",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "len",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "tolist",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "info",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "info",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "error",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "type",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "type",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "len",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "type",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "len",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "list",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "isinstance",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "keys",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "len",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "min",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "max",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "min",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "max",
        "line": 8
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "len",
        "line": 8
      },
      {
        "function": "filter_by_geometry",
        "calls": "info",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "get",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "get",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "info",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "info",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "info",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "error",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "DataFrame",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "info",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "get",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "len",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "len",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "min",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "max",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "min",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "max",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "len",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "info",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "copy",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "DataFrame",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "info",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "info",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "error",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "DataFrame",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "info",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "error",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "DataFrame",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "len",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "len",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "len",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "Polygon",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "info",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "info",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "len",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "info",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "error",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "DataFrame",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "len",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "warning",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "buffer",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "info",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "len",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "DataFrame",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "len",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "tolist",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "info",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "copy",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "warning",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "DataFrame",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "error",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "DataFrame",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "LineString",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "median",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "median",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "info",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "info",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "shapely_transform",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "buffer",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "info",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "project",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "any",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "tolist",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "len",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "Point",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "contains",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "len",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "info",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "int",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "from_crs",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "info",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "info",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "DataFrame",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "error",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "DataFrame",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "zip",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "len",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "info",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "Point",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "distance",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "info",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "len",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "nonzero",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "Point",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "contains",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "copy",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "DataFrame",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "len",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "len",
        "line": 100
      },
      {
        "function": "filter_by_geometry",
        "calls": "len",
        "line": 100
      }
    ],
    "memory_manager.py": [
      {
        "function": "get_memory_manager",
        "calls": "MemoryManager",
        "line": 379
      },
      {
        "function": "cleanup_memory",
        "calls": "get_memory_manager",
        "line": 388
      },
      {
        "function": "cleanup_memory",
        "calls": "perform_cleanup",
        "line": 388
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "get_memory_manager",
        "line": 395
      },
      {
        "function": "optimize_dataframe_memory",
        "calls": "optimize_dataframe",
        "line": 395
      },
      {
        "function": "get_memory_stats",
        "calls": "get_memory_manager",
        "line": 402
      },
      {
        "function": "get_memory_stats",
        "calls": "get_current_memory_usage",
        "line": 402
      },
      {
        "function": "monitor_memory_usage",
        "calls": "get_memory_stats",
        "line": 409
      },
      {
        "function": "monitor_memory_usage",
        "calls": "getattr",
        "line": 409
      },
      {
        "function": "monitor_memory_usage",
        "calls": "log_func",
        "line": 409
      },
      {
        "function": "monitor_memory_usage",
        "calls": "lower",
        "line": 409
      },
      {
        "function": "__init__",
        "calls": "now",
        "line": 43
      },
      {
        "function": "__init__",
        "calls": "info",
        "line": 43
      },
      {
        "function": "get_current_memory_usage",
        "calls": "Process",
        "line": 73
      },
      {
        "function": "get_current_memory_usage",
        "calls": "memory_info",
        "line": 73
      },
      {
        "function": "get_current_memory_usage",
        "calls": "memory_percent",
        "line": 73
      },
      {
        "function": "get_current_memory_usage",
        "calls": "virtual_memory",
        "line": 73
      },
      {
        "function": "get_current_memory_usage",
        "calls": "MemoryStats",
        "line": 73
      },
      {
        "function": "get_current_memory_usage",
        "calls": "append",
        "line": 73
      },
      {
        "function": "get_current_memory_usage",
        "calls": "len",
        "line": 73
      },
      {
        "function": "get_current_memory_usage",
        "calls": "pop",
        "line": 73
      },
      {
        "function": "get_current_memory_usage",
        "calls": "error",
        "line": 73
      },
      {
        "function": "get_current_memory_usage",
        "calls": "MemoryStats",
        "line": 73
      },
      {
        "function": "get_current_memory_usage",
        "calls": "now",
        "line": 73
      },
      {
        "function": "get_current_memory_usage",
        "calls": "now",
        "line": 73
      },
      {
        "function": "check_memory_threshold",
        "calls": "get_current_memory_usage",
        "line": 103
      },
      {
        "function": "should_cleanup",
        "calls": "check_memory_threshold",
        "line": 109
      },
      {
        "function": "should_cleanup",
        "calls": "now",
        "line": 109
      },
      {
        "function": "should_cleanup",
        "calls": "total_seconds",
        "line": 109
      },
      {
        "function": "perform_cleanup",
        "calls": "info",
        "line": 123
      },
      {
        "function": "perform_cleanup",
        "calls": "get_current_memory_usage",
        "line": 123
      },
      {
        "function": "perform_cleanup",
        "calls": "len",
        "line": 123
      },
      {
        "function": "perform_cleanup",
        "calls": "clear",
        "line": 123
      },
      {
        "function": "perform_cleanup",
        "calls": "append",
        "line": 123
      },
      {
        "function": "perform_cleanup",
        "calls": "collect",
        "line": 123
      },
      {
        "function": "perform_cleanup",
        "calls": "append",
        "line": 123
      },
      {
        "function": "perform_cleanup",
        "calls": "_clear_global_caches",
        "line": 123
      },
      {
        "function": "perform_cleanup",
        "calls": "append",
        "line": 123
      },
      {
        "function": "perform_cleanup",
        "calls": "now",
        "line": 123
      },
      {
        "function": "perform_cleanup",
        "calls": "get_current_memory_usage",
        "line": 123
      },
      {
        "function": "perform_cleanup",
        "calls": "update",
        "line": 123
      },
      {
        "function": "perform_cleanup",
        "calls": "info",
        "line": 123
      },
      {
        "function": "perform_cleanup",
        "calls": "should_cleanup",
        "line": 123
      },
      {
        "function": "perform_cleanup",
        "calls": "len",
        "line": 123
      },
      {
        "function": "perform_cleanup",
        "calls": "append",
        "line": 123
      },
      {
        "function": "perform_cleanup",
        "calls": "error",
        "line": 123
      },
      {
        "function": "perform_cleanup",
        "calls": "str",
        "line": 123
      },
      {
        "function": "perform_cleanup",
        "calls": "now",
        "line": 123
      },
      {
        "function": "_clear_global_caches",
        "calls": "get_lazy_marker_manager",
        "line": 192
      },
      {
        "function": "_clear_global_caches",
        "calls": "clear_cache",
        "line": 192
      },
      {
        "function": "_clear_global_caches",
        "calls": "get_coordinate_service",
        "line": 192
      },
      {
        "function": "_clear_global_caches",
        "calls": "hasattr",
        "line": 192
      },
      {
        "function": "_clear_global_caches",
        "calls": "warning",
        "line": 192
      },
      {
        "function": "_clear_global_caches",
        "calls": "clear_cache",
        "line": 192
      },
      {
        "function": "optimize_dataframe",
        "calls": "copy",
        "line": 215
      },
      {
        "function": "optimize_dataframe",
        "calls": "select_dtypes",
        "line": 215
      },
      {
        "function": "optimize_dataframe",
        "calls": "select_dtypes",
        "line": 215
      },
      {
        "function": "optimize_dataframe",
        "calls": "to_numeric",
        "line": 215
      },
      {
        "function": "optimize_dataframe",
        "calls": "select_dtypes",
        "line": 215
      },
      {
        "function": "optimize_dataframe",
        "calls": "info",
        "line": 215
      },
      {
        "function": "optimize_dataframe",
        "calls": "error",
        "line": 215
      },
      {
        "function": "optimize_dataframe",
        "calls": "sum",
        "line": 215
      },
      {
        "function": "optimize_dataframe",
        "calls": "astype",
        "line": 215
      },
      {
        "function": "optimize_dataframe",
        "calls": "nunique",
        "line": 215
      },
      {
        "function": "optimize_dataframe",
        "calls": "astype",
        "line": 215
      },
      {
        "function": "optimize_dataframe",
        "calls": "sum",
        "line": 215
      },
      {
        "function": "optimize_dataframe",
        "calls": "min",
        "line": 215
      },
      {
        "function": "optimize_dataframe",
        "calls": "max",
        "line": 215
      },
      {
        "function": "optimize_dataframe",
        "calls": "astype",
        "line": 215
      },
      {
        "function": "optimize_dataframe",
        "calls": "len",
        "line": 215
      },
      {
        "function": "optimize_dataframe",
        "calls": "memory_usage",
        "line": 215
      },
      {
        "function": "optimize_dataframe",
        "calls": "min",
        "line": 215
      },
      {
        "function": "optimize_dataframe",
        "calls": "max",
        "line": 215
      },
      {
        "function": "optimize_dataframe",
        "calls": "memory_usage",
        "line": 215
      },
      {
        "function": "register_cache_reference",
        "calls": "debug",
        "line": 272
      },
      {
        "function": "unregister_cache_reference",
        "calls": "debug",
        "line": 278
      },
      {
        "function": "get_memory_report",
        "calls": "get_current_memory_usage",
        "line": 285
      },
      {
        "function": "get_memory_report",
        "calls": "len",
        "line": 285
      },
      {
        "function": "get_memory_report",
        "calls": "virtual_memory",
        "line": 285
      },
      {
        "function": "get_memory_report",
        "calls": "isoformat",
        "line": 285
      },
      {
        "function": "get_memory_report",
        "calls": "max",
        "line": 285
      },
      {
        "function": "get_memory_report",
        "calls": "min",
        "line": 285
      },
      {
        "function": "get_memory_report",
        "calls": "warning",
        "line": 285
      },
      {
        "function": "get_memory_report",
        "calls": "len",
        "line": 285
      },
      {
        "function": "get_memory_report",
        "calls": "list",
        "line": 285
      },
      {
        "function": "get_memory_report",
        "calls": "sum",
        "line": 285
      },
      {
        "function": "get_memory_report",
        "calls": "len",
        "line": 285
      },
      {
        "function": "get_memory_report",
        "calls": "keys",
        "line": 285
      },
      {
        "function": "get_memory_report",
        "calls": "isoformat",
        "line": 285
      },
      {
        "function": "get_memory_report",
        "calls": "isoformat",
        "line": 285
      },
      {
        "function": "get_memory_report",
        "calls": "timedelta",
        "line": 285
      },
      {
        "function": "monitor_memory_async",
        "calls": "memory_check",
        "line": 345
      },
      {
        "function": "monitor_memory_async",
        "calls": "get_current_memory_usage",
        "line": 345
      },
      {
        "function": "monitor_memory_async",
        "calls": "warning",
        "line": 345
      },
      {
        "function": "monitor_memory_async",
        "calls": "perform_cleanup",
        "line": 345
      },
      {
        "function": "monitor_memory_async",
        "calls": "callback_func",
        "line": 345
      },
      {
        "function": "monitor_memory_async",
        "calls": "error",
        "line": 345
      },
      {
        "function": "memory_check",
        "calls": "get_current_memory_usage",
        "line": 353
      },
      {
        "function": "memory_check",
        "calls": "warning",
        "line": 353
      },
      {
        "function": "memory_check",
        "calls": "perform_cleanup",
        "line": 353
      },
      {
        "function": "memory_check",
        "calls": "callback_func",
        "line": 353
      },
      {
        "function": "memory_check",
        "calls": "error",
        "line": 353
      }
    ],
    "optimization_baseline_test.py": [
      {
        "function": "setup_test_logging",
        "calls": "StringIO",
        "line": 30
      },
      {
        "function": "setup_test_logging",
        "calls": "StreamHandler",
        "line": 30
      },
      {
        "function": "setup_test_logging",
        "calls": "setLevel",
        "line": 30
      },
      {
        "function": "setup_test_logging",
        "calls": "Formatter",
        "line": 30
      },
      {
        "function": "setup_test_logging",
        "calls": "setFormatter",
        "line": 30
      },
      {
        "function": "setup_test_logging",
        "calls": "getLogger",
        "line": 30
      },
      {
        "function": "setup_test_logging",
        "calls": "addHandler",
        "line": 30
      },
      {
        "function": "setup_test_logging",
        "calls": "setLevel",
        "line": 30
      },
      {
        "function": "test_matplotlib_verbosity",
        "calls": "print",
        "line": 52
      },
      {
        "function": "test_matplotlib_verbosity",
        "calls": "print",
        "line": 52
      },
      {
        "function": "test_matplotlib_verbosity",
        "calls": "print",
        "line": 52
      },
      {
        "function": "test_matplotlib_verbosity",
        "calls": "setup_test_logging",
        "line": 52
      },
      {
        "function": "test_matplotlib_verbosity",
        "calls": "print",
        "line": 52
      },
      {
        "function": "test_matplotlib_verbosity",
        "calls": "time",
        "line": 52
      },
      {
        "function": "test_matplotlib_verbosity",
        "calls": "subplots",
        "line": 52
      },
      {
        "function": "test_matplotlib_verbosity",
        "calls": "text",
        "line": 52
      },
      {
        "function": "test_matplotlib_verbosity",
        "calls": "text",
        "line": 52
      },
      {
        "function": "test_matplotlib_verbosity",
        "calls": "close",
        "line": 52
      },
      {
        "function": "test_matplotlib_verbosity",
        "calls": "time",
        "line": 52
      },
      {
        "function": "test_matplotlib_verbosity",
        "calls": "getvalue",
        "line": 52
      },
      {
        "function": "test_matplotlib_verbosity",
        "calls": "print",
        "line": 52
      },
      {
        "function": "test_matplotlib_verbosity",
        "calls": "print",
        "line": 52
      },
      {
        "function": "test_matplotlib_verbosity",
        "calls": "print",
        "line": 52
      },
      {
        "function": "test_matplotlib_verbosity",
        "calls": "print",
        "line": 52
      },
      {
        "function": "test_matplotlib_verbosity",
        "calls": "enumerate",
        "line": 52
      },
      {
        "function": "test_matplotlib_verbosity",
        "calls": "len",
        "line": 52
      },
      {
        "function": "test_matplotlib_verbosity",
        "calls": "len",
        "line": 52
      },
      {
        "function": "test_matplotlib_verbosity",
        "calls": "split",
        "line": 52
      },
      {
        "function": "test_matplotlib_verbosity",
        "calls": "print",
        "line": 52
      },
      {
        "function": "test_matplotlib_verbosity",
        "calls": "len",
        "line": 52
      },
      {
        "function": "test_matplotlib_verbosity",
        "calls": "print",
        "line": 52
      },
      {
        "function": "test_matplotlib_verbosity",
        "calls": "split",
        "line": 52
      },
      {
        "function": "test_matplotlib_verbosity",
        "calls": "lower",
        "line": 52
      },
      {
        "function": "test_matplotlib_verbosity",
        "calls": "len",
        "line": 52
      },
      {
        "function": "test_matplotlib_verbosity",
        "calls": "len",
        "line": 52
      },
      {
        "function": "test_matplotlib_verbosity",
        "calls": "split",
        "line": 52
      },
      {
        "function": "test_matplotlib_verbosity",
        "calls": "len",
        "line": 52
      },
      {
        "function": "test_marker_click_logging",
        "calls": "print",
        "line": 96
      },
      {
        "function": "test_marker_click_logging",
        "calls": "print",
        "line": 96
      },
      {
        "function": "test_marker_click_logging",
        "calls": "print",
        "line": 96
      },
      {
        "function": "test_marker_click_logging",
        "calls": "setup_test_logging",
        "line": 96
      },
      {
        "function": "test_marker_click_logging",
        "calls": "print",
        "line": 96
      },
      {
        "function": "test_marker_click_logging",
        "calls": "time",
        "line": 96
      },
      {
        "function": "test_marker_click_logging",
        "calls": "info",
        "line": 96
      },
      {
        "function": "test_marker_click_logging",
        "calls": "info",
        "line": 96
      },
      {
        "function": "test_marker_click_logging",
        "calls": "info",
        "line": 96
      },
      {
        "function": "test_marker_click_logging",
        "calls": "enumerate",
        "line": 96
      },
      {
        "function": "test_marker_click_logging",
        "calls": "time",
        "line": 96
      },
      {
        "function": "test_marker_click_logging",
        "calls": "getvalue",
        "line": 96
      },
      {
        "function": "test_marker_click_logging",
        "calls": "split",
        "line": 96
      },
      {
        "function": "test_marker_click_logging",
        "calls": "print",
        "line": 96
      },
      {
        "function": "test_marker_click_logging",
        "calls": "print",
        "line": 96
      },
      {
        "function": "test_marker_click_logging",
        "calls": "print",
        "line": 96
      },
      {
        "function": "test_marker_click_logging",
        "calls": "print",
        "line": 96
      },
      {
        "function": "test_marker_click_logging",
        "calls": "info",
        "line": 96
      },
      {
        "function": "test_marker_click_logging",
        "calls": "len",
        "line": 96
      },
      {
        "function": "test_marker_click_logging",
        "calls": "print",
        "line": 96
      },
      {
        "function": "test_marker_click_logging",
        "calls": "len",
        "line": 96
      },
      {
        "function": "test_marker_click_logging",
        "calls": "len",
        "line": 96
      },
      {
        "function": "test_marker_click_logging",
        "calls": "debug",
        "line": 96
      },
      {
        "function": "test_marker_click_logging",
        "calls": "len",
        "line": 96
      },
      {
        "function": "test_marker_click_logging",
        "calls": "len",
        "line": 96
      },
      {
        "function": "test_marker_click_logging",
        "calls": "len",
        "line": 96
      },
      {
        "function": "test_marker_click_logging",
        "calls": "len",
        "line": 96
      },
      {
        "function": "test_coordinate_transformation",
        "calls": "print",
        "line": 155
      },
      {
        "function": "test_coordinate_transformation",
        "calls": "print",
        "line": 155
      },
      {
        "function": "test_coordinate_transformation",
        "calls": "print",
        "line": 155
      },
      {
        "function": "test_coordinate_transformation",
        "calls": "uniform",
        "line": 155
      },
      {
        "function": "test_coordinate_transformation",
        "calls": "uniform",
        "line": 155
      },
      {
        "function": "test_coordinate_transformation",
        "calls": "get_coordinate_service",
        "line": 155
      },
      {
        "function": "test_coordinate_transformation",
        "calls": "print",
        "line": 155
      },
      {
        "function": "test_coordinate_transformation",
        "calls": "print",
        "line": 155
      },
      {
        "function": "test_coordinate_transformation",
        "calls": "time",
        "line": 155
      },
      {
        "function": "test_coordinate_transformation",
        "calls": "range",
        "line": 155
      },
      {
        "function": "test_coordinate_transformation",
        "calls": "print",
        "line": 155
      },
      {
        "function": "test_coordinate_transformation",
        "calls": "print",
        "line": 155
      },
      {
        "function": "test_coordinate_transformation",
        "calls": "print",
        "line": 155
      },
      {
        "function": "test_coordinate_transformation",
        "calls": "time",
        "line": 155
      },
      {
        "function": "test_coordinate_transformation",
        "calls": "transform_bng_to_wgs84",
        "line": 155
      },
      {
        "function": "test_coordinate_transformation",
        "calls": "print",
        "line": 155
      },
      {
        "function": "test_coordinate_transformation",
        "calls": "print",
        "line": 155
      },
      {
        "function": "test_coordinate_transformation",
        "calls": "print",
        "line": 155
      },
      {
        "function": "test_coordinate_transformation",
        "calls": "transform_coordinates",
        "line": 155
      },
      {
        "function": "test_coordinate_transformation",
        "calls": "append",
        "line": 155
      },
      {
        "function": "test_coordinate_transformation",
        "calls": "time",
        "line": 155
      },
      {
        "function": "test_coordinate_transformation",
        "calls": "time",
        "line": 155
      },
      {
        "function": "test_coordinate_transformation",
        "calls": "len",
        "line": 155
      },
      {
        "function": "test_coordinate_transformation",
        "calls": "abs",
        "line": 155
      },
      {
        "function": "test_coordinate_transformation",
        "calls": "abs",
        "line": 155
      },
      {
        "function": "test_coordinate_transformation",
        "calls": "print",
        "line": 155
      },
      {
        "function": "test_coordinate_transformation",
        "calls": "print",
        "line": 155
      },
      {
        "function": "test_coordinate_transformation",
        "calls": "print",
        "line": 155
      },
      {
        "function": "test_coordinate_transformation",
        "calls": "print",
        "line": 155
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "print",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "print",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "print",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "start",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "DataFrame",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "print",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "print",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "items",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "memory_usage",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "sum",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "print",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "items",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "print",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "print",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "print",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "print",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "get_traced_memory",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "stop",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "uniform",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "uniform",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "uniform",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "uniform",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "uniform",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "uniform",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "choice",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "uniform",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "uniform",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "print",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "select_dtypes",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "min",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "max",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "print",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "memory_usage",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "nunique",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "print",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "range",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "len",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "print",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "print",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "memory_usage",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "print",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "sum",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "len",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "finfo",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "finfo",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "len",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "str",
        "line": 225
      },
      {
        "function": "test_dataframe_optimization",
        "calls": "unique",
        "line": 225
      },
      {
        "function": "test_error_handling",
        "calls": "print",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "print",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "print",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "setup_test_logging",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "print",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "print",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "print",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "getvalue",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "print",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "print",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "print",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "print",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "transform_coordinates",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "print",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "transform_coordinates",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "range",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "print",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "print",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "print",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "print",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "print",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "subplots",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "plot",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "append",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "close",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "print",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "split",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "split",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "random",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "random",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "len",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "len",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "sum",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "len",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "values",
        "line": 334
      },
      {
        "function": "test_error_handling",
        "calls": "type",
        "line": 334
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "test_matplotlib_verbosity",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "test_marker_click_logging",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "test_coordinate_transformation",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "test_dataframe_optimization",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "test_error_handling",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "strftime",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "str",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "str",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "str",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "str",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "str",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "print",
        "line": 402
      },
      {
        "function": "run_comprehensive_baseline",
        "calls": "strftime",
        "line": 402
      },
      {
        "function": "convert_numpy",
        "calls": "isinstance",
        "line": 533
      },
      {
        "function": "convert_numpy",
        "calls": "tolist",
        "line": 533
      },
      {
        "function": "convert_numpy",
        "calls": "isinstance",
        "line": 533
      },
      {
        "function": "convert_numpy",
        "calls": "float",
        "line": 533
      },
      {
        "function": "convert_numpy",
        "calls": "isinstance",
        "line": 533
      },
      {
        "function": "convert_numpy",
        "calls": "int",
        "line": 533
      }
    ],
    "polyline_utils.py": [
      {
        "function": "create_buffer_polygon",
        "calls": "info",
        "line": 14
      },
      {
        "function": "create_buffer_polygon",
        "calls": "LineString",
        "line": 14
      },
      {
        "function": "create_buffer_polygon",
        "calls": "info",
        "line": 14
      },
      {
        "function": "create_buffer_polygon",
        "calls": "shapely_transform",
        "line": 14
      },
      {
        "function": "create_buffer_polygon",
        "calls": "buffer",
        "line": 14
      },
      {
        "function": "create_buffer_polygon",
        "calls": "shapely_transform",
        "line": 14
      },
      {
        "function": "create_buffer_polygon",
        "calls": "hasattr",
        "line": 14
      },
      {
        "function": "create_buffer_polygon",
        "calls": "int",
        "line": 14
      },
      {
        "function": "create_buffer_polygon",
        "calls": "from_crs",
        "line": 14
      },
      {
        "function": "create_buffer_polygon",
        "calls": "from_crs",
        "line": 14
      },
      {
        "function": "create_buffer_polygon",
        "calls": "error",
        "line": 14
      },
      {
        "function": "create_buffer_polygon",
        "calls": "len",
        "line": 14
      },
      {
        "function": "create_buffer_visualization",
        "calls": "create_buffer_polygon",
        "line": 75
      },
      {
        "function": "create_buffer_visualization",
        "calls": "Polygon",
        "line": 75
      },
      {
        "function": "create_buffer_visualization",
        "calls": "Tooltip",
        "line": 75
      },
      {
        "function": "calculate_distance_along_polyline",
        "calls": "LineString",
        "line": 103
      },
      {
        "function": "calculate_distance_along_polyline",
        "calls": "Point",
        "line": 103
      },
      {
        "function": "calculate_distance_along_polyline",
        "calls": "shapely_transform",
        "line": 103
      },
      {
        "function": "calculate_distance_along_polyline",
        "calls": "shapely_transform",
        "line": 103
      },
      {
        "function": "calculate_distance_along_polyline",
        "calls": "project",
        "line": 103
      },
      {
        "function": "calculate_distance_along_polyline",
        "calls": "warning",
        "line": 103
      },
      {
        "function": "calculate_distance_along_polyline",
        "calls": "float",
        "line": 103
      },
      {
        "function": "calculate_distance_along_polyline",
        "calls": "float",
        "line": 103
      },
      {
        "function": "calculate_distance_along_polyline",
        "calls": "int",
        "line": 103
      },
      {
        "function": "calculate_distance_along_polyline",
        "calls": "from_crs",
        "line": 103
      },
      {
        "function": "calculate_distance_along_polyline",
        "calls": "error",
        "line": 103
      },
      {
        "function": "calculate_distance_along_polyline",
        "calls": "warning",
        "line": 103
      },
      {
        "function": "create_polyline_section",
        "calls": "info",
        "line": 163
      },
      {
        "function": "create_polyline_section",
        "calls": "Polyline",
        "line": 163
      },
      {
        "function": "create_polyline_section",
        "calls": "isinstance",
        "line": 163
      },
      {
        "function": "create_polyline_section",
        "calls": "isinstance",
        "line": 163
      },
      {
        "function": "create_polyline_section",
        "calls": "get",
        "line": 163
      },
      {
        "function": "create_polyline_section",
        "calls": "error",
        "line": 163
      },
      {
        "function": "create_polyline_section",
        "calls": "error",
        "line": 163
      },
      {
        "function": "create_polyline_section",
        "calls": "Tooltip",
        "line": 163
      },
      {
        "function": "create_polyline_section",
        "calls": "type",
        "line": 163
      },
      {
        "function": "create_buffer_zone",
        "calls": "create_buffer_visualization",
        "line": 214
      },
      {
        "function": "create_buffer_zone",
        "calls": "isinstance",
        "line": 214
      },
      {
        "function": "create_buffer_zone",
        "calls": "isinstance",
        "line": 214
      },
      {
        "function": "create_buffer_zone",
        "calls": "error",
        "line": 214
      },
      {
        "function": "create_buffer_zone",
        "calls": "error",
        "line": 214
      },
      {
        "function": "create_buffer_zone",
        "calls": "type",
        "line": 214
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "info",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "info",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "LineString",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "info",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "shapely_transform",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "info",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "enumerate",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "info",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "len",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "warning",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "int",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "from_crs",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "iterrows",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "DataFrame",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "sort_values",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "DataFrame",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "error",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "DataFrame",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "warning",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "shapely_transform",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "distance",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "len",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "len",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "strip",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "strip",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "float",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "float",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "Point",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "debug",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "project",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "to_dict",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "append",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "warning",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "len",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "float",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "float",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "str",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "str",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "get",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "get",
        "line": 253
      },
      {
        "function": "project_boreholes_to_polyline",
        "calls": "get",
        "line": 253
      },
      {
        "function": "point_to_line_distance",
        "calls": "sqrt",
        "line": 376
      },
      {
        "function": "point_to_line_distance",
        "calls": "sqrt",
        "line": 376
      },
      {
        "function": "point_to_line_distance",
        "calls": "abs",
        "line": 376
      },
      {
        "function": "point_to_line_distance",
        "calls": "error",
        "line": 376
      },
      {
        "function": "point_to_line_distance",
        "calls": "float",
        "line": 376
      },
      {
        "function": "project_point_to_line_segment",
        "calls": "max",
        "line": 402
      },
      {
        "function": "project_point_to_line_segment",
        "calls": "min",
        "line": 402
      },
      {
        "function": "project_point_to_line_segment",
        "calls": "error",
        "line": 402
      }
    ],
    "section_plot_professional.py": [
      {
        "function": "parse_ags_geol_section_from_string",
        "calls": "splitlines",
        "line": 22
      },
      {
        "function": "parse_ags_geol_section_from_string",
        "calls": "parse_lines",
        "line": 22
      },
      {
        "function": "parse_ags_geol_section_from_string",
        "calls": "DataFrame",
        "line": 22
      },
      {
        "function": "parse_ags_geol_section_from_string",
        "calls": "DataFrame",
        "line": 22
      },
      {
        "function": "parse_ags_geol_section_from_string",
        "calls": "list",
        "line": 22
      },
      {
        "function": "parse_ags_geol_section_from_string",
        "calls": "strip",
        "line": 22
      },
      {
        "function": "parse_ags_geol_section_from_string",
        "calls": "strip",
        "line": 22
      },
      {
        "function": "parse_ags_geol_section_from_string",
        "calls": "DataFrame",
        "line": 22
      },
      {
        "function": "parse_ags_geol_section_from_string",
        "calls": "reader",
        "line": 22
      },
      {
        "function": "parse_ags_geol_section_from_string",
        "calls": "append",
        "line": 22
      },
      {
        "function": "parse_ags_geol_section_from_string",
        "calls": "to_numeric",
        "line": 22
      },
      {
        "function": "parse_ags_geol_section_from_string",
        "calls": "append",
        "line": 22
      },
      {
        "function": "parse_ags_geol_section_from_string",
        "calls": "to_numeric",
        "line": 22
      },
      {
        "function": "parse_ags_geol_section_from_string",
        "calls": "append",
        "line": 22
      },
      {
        "function": "parse_ags_geol_section_from_string",
        "calls": "len",
        "line": 22
      },
      {
        "function": "parse_ags_geol_section_from_string",
        "calls": "len",
        "line": 22
      },
      {
        "function": "parse_ags_geol_section_from_string",
        "calls": "len",
        "line": 22
      },
      {
        "function": "parse_ags_geol_section_from_string",
        "calls": "len",
        "line": 22
      },
      {
        "function": "parse_ags_geol_section_from_string",
        "calls": "len",
        "line": 22
      },
      {
        "function": "parse_ags_geol_section_from_string",
        "calls": "len",
        "line": 22
      },
      {
        "function": "parse_ags_geol_section_from_string",
        "calls": "len",
        "line": 22
      },
      {
        "function": "parse_ags_geol_section_from_string",
        "calls": "len",
        "line": 22
      },
      {
        "function": "parse_ags_geol_section_from_string",
        "calls": "len",
        "line": 22
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "print",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "print",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "print",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "print",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "fillna",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "to_dict",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "unique",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "print",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "print",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "print",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "len",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "max",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "min",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "subplots",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "set_facecolor",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "set_major_locator",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "set_major_locator",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "set_minor_locator",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "set_minor_locator",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "grid",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "grid",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "set",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "enumerate",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "array",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "argsort",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "plot",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "array",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "enumerate",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "set_title",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "int",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "int",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "arange",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "set_xticks",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "set_xticklabels",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "set_xlabel",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "set_ylabel",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "max",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "min",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "set_ylim",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "set_xlim",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "legend",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "set_facecolor",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "set_alpha",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "tight_layout",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "print",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "from_crs",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "from_crs",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "print",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "copy",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "copy",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "iterrows",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "merge",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "map",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "map",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "dropna",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "first",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "tolist",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "print",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "print",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "print",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "print",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "merge",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "dropna",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "sort_values",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "reindex",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "tolist",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "abs",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "abs",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "dict",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "get_geology_color",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "get_geology_pattern",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "print",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "MultipleLocator",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "MultipleLocator",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "AutoMinorLocator",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "AutoMinorLocator",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "reset_index",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "iterrows",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "list",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "list",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "annotate",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "max",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "min",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "Patch",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "append",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "savefig",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "print",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "savefig",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "print",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "any",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "apply",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "apply",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "transform",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "transform",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "enumerate",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "append",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "print",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "append",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "print",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "merge",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "to_numeric",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "isinstance",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "print",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "LineString",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "enumerate",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "dict",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "hypot",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "dict",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "zip",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "first",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "get",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "get",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "fill_betweenx",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "values",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "values",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "floor",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "ceil",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "max",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "min",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "min",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "max",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "get_frame",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "get_frame",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "tolist",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "astype",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "astype",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "float",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "float",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "transform",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "transform",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "first",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "first",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "print",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "len",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "zip",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "ShapelyPoint",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "project",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "append",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "print",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "zip",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "zip",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "len",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "sort_values",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "fill_betweenx",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "add",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "print",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "len",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "print",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "print",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "get",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "get",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "groupby",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "len",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "str",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "search",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "min",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "max",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "min",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "min",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "max",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "int",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "upper",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "notnull",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "isdigit",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "notnull",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "isdigit",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "len",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "groupby",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "str",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "group",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "groupby",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "groupby",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "replace",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "replace",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "replace",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "replace",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "str",
        "line": 100
      },
      {
        "function": "plot_professional_borehole_sections",
        "calls": "str",
        "line": 100
      },
      {
        "function": "plot_section_from_ags_content",
        "calls": "parse_ags_geol_section_from_string",
        "line": 569
      },
      {
        "function": "plot_section_from_ags_content",
        "calls": "plot_professional_borehole_sections",
        "line": 569
      },
      {
        "function": "plot_section_from_ags_content",
        "calls": "isin",
        "line": 569
      },
      {
        "function": "plot_section_from_ags_content",
        "calls": "isin",
        "line": 569
      },
      {
        "function": "parse_lines",
        "calls": "list",
        "line": 26
      },
      {
        "function": "parse_lines",
        "calls": "reader",
        "line": 26
      }
    ],
    "test_ags_integration.py": [
      {
        "function": "test_ags_integration",
        "calls": "print",
        "line": 9
      },
      {
        "function": "test_ags_integration",
        "calls": "plot_borehole_log_from_ags_content",
        "line": 9
      },
      {
        "function": "test_ags_integration",
        "calls": "print",
        "line": 9
      },
      {
        "function": "test_ags_integration",
        "calls": "print",
        "line": 9
      },
      {
        "function": "test_ags_integration",
        "calls": "print",
        "line": 9
      },
      {
        "function": "test_ags_integration",
        "calls": "len",
        "line": 9
      },
      {
        "function": "test_ags_integration",
        "calls": "len",
        "line": 9
      }
    ],
    "test_alignment.py": [
      {
        "function": "test_layer_alignment",
        "calls": "DataFrame",
        "line": 15
      },
      {
        "function": "test_layer_alignment",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_layer_alignment",
        "calls": "create_professional_borehole_log",
        "line": 15
      },
      {
        "function": "test_layer_alignment",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_layer_alignment",
        "calls": "b64decode",
        "line": 15
      },
      {
        "function": "test_layer_alignment",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_layer_alignment",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_layer_alignment",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_layer_alignment",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_layer_alignment",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_layer_alignment",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_layer_alignment",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_layer_alignment",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_layer_alignment",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_layer_alignment",
        "calls": "print_exc",
        "line": 15
      },
      {
        "function": "test_layer_alignment",
        "calls": "open",
        "line": 15
      },
      {
        "function": "test_layer_alignment",
        "calls": "write",
        "line": 15
      },
      {
        "function": "test_layer_alignment",
        "calls": "len",
        "line": 15
      }
    ],
    "test_callback_refactoring_comprehensive.py": [
      {
        "function": "test_all_callback_imports",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_all_callback_imports",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_all_callback_imports",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_all_callback_imports",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_all_callback_imports",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_all_callback_imports",
        "calls": "print_exc",
        "line": 16
      },
      {
        "function": "test_callback_manager",
        "calls": "print",
        "line": 58
      },
      {
        "function": "test_callback_manager",
        "calls": "get_callback_manager",
        "line": 58
      },
      {
        "function": "test_callback_manager",
        "calls": "isinstance",
        "line": 58
      },
      {
        "function": "test_callback_manager",
        "calls": "FileUploadCallback",
        "line": 58
      },
      {
        "function": "test_callback_manager",
        "calls": "add_callback",
        "line": 58
      },
      {
        "function": "test_callback_manager",
        "calls": "get_callback_summary",
        "line": 58
      },
      {
        "function": "test_callback_manager",
        "calls": "print",
        "line": 58
      },
      {
        "function": "test_callback_manager",
        "calls": "type",
        "line": 58
      },
      {
        "function": "test_callback_manager",
        "calls": "print",
        "line": 58
      },
      {
        "function": "test_callback_manager",
        "calls": "print_exc",
        "line": 58
      },
      {
        "function": "test_callback_instantiation",
        "calls": "print",
        "line": 86
      },
      {
        "function": "test_callback_instantiation",
        "calls": "print",
        "line": 86
      },
      {
        "function": "test_callback_instantiation",
        "calls": "FileUploadCallback",
        "line": 86
      },
      {
        "function": "test_callback_instantiation",
        "calls": "MapInteractionCallback",
        "line": 86
      },
      {
        "function": "test_callback_instantiation",
        "calls": "PlotGenerationCallback",
        "line": 86
      },
      {
        "function": "test_callback_instantiation",
        "calls": "SearchFunctionalityCallback",
        "line": 86
      },
      {
        "function": "test_callback_instantiation",
        "calls": "MarkerHandlingCallback",
        "line": 86
      },
      {
        "function": "test_callback_instantiation",
        "calls": "hasattr",
        "line": 86
      },
      {
        "function": "test_callback_instantiation",
        "calls": "hasattr",
        "line": 86
      },
      {
        "function": "test_callback_instantiation",
        "calls": "hasattr",
        "line": 86
      },
      {
        "function": "test_callback_instantiation",
        "calls": "print",
        "line": 86
      },
      {
        "function": "test_callback_instantiation",
        "calls": "print_exc",
        "line": 86
      },
      {
        "function": "test_callback_instantiation",
        "calls": "len",
        "line": 86
      },
      {
        "function": "test_register_all_callbacks_function",
        "calls": "print",
        "line": 126
      },
      {
        "function": "test_register_all_callbacks_function",
        "calls": "MockApp",
        "line": 126
      },
      {
        "function": "test_register_all_callbacks_function",
        "calls": "get_callback_manager",
        "line": 126
      },
      {
        "function": "test_register_all_callbacks_function",
        "calls": "clear",
        "line": 126
      },
      {
        "function": "test_register_all_callbacks_function",
        "calls": "get_callback_summary",
        "line": 126
      },
      {
        "function": "test_register_all_callbacks_function",
        "calls": "print",
        "line": 126
      },
      {
        "function": "test_register_all_callbacks_function",
        "calls": "FileUploadCallback",
        "line": 126
      },
      {
        "function": "test_register_all_callbacks_function",
        "calls": "MapInteractionCallback",
        "line": 126
      },
      {
        "function": "test_register_all_callbacks_function",
        "calls": "PlotGenerationCallback",
        "line": 126
      },
      {
        "function": "test_register_all_callbacks_function",
        "calls": "SearchFunctionalityCallback",
        "line": 126
      },
      {
        "function": "test_register_all_callbacks_function",
        "calls": "MarkerHandlingCallback",
        "line": 126
      },
      {
        "function": "test_register_all_callbacks_function",
        "calls": "add_callback",
        "line": 126
      },
      {
        "function": "test_register_all_callbacks_function",
        "calls": "print",
        "line": 126
      },
      {
        "function": "test_register_all_callbacks_function",
        "calls": "print_exc",
        "line": 126
      },
      {
        "function": "test_register_all_callbacks_function",
        "calls": "append",
        "line": 126
      },
      {
        "function": "test_architecture_improvements",
        "calls": "print",
        "line": 186
      },
      {
        "function": "test_architecture_improvements",
        "calls": "get_app_state_manager",
        "line": 186
      },
      {
        "function": "test_architecture_improvements",
        "calls": "print",
        "line": 186
      },
      {
        "function": "test_architecture_improvements",
        "calls": "get_error_handler",
        "line": 186
      },
      {
        "function": "test_architecture_improvements",
        "calls": "print",
        "line": 186
      },
      {
        "function": "test_architecture_improvements",
        "calls": "get_coordinate_service",
        "line": 186
      },
      {
        "function": "test_architecture_improvements",
        "calls": "print",
        "line": 186
      },
      {
        "function": "test_architecture_improvements",
        "calls": "print",
        "line": 186
      },
      {
        "function": "test_architecture_improvements",
        "calls": "print",
        "line": 186
      },
      {
        "function": "test_architecture_improvements",
        "calls": "print_exc",
        "line": 186
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 217
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 217
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "len",
        "line": 217
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 217
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 217
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "test",
        "line": 217
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 217
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 217
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 217
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 217
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 217
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 217
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 217
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 217
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 217
      },
      {
        "function": "run_comprehensive_validation",
        "calls": "print",
        "line": 217
      },
      {
        "function": "callback",
        "calls": "append",
        "line": 138
      },
      {
        "function": "decorator",
        "calls": "append",
        "line": 140
      }
    ],
    "test_cascading.py": [
      {
        "function": "test_cascading_pushdown",
        "calls": "print",
        "line": 12
      },
      {
        "function": "test_cascading_pushdown",
        "calls": "DataFrame",
        "line": 12
      },
      {
        "function": "test_cascading_pushdown",
        "calls": "create_professional_borehole_log",
        "line": 12
      },
      {
        "function": "test_cascading_pushdown",
        "calls": "print",
        "line": 12
      },
      {
        "function": "test_cascading_pushdown",
        "calls": "print",
        "line": 12
      },
      {
        "function": "test_cascading_pushdown",
        "calls": "print",
        "line": 12
      },
      {
        "function": "test_cascading_pushdown",
        "calls": "print",
        "line": 12
      },
      {
        "function": "test_cascading_pushdown",
        "calls": "print",
        "line": 12
      },
      {
        "function": "test_cascading_pushdown",
        "calls": "print",
        "line": 12
      },
      {
        "function": "test_cascading_pushdown",
        "calls": "print",
        "line": 12
      },
      {
        "function": "test_cascading_pushdown",
        "calls": "print",
        "line": 12
      },
      {
        "function": "test_cascading_pushdown",
        "calls": "b64decode",
        "line": 12
      },
      {
        "function": "test_cascading_pushdown",
        "calls": "print",
        "line": 12
      },
      {
        "function": "test_cascading_pushdown",
        "calls": "print",
        "line": 12
      },
      {
        "function": "test_cascading_pushdown",
        "calls": "open",
        "line": 12
      },
      {
        "function": "test_cascading_pushdown",
        "calls": "write",
        "line": 12
      },
      {
        "function": "test_cascading_pushdown",
        "calls": "len",
        "line": 12
      }
    ],
    "test_comprehensive_text_boxes.py": [
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "DataFrame",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "create_professional_borehole_log",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "DataFrame",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "create_professional_borehole_log",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "range",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "DataFrame",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "create_professional_borehole_log",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "append",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "open",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "write",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "open",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "write",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "open",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "write",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "b64decode",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "b64decode",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "b64decode",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "len",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "len",
        "line": 16
      },
      {
        "function": "test_comprehensive_text_boxes",
        "calls": "len",
        "line": 16
      }
    ],
    "test_coordinate_service.py": [
      {
        "function": "test_coordinate_service",
        "calls": "info",
        "line": 22
      },
      {
        "function": "test_coordinate_service",
        "calls": "get_coordinate_service",
        "line": 22
      },
      {
        "function": "test_coordinate_service",
        "calls": "get_cache_stats",
        "line": 22
      },
      {
        "function": "test_coordinate_service",
        "calls": "info",
        "line": 22
      },
      {
        "function": "test_coordinate_service",
        "calls": "info",
        "line": 22
      },
      {
        "function": "test_coordinate_service",
        "calls": "info",
        "line": 22
      },
      {
        "function": "test_coordinate_service",
        "calls": "info",
        "line": 22
      },
      {
        "function": "test_coordinate_service",
        "calls": "warning",
        "line": 22
      },
      {
        "function": "test_coordinate_service",
        "calls": "transform_bng_to_wgs84",
        "line": 22
      },
      {
        "function": "test_coordinate_service",
        "calls": "transform_bng_to_wgs84",
        "line": 22
      },
      {
        "function": "test_coordinate_service",
        "calls": "atleast_1d",
        "line": 22
      },
      {
        "function": "test_coordinate_service",
        "calls": "atleast_1d",
        "line": 22
      },
      {
        "function": "test_coordinate_service",
        "calls": "all",
        "line": 22
      },
      {
        "function": "test_coordinate_service",
        "calls": "all",
        "line": 22
      },
      {
        "function": "test_coordinate_service",
        "calls": "transform_wgs84_to_utm",
        "line": 22
      },
      {
        "function": "test_coordinate_service",
        "calls": "info",
        "line": 22
      },
      {
        "function": "test_coordinate_service",
        "calls": "isnan",
        "line": 22
      },
      {
        "function": "test_coordinate_service",
        "calls": "isnan",
        "line": 22
      },
      {
        "function": "test_coordinate_service",
        "calls": "info",
        "line": 22
      },
      {
        "function": "test_coordinate_service",
        "calls": "warning",
        "line": 22
      },
      {
        "function": "test_coordinate_service",
        "calls": "info",
        "line": 22
      },
      {
        "function": "test_coordinate_service",
        "calls": "info",
        "line": 22
      },
      {
        "function": "test_coordinate_service",
        "calls": "error",
        "line": 22
      },
      {
        "function": "test_coordinate_service",
        "calls": "info",
        "line": 22
      },
      {
        "function": "test_coordinate_service",
        "calls": "error",
        "line": 22
      },
      {
        "function": "test_coordinate_service",
        "calls": "error",
        "line": 22
      },
      {
        "function": "test_backward_compatibility",
        "calls": "info",
        "line": 119
      },
      {
        "function": "test_backward_compatibility",
        "calls": "transform_bng_to_wgs84",
        "line": 119
      },
      {
        "function": "test_backward_compatibility",
        "calls": "transform_wgs84_to_utm",
        "line": 119
      },
      {
        "function": "test_backward_compatibility",
        "calls": "info",
        "line": 119
      },
      {
        "function": "test_backward_compatibility",
        "calls": "info",
        "line": 119
      },
      {
        "function": "test_backward_compatibility",
        "calls": "error",
        "line": 119
      },
      {
        "function": "test_integration_with_callbacks",
        "calls": "info",
        "line": 140
      },
      {
        "function": "test_integration_with_callbacks",
        "calls": "transform_coordinates",
        "line": 140
      },
      {
        "function": "test_integration_with_callbacks",
        "calls": "info",
        "line": 140
      },
      {
        "function": "test_integration_with_callbacks",
        "calls": "error",
        "line": 140
      },
      {
        "function": "test_integration_with_callbacks",
        "calls": "error",
        "line": 140
      },
      {
        "function": "test_integration_with_callbacks",
        "calls": "info",
        "line": 140
      },
      {
        "function": "test_integration_with_callbacks",
        "calls": "error",
        "line": 140
      }
    ],
    "test_enhanced_text_boxes.py": [
      {
        "function": "test_enhanced_text_boxes",
        "calls": "DataFrame",
        "line": 15
      },
      {
        "function": "test_enhanced_text_boxes",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_enhanced_text_boxes",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_enhanced_text_boxes",
        "calls": "create_professional_borehole_log",
        "line": 15
      },
      {
        "function": "test_enhanced_text_boxes",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_enhanced_text_boxes",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_enhanced_text_boxes",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_enhanced_text_boxes",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_enhanced_text_boxes",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_enhanced_text_boxes",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_enhanced_text_boxes",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_enhanced_text_boxes",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_enhanced_text_boxes",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_enhanced_text_boxes",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_enhanced_text_boxes",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_enhanced_text_boxes",
        "calls": "print_exc",
        "line": 15
      },
      {
        "function": "test_enhanced_text_boxes",
        "calls": "len",
        "line": 15
      },
      {
        "function": "test_enhanced_text_boxes",
        "calls": "len",
        "line": 15
      },
      {
        "function": "test_enhanced_text_boxes",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_enhanced_text_boxes",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_enhanced_text_boxes",
        "calls": "len",
        "line": 15
      },
      {
        "function": "test_enhanced_text_boxes",
        "calls": "len",
        "line": 15
      }
    ],
    "test_forced_overlap.py": [
      {
        "function": "test_forced_overlap",
        "calls": "print",
        "line": 10
      },
      {
        "function": "test_forced_overlap",
        "calls": "DataFrame",
        "line": 10
      },
      {
        "function": "test_forced_overlap",
        "calls": "create_professional_borehole_log",
        "line": 10
      },
      {
        "function": "test_forced_overlap",
        "calls": "print",
        "line": 10
      },
      {
        "function": "test_forced_overlap",
        "calls": "print",
        "line": 10
      },
      {
        "function": "test_forced_overlap",
        "calls": "print",
        "line": 10
      },
      {
        "function": "test_forced_overlap",
        "calls": "print",
        "line": 10
      },
      {
        "function": "test_forced_overlap",
        "calls": "print",
        "line": 10
      },
      {
        "function": "test_forced_overlap",
        "calls": "b64decode",
        "line": 10
      },
      {
        "function": "test_forced_overlap",
        "calls": "print",
        "line": 10
      },
      {
        "function": "test_forced_overlap",
        "calls": "print",
        "line": 10
      },
      {
        "function": "test_forced_overlap",
        "calls": "open",
        "line": 10
      },
      {
        "function": "test_forced_overlap",
        "calls": "write",
        "line": 10
      },
      {
        "function": "test_forced_overlap",
        "calls": "len",
        "line": 10
      }
    ],
    "test_implementation_validation.py": [
      {
        "function": "test_memory_leak_fixes",
        "calls": "info",
        "line": 77
      },
      {
        "function": "test_memory_leak_fixes",
        "calls": "add_test",
        "line": 77
      },
      {
        "function": "test_memory_leak_fixes",
        "calls": "hasattr",
        "line": 77
      },
      {
        "function": "test_memory_leak_fixes",
        "calls": "matplotlib_figure",
        "line": 77
      },
      {
        "function": "test_memory_leak_fixes",
        "calls": "add_subplot",
        "line": 77
      },
      {
        "function": "test_memory_leak_fixes",
        "calls": "plot",
        "line": 77
      },
      {
        "function": "test_memory_leak_fixes",
        "calls": "add_test",
        "line": 77
      },
      {
        "function": "test_memory_leak_fixes",
        "calls": "add_test",
        "line": 77
      },
      {
        "function": "test_memory_leak_fixes",
        "calls": "add_test",
        "line": 77
      },
      {
        "function": "test_memory_leak_fixes",
        "calls": "str",
        "line": 77
      },
      {
        "function": "test_file_size_validation",
        "calls": "info",
        "line": 116
      },
      {
        "function": "test_file_size_validation",
        "calls": "hasattr",
        "line": 116
      },
      {
        "function": "test_file_size_validation",
        "calls": "add_test",
        "line": 116
      },
      {
        "function": "test_file_size_validation",
        "calls": "add_test",
        "line": 116
      },
      {
        "function": "test_file_size_validation",
        "calls": "add_test",
        "line": 116
      },
      {
        "function": "test_file_size_validation",
        "calls": "add_test",
        "line": 116
      },
      {
        "function": "test_file_size_validation",
        "calls": "add_test",
        "line": 116
      },
      {
        "function": "test_file_size_validation",
        "calls": "str",
        "line": 116
      },
      {
        "function": "test_error_handling_standardization",
        "calls": "info",
        "line": 163
      },
      {
        "function": "test_error_handling_standardization",
        "calls": "hasattr",
        "line": 163
      },
      {
        "function": "test_error_handling_standardization",
        "calls": "CallbackError",
        "line": 163
      },
      {
        "function": "test_error_handling_standardization",
        "calls": "create_error_message",
        "line": 163
      },
      {
        "function": "test_error_handling_standardization",
        "calls": "add_test",
        "line": 163
      },
      {
        "function": "test_error_handling_standardization",
        "calls": "add_test",
        "line": 163
      },
      {
        "function": "test_error_handling_standardization",
        "calls": "add_test",
        "line": 163
      },
      {
        "function": "test_error_handling_standardization",
        "calls": "add_test",
        "line": 163
      },
      {
        "function": "test_error_handling_standardization",
        "calls": "add_test",
        "line": 163
      },
      {
        "function": "test_error_handling_standardization",
        "calls": "add_test",
        "line": 163
      },
      {
        "function": "test_error_handling_standardization",
        "calls": "str",
        "line": 163
      },
      {
        "function": "test_error_handling_standardization",
        "calls": "str",
        "line": 163
      },
      {
        "function": "test_coordinate_transformation_service",
        "calls": "info",
        "line": 216
      },
      {
        "function": "test_coordinate_transformation_service",
        "calls": "get_coordinate_service",
        "line": 216
      },
      {
        "function": "test_coordinate_transformation_service",
        "calls": "transform_bng_to_wgs84",
        "line": 216
      },
      {
        "function": "test_coordinate_transformation_service",
        "calls": "get_cache_stats",
        "line": 216
      },
      {
        "function": "test_coordinate_transformation_service",
        "calls": "transform_bng_to_wgs84",
        "line": 216
      },
      {
        "function": "test_coordinate_transformation_service",
        "calls": "add_test",
        "line": 216
      },
      {
        "function": "test_coordinate_transformation_service",
        "calls": "add_test",
        "line": 216
      },
      {
        "function": "test_coordinate_transformation_service",
        "calls": "add_test",
        "line": 216
      },
      {
        "function": "test_coordinate_transformation_service",
        "calls": "add_test",
        "line": 216
      },
      {
        "function": "test_coordinate_transformation_service",
        "calls": "add_test",
        "line": 216
      },
      {
        "function": "test_coordinate_transformation_service",
        "calls": "add_test",
        "line": 216
      },
      {
        "function": "test_coordinate_transformation_service",
        "calls": "add_test",
        "line": 216
      },
      {
        "function": "test_coordinate_transformation_service",
        "calls": "abs",
        "line": 216
      },
      {
        "function": "test_coordinate_transformation_service",
        "calls": "abs",
        "line": 216
      },
      {
        "function": "test_coordinate_transformation_service",
        "calls": "str",
        "line": 216
      },
      {
        "function": "test_constants_extraction",
        "calls": "info",
        "line": 279
      },
      {
        "function": "test_constants_extraction",
        "calls": "hasattr",
        "line": 279
      },
      {
        "function": "test_constants_extraction",
        "calls": "add_test",
        "line": 279
      },
      {
        "function": "test_constants_extraction",
        "calls": "add_test",
        "line": 279
      },
      {
        "function": "test_constants_extraction",
        "calls": "hasattr",
        "line": 279
      },
      {
        "function": "test_constants_extraction",
        "calls": "add_test",
        "line": 279
      },
      {
        "function": "test_constants_extraction",
        "calls": "add_test",
        "line": 279
      },
      {
        "function": "test_constants_extraction",
        "calls": "hasattr",
        "line": 279
      },
      {
        "function": "test_constants_extraction",
        "calls": "add_test",
        "line": 279
      },
      {
        "function": "test_constants_extraction",
        "calls": "add_test",
        "line": 279
      },
      {
        "function": "test_constants_extraction",
        "calls": "add_test",
        "line": 279
      },
      {
        "function": "test_constants_extraction",
        "calls": "add_test",
        "line": 279
      },
      {
        "function": "test_constants_extraction",
        "calls": "add_test",
        "line": 279
      },
      {
        "function": "test_constants_extraction",
        "calls": "str",
        "line": 279
      },
      {
        "function": "test_loading_indicators",
        "calls": "info",
        "line": 347
      },
      {
        "function": "test_loading_indicators",
        "calls": "create_spinner",
        "line": 347
      },
      {
        "function": "test_loading_indicators",
        "calls": "create_progress_bar",
        "line": 347
      },
      {
        "function": "test_loading_indicators",
        "calls": "get_loading_manager",
        "line": 347
      },
      {
        "function": "test_loading_indicators",
        "calls": "set_loading",
        "line": 347
      },
      {
        "function": "test_loading_indicators",
        "calls": "is_loading",
        "line": 347
      },
      {
        "function": "test_loading_indicators",
        "calls": "create_upload_loading",
        "line": 347
      },
      {
        "function": "test_loading_indicators",
        "calls": "create_plot_loading",
        "line": 347
      },
      {
        "function": "test_loading_indicators",
        "calls": "clear_all",
        "line": 347
      },
      {
        "function": "test_loading_indicators",
        "calls": "add_test",
        "line": 347
      },
      {
        "function": "test_loading_indicators",
        "calls": "add_test",
        "line": 347
      },
      {
        "function": "test_loading_indicators",
        "calls": "add_test",
        "line": 347
      },
      {
        "function": "test_loading_indicators",
        "calls": "add_test",
        "line": 347
      },
      {
        "function": "test_loading_indicators",
        "calls": "add_test",
        "line": 347
      },
      {
        "function": "test_loading_indicators",
        "calls": "add_test",
        "line": 347
      },
      {
        "function": "test_loading_indicators",
        "calls": "add_test",
        "line": 347
      },
      {
        "function": "test_loading_indicators",
        "calls": "add_test",
        "line": 347
      },
      {
        "function": "test_loading_indicators",
        "calls": "add_test",
        "line": 347
      },
      {
        "function": "test_loading_indicators",
        "calls": "str",
        "line": 347
      },
      {
        "function": "test_error_recovery_mechanisms",
        "calls": "info",
        "line": 433
      },
      {
        "function": "test_error_recovery_mechanisms",
        "calls": "CircuitBreaker",
        "line": 433
      },
      {
        "function": "test_error_recovery_mechanisms",
        "calls": "with_retry",
        "line": 433
      },
      {
        "function": "test_error_recovery_mechanisms",
        "calls": "test_function",
        "line": 433
      },
      {
        "function": "test_error_recovery_mechanisms",
        "calls": "get_recovery_manager",
        "line": 433
      },
      {
        "function": "test_error_recovery_mechanisms",
        "calls": "get_system_health",
        "line": 433
      },
      {
        "function": "test_error_recovery_mechanisms",
        "calls": "isinstance",
        "line": 433
      },
      {
        "function": "test_error_recovery_mechanisms",
        "calls": "add_test",
        "line": 433
      },
      {
        "function": "test_error_recovery_mechanisms",
        "calls": "add_test",
        "line": 433
      },
      {
        "function": "test_error_recovery_mechanisms",
        "calls": "add_test",
        "line": 433
      },
      {
        "function": "test_error_recovery_mechanisms",
        "calls": "add_test",
        "line": 433
      },
      {
        "function": "test_error_recovery_mechanisms",
        "calls": "ValueError",
        "line": 433
      },
      {
        "function": "test_error_recovery_mechanisms",
        "calls": "add_test",
        "line": 433
      },
      {
        "function": "test_error_recovery_mechanisms",
        "calls": "add_test",
        "line": 433
      },
      {
        "function": "test_error_recovery_mechanisms",
        "calls": "add_test",
        "line": 433
      },
      {
        "function": "test_error_recovery_mechanisms",
        "calls": "create_user_friendly_message",
        "line": 433
      },
      {
        "function": "test_error_recovery_mechanisms",
        "calls": "add_test",
        "line": 433
      },
      {
        "function": "test_error_recovery_mechanisms",
        "calls": "add_test",
        "line": 433
      },
      {
        "function": "test_error_recovery_mechanisms",
        "calls": "len",
        "line": 433
      },
      {
        "function": "test_error_recovery_mechanisms",
        "calls": "str",
        "line": 433
      },
      {
        "function": "test_health_check_endpoint",
        "calls": "info",
        "line": 518
      },
      {
        "function": "test_health_check_endpoint",
        "calls": "get_health_checker",
        "line": 518
      },
      {
        "function": "test_health_check_endpoint",
        "calls": "get_quick_health_status",
        "line": 518
      },
      {
        "function": "test_health_check_endpoint",
        "calls": "run_health_check",
        "line": 518
      },
      {
        "function": "test_health_check_endpoint",
        "calls": "add_test",
        "line": 518
      },
      {
        "function": "test_health_check_endpoint",
        "calls": "add_test",
        "line": 518
      },
      {
        "function": "test_health_check_endpoint",
        "calls": "add_test",
        "line": 518
      },
      {
        "function": "test_health_check_endpoint",
        "calls": "add_test",
        "line": 518
      },
      {
        "function": "test_health_check_endpoint",
        "calls": "add_test",
        "line": 518
      },
      {
        "function": "test_health_check_endpoint",
        "calls": "get",
        "line": 518
      },
      {
        "function": "test_health_check_endpoint",
        "calls": "add_test",
        "line": 518
      },
      {
        "function": "test_health_check_endpoint",
        "calls": "add_test",
        "line": 518
      },
      {
        "function": "test_health_check_endpoint",
        "calls": "get",
        "line": 518
      },
      {
        "function": "test_health_check_endpoint",
        "calls": "add_test",
        "line": 518
      },
      {
        "function": "test_health_check_endpoint",
        "calls": "add_test",
        "line": 518
      },
      {
        "function": "test_health_check_endpoint",
        "calls": "str",
        "line": 518
      },
      {
        "function": "main",
        "calls": "info",
        "line": 598
      },
      {
        "function": "main",
        "calls": "info",
        "line": 598
      },
      {
        "function": "main",
        "calls": "info",
        "line": 598
      },
      {
        "function": "main",
        "calls": "info",
        "line": 598
      },
      {
        "function": "main",
        "calls": "ValidationResults",
        "line": 598
      },
      {
        "function": "main",
        "calls": "time",
        "line": 598
      },
      {
        "function": "main",
        "calls": "info",
        "line": 598
      },
      {
        "function": "main",
        "calls": "info",
        "line": 598
      },
      {
        "function": "main",
        "calls": "info",
        "line": 598
      },
      {
        "function": "main",
        "calls": "get_summary",
        "line": 598
      },
      {
        "function": "main",
        "calls": "info",
        "line": 598
      },
      {
        "function": "main",
        "calls": "info",
        "line": 598
      },
      {
        "function": "main",
        "calls": "info",
        "line": 598
      },
      {
        "function": "main",
        "calls": "info",
        "line": 598
      },
      {
        "function": "main",
        "calls": "info",
        "line": 598
      },
      {
        "function": "main",
        "calls": "info",
        "line": 598
      },
      {
        "function": "main",
        "calls": "info",
        "line": 598
      },
      {
        "function": "main",
        "calls": "info",
        "line": 598
      },
      {
        "function": "main",
        "calls": "info",
        "line": 598
      },
      {
        "function": "main",
        "calls": "info",
        "line": 598
      },
      {
        "function": "main",
        "calls": "info",
        "line": 598
      },
      {
        "function": "main",
        "calls": "info",
        "line": 598
      },
      {
        "function": "main",
        "calls": "info",
        "line": 598
      },
      {
        "function": "main",
        "calls": "get",
        "line": 598
      },
      {
        "function": "main",
        "calls": "info",
        "line": 598
      },
      {
        "function": "main",
        "calls": "time",
        "line": 598
      },
      {
        "function": "main",
        "calls": "error",
        "line": 598
      },
      {
        "function": "main",
        "calls": "test_func",
        "line": 598
      },
      {
        "function": "main",
        "calls": "info",
        "line": 598
      },
      {
        "function": "main",
        "calls": "info",
        "line": 598
      },
      {
        "function": "main",
        "calls": "error",
        "line": 598
      },
      {
        "function": "main",
        "calls": "add_test",
        "line": 598
      },
      {
        "function": "main",
        "calls": "str",
        "line": 598
      },
      {
        "function": "add_test",
        "calls": "append",
        "line": 44
      },
      {
        "function": "add_test",
        "calls": "time",
        "line": 44
      },
      {
        "function": "get_summary",
        "calls": "len",
        "line": 63
      },
      {
        "function": "get_summary",
        "calls": "round",
        "line": 63
      },
      {
        "function": "test_function",
        "calls": "with_retry",
        "line": 463
      }
    ],
    "test_layer_order.py": [
      {
        "function": "test_numbered_layers",
        "calls": "DataFrame",
        "line": 15
      },
      {
        "function": "test_numbered_layers",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_numbered_layers",
        "calls": "create_professional_borehole_log",
        "line": 15
      },
      {
        "function": "test_numbered_layers",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_numbered_layers",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_numbered_layers",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_numbered_layers",
        "calls": "print_exc",
        "line": 15
      },
      {
        "function": "test_numbered_layers",
        "calls": "len",
        "line": 15
      },
      {
        "function": "test_numbered_layers",
        "calls": "b64decode",
        "line": 15
      },
      {
        "function": "test_numbered_layers",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_numbered_layers",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_numbered_layers",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_numbered_layers",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_numbered_layers",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_numbered_layers",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_numbered_layers",
        "calls": "open",
        "line": 15
      },
      {
        "function": "test_numbered_layers",
        "calls": "write",
        "line": 15
      },
      {
        "function": "test_numbered_layers",
        "calls": "len",
        "line": 15
      }
    ],
    "test_legend_mapping.py": [
      {
        "function": "test_geology_mapping",
        "calls": "print",
        "line": 11
      },
      {
        "function": "test_geology_mapping",
        "calls": "DataFrame",
        "line": 11
      },
      {
        "function": "test_geology_mapping",
        "calls": "print",
        "line": 11
      },
      {
        "function": "test_geology_mapping",
        "calls": "print",
        "line": 11
      },
      {
        "function": "test_geology_mapping",
        "calls": "print",
        "line": 11
      },
      {
        "function": "test_geology_mapping",
        "calls": "create_professional_borehole_log",
        "line": 11
      },
      {
        "function": "test_geology_mapping",
        "calls": "get_geology_color",
        "line": 11
      },
      {
        "function": "test_geology_mapping",
        "calls": "get_geology_pattern",
        "line": 11
      },
      {
        "function": "test_geology_mapping",
        "calls": "print",
        "line": 11
      },
      {
        "function": "test_geology_mapping",
        "calls": "print",
        "line": 11
      },
      {
        "function": "test_geology_mapping",
        "calls": "print",
        "line": 11
      },
      {
        "function": "test_geology_mapping",
        "calls": "len",
        "line": 11
      }
    ],
    "test_optimizations.py": [
      {
        "function": "test_memory_optimization",
        "calls": "print",
        "line": 12
      },
      {
        "function": "test_memory_optimization",
        "calls": "DataFrame",
        "line": 12
      },
      {
        "function": "test_memory_optimization",
        "calls": "sum",
        "line": 12
      },
      {
        "function": "test_memory_optimization",
        "calls": "print",
        "line": 12
      },
      {
        "function": "test_memory_optimization",
        "calls": "optimize_dataframe_memory",
        "line": 12
      },
      {
        "function": "test_memory_optimization",
        "calls": "sum",
        "line": 12
      },
      {
        "function": "test_memory_optimization",
        "calls": "print",
        "line": 12
      },
      {
        "function": "test_memory_optimization",
        "calls": "print",
        "line": 12
      },
      {
        "function": "test_memory_optimization",
        "calls": "print",
        "line": 12
      },
      {
        "function": "test_memory_optimization",
        "calls": "print",
        "line": 12
      },
      {
        "function": "test_memory_optimization",
        "calls": "range",
        "line": 12
      },
      {
        "function": "test_memory_optimization",
        "calls": "random",
        "line": 12
      },
      {
        "function": "test_memory_optimization",
        "calls": "memory_usage",
        "line": 12
      },
      {
        "function": "test_memory_optimization",
        "calls": "memory_usage",
        "line": 12
      },
      {
        "function": "test_lazy_marker_manager",
        "calls": "print",
        "line": 47
      },
      {
        "function": "test_lazy_marker_manager",
        "calls": "ViewportBounds",
        "line": 47
      },
      {
        "function": "test_lazy_marker_manager",
        "calls": "print",
        "line": 47
      },
      {
        "function": "test_lazy_marker_manager",
        "calls": "LazyMarkerManager",
        "line": 47
      },
      {
        "function": "test_lazy_marker_manager",
        "calls": "print",
        "line": 47
      },
      {
        "function": "test_lazy_marker_manager",
        "calls": "DataFrame",
        "line": 47
      },
      {
        "function": "test_lazy_marker_manager",
        "calls": "get_visible_markers",
        "line": 47
      },
      {
        "function": "test_lazy_marker_manager",
        "calls": "print",
        "line": 47
      },
      {
        "function": "test_lazy_marker_manager",
        "calls": "print",
        "line": 47
      },
      {
        "function": "test_lazy_marker_manager",
        "calls": "print",
        "line": 47
      },
      {
        "function": "test_lazy_marker_manager",
        "calls": "print_exc",
        "line": 47
      },
      {
        "function": "test_lazy_marker_manager",
        "calls": "len",
        "line": 47
      },
      {
        "function": "test_coordinate_service",
        "calls": "print",
        "line": 91
      },
      {
        "function": "test_coordinate_service",
        "calls": "get_coordinate_service",
        "line": 91
      },
      {
        "function": "test_coordinate_service",
        "calls": "print",
        "line": 91
      },
      {
        "function": "test_coordinate_service",
        "calls": "transform_bng_to_wgs84",
        "line": 91
      },
      {
        "function": "test_coordinate_service",
        "calls": "print",
        "line": 91
      },
      {
        "function": "test_coordinate_service",
        "calls": "print",
        "line": 91
      },
      {
        "function": "test_coordinate_service",
        "calls": "print",
        "line": 91
      },
      {
        "function": "test_coordinate_service",
        "calls": "type",
        "line": 91
      },
      {
        "function": "test_memory_monitoring",
        "calls": "print",
        "line": 114
      },
      {
        "function": "test_memory_monitoring",
        "calls": "monitor_memory_usage",
        "line": 114
      },
      {
        "function": "test_memory_monitoring",
        "calls": "print",
        "line": 114
      },
      {
        "function": "test_memory_monitoring",
        "calls": "print",
        "line": 114
      },
      {
        "function": "test_integration",
        "calls": "print",
        "line": 130
      },
      {
        "function": "test_integration",
        "calls": "spec_from_file_location",
        "line": 130
      },
      {
        "function": "test_integration",
        "calls": "module_from_spec",
        "line": 130
      },
      {
        "function": "test_integration",
        "calls": "print",
        "line": 130
      },
      {
        "function": "test_integration",
        "calls": "print",
        "line": 130
      },
      {
        "function": "main",
        "calls": "print",
        "line": 152
      },
      {
        "function": "main",
        "calls": "print",
        "line": 152
      },
      {
        "function": "main",
        "calls": "len",
        "line": 152
      },
      {
        "function": "main",
        "calls": "print",
        "line": 152
      },
      {
        "function": "main",
        "calls": "print",
        "line": 152
      },
      {
        "function": "main",
        "calls": "test",
        "line": 152
      },
      {
        "function": "main",
        "calls": "print",
        "line": 152
      },
      {
        "function": "main",
        "calls": "print",
        "line": 152
      }
    ],
    "test_overflow_management.py": [
      {
        "function": "test_overflow_management_system",
        "calls": "DataFrame",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "iterrows",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "len",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "create_professional_borehole_log",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "enumerate",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "print_exc",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "len",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "open",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "write",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_overflow_management_system",
        "calls": "b64decode",
        "line": 16
      },
      {
        "function": "test_edge_cases",
        "calls": "print",
        "line": 124
      },
      {
        "function": "test_edge_cases",
        "calls": "print",
        "line": 124
      },
      {
        "function": "test_edge_cases",
        "calls": "print",
        "line": 124
      },
      {
        "function": "test_edge_cases",
        "calls": "DataFrame",
        "line": 124
      },
      {
        "function": "test_edge_cases",
        "calls": "print",
        "line": 124
      },
      {
        "function": "test_edge_cases",
        "calls": "iterrows",
        "line": 124
      },
      {
        "function": "test_edge_cases",
        "calls": "len",
        "line": 124
      },
      {
        "function": "test_edge_cases",
        "calls": "print",
        "line": 124
      },
      {
        "function": "test_edge_cases",
        "calls": "create_professional_borehole_log",
        "line": 124
      },
      {
        "function": "test_edge_cases",
        "calls": "print",
        "line": 124
      },
      {
        "function": "test_edge_cases",
        "calls": "enumerate",
        "line": 124
      },
      {
        "function": "test_edge_cases",
        "calls": "print",
        "line": 124
      },
      {
        "function": "test_edge_cases",
        "calls": "print",
        "line": 124
      },
      {
        "function": "test_edge_cases",
        "calls": "print_exc",
        "line": 124
      },
      {
        "function": "test_edge_cases",
        "calls": "print",
        "line": 124
      },
      {
        "function": "test_edge_cases",
        "calls": "open",
        "line": 124
      },
      {
        "function": "test_edge_cases",
        "calls": "write",
        "line": 124
      },
      {
        "function": "test_edge_cases",
        "calls": "len",
        "line": 124
      },
      {
        "function": "test_edge_cases",
        "calls": "b64decode",
        "line": 124
      }
    ],
    "test_pushdown_extension.py": [
      {
        "function": "test_pushed_down_extension",
        "calls": "DataFrame",
        "line": 17
      },
      {
        "function": "test_pushed_down_extension",
        "calls": "print",
        "line": 17
      },
      {
        "function": "test_pushed_down_extension",
        "calls": "print",
        "line": 17
      },
      {
        "function": "test_pushed_down_extension",
        "calls": "iterrows",
        "line": 17
      },
      {
        "function": "test_pushed_down_extension",
        "calls": "print",
        "line": 17
      },
      {
        "function": "test_pushed_down_extension",
        "calls": "print",
        "line": 17
      },
      {
        "function": "test_pushed_down_extension",
        "calls": "print",
        "line": 17
      },
      {
        "function": "test_pushed_down_extension",
        "calls": "print",
        "line": 17
      },
      {
        "function": "test_pushed_down_extension",
        "calls": "print",
        "line": 17
      },
      {
        "function": "test_pushed_down_extension",
        "calls": "print",
        "line": 17
      },
      {
        "function": "test_pushed_down_extension",
        "calls": "print",
        "line": 17
      },
      {
        "function": "test_pushed_down_extension",
        "calls": "create_professional_borehole_log",
        "line": 17
      },
      {
        "function": "test_pushed_down_extension",
        "calls": "print",
        "line": 17
      },
      {
        "function": "test_pushed_down_extension",
        "calls": "print",
        "line": 17
      },
      {
        "function": "test_pushed_down_extension",
        "calls": "print",
        "line": 17
      },
      {
        "function": "test_pushed_down_extension",
        "calls": "print_exc",
        "line": 17
      },
      {
        "function": "test_pushed_down_extension",
        "calls": "print",
        "line": 17
      },
      {
        "function": "test_pushed_down_extension",
        "calls": "print",
        "line": 17
      },
      {
        "function": "test_pushed_down_extension",
        "calls": "print",
        "line": 17
      },
      {
        "function": "test_pushed_down_extension",
        "calls": "print",
        "line": 17
      },
      {
        "function": "test_pushed_down_extension",
        "calls": "print",
        "line": 17
      },
      {
        "function": "test_pushed_down_extension",
        "calls": "print",
        "line": 17
      },
      {
        "function": "test_pushed_down_extension",
        "calls": "open",
        "line": 17
      },
      {
        "function": "test_pushed_down_extension",
        "calls": "write",
        "line": 17
      },
      {
        "function": "test_pushed_down_extension",
        "calls": "print",
        "line": 17
      },
      {
        "function": "test_pushed_down_extension",
        "calls": "len",
        "line": 17
      },
      {
        "function": "test_pushed_down_extension",
        "calls": "b64decode",
        "line": 17
      },
      {
        "function": "test_mixed_scenarios",
        "calls": "DataFrame",
        "line": 96
      },
      {
        "function": "test_mixed_scenarios",
        "calls": "print",
        "line": 96
      },
      {
        "function": "test_mixed_scenarios",
        "calls": "print",
        "line": 96
      },
      {
        "function": "test_mixed_scenarios",
        "calls": "print",
        "line": 96
      },
      {
        "function": "test_mixed_scenarios",
        "calls": "print",
        "line": 96
      },
      {
        "function": "test_mixed_scenarios",
        "calls": "iterrows",
        "line": 96
      },
      {
        "function": "test_mixed_scenarios",
        "calls": "print",
        "line": 96
      },
      {
        "function": "test_mixed_scenarios",
        "calls": "create_professional_borehole_log",
        "line": 96
      },
      {
        "function": "test_mixed_scenarios",
        "calls": "print",
        "line": 96
      },
      {
        "function": "test_mixed_scenarios",
        "calls": "print",
        "line": 96
      },
      {
        "function": "test_mixed_scenarios",
        "calls": "print",
        "line": 96
      },
      {
        "function": "test_mixed_scenarios",
        "calls": "print",
        "line": 96
      },
      {
        "function": "test_mixed_scenarios",
        "calls": "print_exc",
        "line": 96
      },
      {
        "function": "test_mixed_scenarios",
        "calls": "open",
        "line": 96
      },
      {
        "function": "test_mixed_scenarios",
        "calls": "write",
        "line": 96
      },
      {
        "function": "test_mixed_scenarios",
        "calls": "b64decode",
        "line": 96
      },
      {
        "function": "test_mixed_scenarios",
        "calls": "len",
        "line": 96
      }
    ],
    "test_refactoring_validation.py": [
      {
        "function": "test_state_management_creation",
        "calls": "BoreholeData",
        "line": 17
      },
      {
        "function": "test_state_management_creation",
        "calls": "MapState",
        "line": 17
      },
      {
        "function": "test_state_management_creation",
        "calls": "SelectionState",
        "line": 17
      },
      {
        "function": "test_state_management_creation",
        "calls": "PlotState",
        "line": 17
      },
      {
        "function": "test_state_management_creation",
        "calls": "UploadState",
        "line": 17
      },
      {
        "function": "test_state_management_creation",
        "calls": "get_app_state_manager",
        "line": 17
      },
      {
        "function": "test_state_management_creation",
        "calls": "isinstance",
        "line": 17
      },
      {
        "function": "test_state_management_creation",
        "calls": "get_app_state_manager",
        "line": 17
      },
      {
        "function": "test_state_management_creation",
        "calls": "print",
        "line": 17
      },
      {
        "function": "test_state_management_creation",
        "calls": "get_borehole_count",
        "line": 17
      },
      {
        "function": "test_state_management_creation",
        "calls": "len",
        "line": 17
      },
      {
        "function": "test_state_management_creation",
        "calls": "len",
        "line": 17
      },
      {
        "function": "test_callback_base_classes",
        "calls": "CallbackManager",
        "line": 61
      },
      {
        "function": "test_callback_base_classes",
        "calls": "MockCallback",
        "line": 61
      },
      {
        "function": "test_callback_base_classes",
        "calls": "MockCallback",
        "line": 61
      },
      {
        "function": "test_callback_base_classes",
        "calls": "add_callback",
        "line": 61
      },
      {
        "function": "test_callback_base_classes",
        "calls": "add_callback",
        "line": 61
      },
      {
        "function": "test_callback_base_classes",
        "calls": "get_callback_summary",
        "line": 61
      },
      {
        "function": "test_callback_base_classes",
        "calls": "get_callback_manager",
        "line": 61
      },
      {
        "function": "test_callback_base_classes",
        "calls": "isinstance",
        "line": 61
      },
      {
        "function": "test_callback_base_classes",
        "calls": "print",
        "line": 61
      },
      {
        "function": "test_callback_base_classes",
        "calls": "len",
        "line": 61
      },
      {
        "function": "test_callback_base_classes",
        "calls": "len",
        "line": 61
      },
      {
        "function": "test_error_handling_system",
        "calls": "get_error_handler",
        "line": 101
      },
      {
        "function": "test_error_handling_system",
        "calls": "isinstance",
        "line": 101
      },
      {
        "function": "test_error_handling_system",
        "calls": "create_error",
        "line": 101
      },
      {
        "function": "test_error_handling_system",
        "calls": "isinstance",
        "line": 101
      },
      {
        "function": "test_error_handling_system",
        "calls": "get_error_history",
        "line": 101
      },
      {
        "function": "test_error_handling_system",
        "calls": "get_user_friendly_message",
        "line": 101
      },
      {
        "function": "test_error_handling_system",
        "calls": "print",
        "line": 101
      },
      {
        "function": "test_error_handling_system",
        "calls": "len",
        "line": 101
      },
      {
        "function": "test_error_handling_system",
        "calls": "lower",
        "line": 101
      },
      {
        "function": "test_callback_imports",
        "calls": "FileUploadCallback",
        "line": 142
      },
      {
        "function": "test_callback_imports",
        "calls": "MapInteractionCallback",
        "line": 142
      },
      {
        "function": "test_callback_imports",
        "calls": "get_callback_manager",
        "line": 142
      },
      {
        "function": "test_callback_imports",
        "calls": "len",
        "line": 142
      },
      {
        "function": "test_callback_imports",
        "calls": "register_file_upload_callbacks",
        "line": 142
      },
      {
        "function": "test_callback_imports",
        "calls": "register_map_interaction_callbacks",
        "line": 142
      },
      {
        "function": "test_callback_imports",
        "calls": "print",
        "line": 142
      },
      {
        "function": "test_callback_imports",
        "calls": "len",
        "line": 142
      },
      {
        "function": "test_state_update_integration",
        "calls": "get_app_state_manager",
        "line": 174
      },
      {
        "function": "test_state_update_integration",
        "calls": "DataFrame",
        "line": 174
      },
      {
        "function": "test_state_update_integration",
        "calls": "update_borehole_data",
        "line": 174
      },
      {
        "function": "test_state_update_integration",
        "calls": "update_selection_state",
        "line": 174
      },
      {
        "function": "test_state_update_integration",
        "calls": "update_map_state",
        "line": 174
      },
      {
        "function": "test_state_update_integration",
        "calls": "to_dash_store_format",
        "line": 174
      },
      {
        "function": "test_state_update_integration",
        "calls": "print",
        "line": 174
      },
      {
        "function": "test_state_update_integration",
        "calls": "get_borehole_count",
        "line": 174
      },
      {
        "function": "test_state_update_integration",
        "calls": "len",
        "line": 174
      },
      {
        "function": "test_state_update_integration",
        "calls": "len",
        "line": 174
      },
      {
        "function": "test_state_update_integration",
        "calls": "len",
        "line": 174
      },
      {
        "function": "test_coordinate_service_integration",
        "calls": "get_coordinate_service",
        "line": 227
      },
      {
        "function": "test_coordinate_service_integration",
        "calls": "transform_bng_to_wgs84",
        "line": 227
      },
      {
        "function": "test_coordinate_service_integration",
        "calls": "isinstance",
        "line": 227
      },
      {
        "function": "test_coordinate_service_integration",
        "calls": "isinstance",
        "line": 227
      },
      {
        "function": "test_coordinate_service_integration",
        "calls": "transform_bng_to_wgs84",
        "line": 227
      },
      {
        "function": "test_coordinate_service_integration",
        "calls": "print",
        "line": 227
      },
      {
        "function": "test_coordinate_service_integration",
        "calls": "len",
        "line": 227
      },
      {
        "function": "test_coordinate_service_integration",
        "calls": "len",
        "line": 227
      },
      {
        "function": "test_coordinate_service_integration",
        "calls": "len",
        "line": 227
      },
      {
        "function": "test_coordinate_service_integration",
        "calls": "len",
        "line": 227
      },
      {
        "function": "run_all_tests",
        "calls": "print",
        "line": 252
      },
      {
        "function": "run_all_tests",
        "calls": "print",
        "line": 252
      },
      {
        "function": "run_all_tests",
        "calls": "print",
        "line": 252
      },
      {
        "function": "run_all_tests",
        "calls": "print",
        "line": 252
      },
      {
        "function": "run_all_tests",
        "calls": "print",
        "line": 252
      },
      {
        "function": "run_all_tests",
        "calls": "print",
        "line": 252
      },
      {
        "function": "run_all_tests",
        "calls": "print",
        "line": 252
      },
      {
        "function": "run_all_tests",
        "calls": "test",
        "line": 252
      },
      {
        "function": "run_all_tests",
        "calls": "print",
        "line": 252
      },
      {
        "function": "run_all_tests",
        "calls": "print_exc",
        "line": 252
      }
    ],
    "test_text_boxes.py": [
      {
        "function": "test_text_box_implementation",
        "calls": "DataFrame",
        "line": 15
      },
      {
        "function": "test_text_box_implementation",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_text_box_implementation",
        "calls": "create_professional_borehole_log",
        "line": 15
      },
      {
        "function": "test_text_box_implementation",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_text_box_implementation",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_text_box_implementation",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_text_box_implementation",
        "calls": "print_exc",
        "line": 15
      },
      {
        "function": "test_text_box_implementation",
        "calls": "len",
        "line": 15
      },
      {
        "function": "test_text_box_implementation",
        "calls": "b64decode",
        "line": 15
      },
      {
        "function": "test_text_box_implementation",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_text_box_implementation",
        "calls": "open",
        "line": 15
      },
      {
        "function": "test_text_box_implementation",
        "calls": "write",
        "line": 15
      },
      {
        "function": "test_text_box_implementation",
        "calls": "len",
        "line": 15
      }
    ],
    "test_text_box_extension.py": [
      {
        "function": "test_text_box_extension",
        "calls": "DataFrame",
        "line": 16
      },
      {
        "function": "test_text_box_extension",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_text_box_extension",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_text_box_extension",
        "calls": "iterrows",
        "line": 16
      },
      {
        "function": "test_text_box_extension",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_text_box_extension",
        "calls": "create_professional_borehole_log",
        "line": 16
      },
      {
        "function": "test_text_box_extension",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_text_box_extension",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_text_box_extension",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_text_box_extension",
        "calls": "print_exc",
        "line": 16
      },
      {
        "function": "test_text_box_extension",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_text_box_extension",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_text_box_extension",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_text_box_extension",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_text_box_extension",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_text_box_extension",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_text_box_extension",
        "calls": "open",
        "line": 16
      },
      {
        "function": "test_text_box_extension",
        "calls": "write",
        "line": 16
      },
      {
        "function": "test_text_box_extension",
        "calls": "print",
        "line": 16
      },
      {
        "function": "test_text_box_extension",
        "calls": "len",
        "line": 16
      },
      {
        "function": "test_text_box_extension",
        "calls": "b64decode",
        "line": 16
      }
    ],
    "test_verification.py": [
      {
        "function": "test_simple_verification",
        "calls": "DataFrame",
        "line": 15
      },
      {
        "function": "test_simple_verification",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_simple_verification",
        "calls": "create_professional_borehole_log",
        "line": 15
      },
      {
        "function": "test_simple_verification",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_simple_verification",
        "calls": "b64decode",
        "line": 15
      },
      {
        "function": "test_simple_verification",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_simple_verification",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_simple_verification",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_simple_verification",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_simple_verification",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_simple_verification",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_simple_verification",
        "calls": "print",
        "line": 15
      },
      {
        "function": "test_simple_verification",
        "calls": "print_exc",
        "line": 15
      },
      {
        "function": "test_simple_verification",
        "calls": "open",
        "line": 15
      },
      {
        "function": "test_simple_verification",
        "calls": "write",
        "line": 15
      },
      {
        "function": "test_simple_verification",
        "calls": "len",
        "line": 15
      }
    ],
    "callbacks\\base.py": [
      {
        "function": "__init__",
        "calls": "getLogger",
        "line": 15
      },
      {
        "function": "__init__",
        "calls": "lower",
        "line": 15
      },
      {
        "function": "__init__",
        "calls": "__init__",
        "line": 29
      },
      {
        "function": "__init__",
        "calls": "super",
        "line": 29
      },
      {
        "function": "__init__",
        "calls": "__init__",
        "line": 36
      },
      {
        "function": "__init__",
        "calls": "super",
        "line": 36
      },
      {
        "function": "__init__",
        "calls": "__init__",
        "line": 43
      },
      {
        "function": "__init__",
        "calls": "super",
        "line": 43
      },
      {
        "function": "__init__",
        "calls": "__init__",
        "line": 50
      },
      {
        "function": "__init__",
        "calls": "super",
        "line": 50
      },
      {
        "function": "__init__",
        "calls": "__init__",
        "line": 57
      },
      {
        "function": "__init__",
        "calls": "super",
        "line": 57
      }
    ],
    "callbacks\\file_upload.py": [
      {
        "function": "register_file_upload_callbacks",
        "calls": "add_callback",
        "line": 507
      },
      {
        "function": "register_file_upload_callbacks",
        "calls": "info",
        "line": 507
      },
      {
        "function": "register_file_upload_callbacks",
        "calls": "FileUploadCallback",
        "line": 507
      },
      {
        "function": "__init__",
        "calls": "__init__",
        "line": 30
      },
      {
        "function": "__init__",
        "calls": "super",
        "line": 30
      },
      {
        "function": "register",
        "calls": "callback",
        "line": 33
      },
      {
        "function": "register",
        "calls": "log_callback_start",
        "line": 33
      },
      {
        "function": "register",
        "calls": "_process_upload",
        "line": 33
      },
      {
        "function": "register",
        "calls": "log_callback_end",
        "line": 33
      },
      {
        "function": "register",
        "calls": "Output",
        "line": 33
      },
      {
        "function": "register",
        "calls": "Output",
        "line": 33
      },
      {
        "function": "register",
        "calls": "Output",
        "line": 33
      },
      {
        "function": "register",
        "calls": "Output",
        "line": 33
      },
      {
        "function": "register",
        "calls": "Output",
        "line": 33
      },
      {
        "function": "register",
        "calls": "Output",
        "line": 33
      },
      {
        "function": "register",
        "calls": "Input",
        "line": 33
      },
      {
        "function": "register",
        "calls": "State",
        "line": 33
      },
      {
        "function": "register",
        "calls": "State",
        "line": 33
      },
      {
        "function": "register",
        "calls": "info",
        "line": 33
      },
      {
        "function": "register",
        "calls": "error",
        "line": 33
      },
      {
        "function": "register",
        "calls": "handle_error",
        "line": 33
      },
      {
        "function": "register",
        "calls": "len",
        "line": 33
      },
      {
        "function": "register",
        "calls": "get",
        "line": 33
      },
      {
        "function": "_process_upload",
        "calls": "info",
        "line": 79
      },
      {
        "function": "_process_upload",
        "calls": "zip",
        "line": 79
      },
      {
        "function": "_process_upload",
        "calls": "_validate_total_upload_size",
        "line": 79
      },
      {
        "function": "_process_upload",
        "calls": "_process_files",
        "line": 79
      },
      {
        "function": "_process_upload",
        "calls": "_add_upload_summary",
        "line": 79
      },
      {
        "function": "_process_upload",
        "calls": "load_all_loca_data",
        "line": 79
      },
      {
        "function": "_process_upload",
        "calls": "info",
        "line": 79
      },
      {
        "function": "_process_upload",
        "calls": "_create_markers",
        "line": 79
      },
      {
        "function": "_process_upload",
        "calls": "_update_app_state",
        "line": 79
      },
      {
        "function": "_process_upload",
        "calls": "_add_file_breakdown",
        "line": 79
      },
      {
        "function": "_process_upload",
        "calls": "timestamp",
        "line": 79
      },
      {
        "function": "_process_upload",
        "calls": "split",
        "line": 79
      },
      {
        "function": "_process_upload",
        "calls": "append",
        "line": 79
      },
      {
        "function": "_process_upload",
        "calls": "warning",
        "line": 79
      },
      {
        "function": "_process_upload",
        "calls": "_create_error_message",
        "line": 79
      },
      {
        "function": "_process_upload",
        "calls": "_create_error_message",
        "line": 79
      },
      {
        "function": "_process_upload",
        "calls": "_calculate_optimal_view",
        "line": 79
      },
      {
        "function": "_process_upload",
        "calls": "to_dict",
        "line": 79
      },
      {
        "function": "_process_upload",
        "calls": "tolist",
        "line": 79
      },
      {
        "function": "_process_upload",
        "calls": "now",
        "line": 79
      },
      {
        "function": "_process_upload",
        "calls": "len",
        "line": 79
      },
      {
        "function": "_process_upload",
        "calls": "len",
        "line": 79
      },
      {
        "function": "_validate_total_upload_size",
        "calls": "len",
        "line": 155
      },
      {
        "function": "_validate_total_upload_size",
        "calls": "len",
        "line": 155
      },
      {
        "function": "_validate_file_size",
        "calls": "len",
        "line": 180
      },
      {
        "function": "_process_files",
        "calls": "zip",
        "line": 197
      },
      {
        "function": "_process_files",
        "calls": "split",
        "line": 197
      },
      {
        "function": "_process_files",
        "calls": "_validate_file_size",
        "line": 197
      },
      {
        "function": "_process_files",
        "calls": "b64decode",
        "line": 197
      },
      {
        "function": "_process_files",
        "calls": "decode",
        "line": 197
      },
      {
        "function": "_process_files",
        "calls": "append",
        "line": 197
      },
      {
        "function": "_process_files",
        "calls": "append",
        "line": 197
      },
      {
        "function": "_process_files",
        "calls": "info",
        "line": 197
      },
      {
        "function": "_process_files",
        "calls": "warning",
        "line": 197
      },
      {
        "function": "_process_files",
        "calls": "append",
        "line": 197
      },
      {
        "function": "_process_files",
        "calls": "Div",
        "line": 197
      },
      {
        "function": "_process_files",
        "calls": "error",
        "line": 197
      },
      {
        "function": "_process_files",
        "calls": "append",
        "line": 197
      },
      {
        "function": "_process_files",
        "calls": "Div",
        "line": 197
      },
      {
        "function": "_process_files",
        "calls": "Div",
        "line": 197
      },
      {
        "function": "_process_files",
        "calls": "Span",
        "line": 197
      },
      {
        "function": "_process_files",
        "calls": "Span",
        "line": 197
      },
      {
        "function": "_process_files",
        "calls": "Span",
        "line": 197
      },
      {
        "function": "_process_files",
        "calls": "Span",
        "line": 197
      },
      {
        "function": "_process_files",
        "calls": "Span",
        "line": 197
      },
      {
        "function": "_process_files",
        "calls": "Span",
        "line": 197
      },
      {
        "function": "_create_markers",
        "calls": "get_coordinate_service",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "copy",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "copy",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "iterrows",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "concat",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "iterrows",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "info",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "apply",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "apply",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "transform_bng_to_wgs84",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "copy",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "get",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "get",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "strip",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "_format_depth_value",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "_format_depth_value",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "append",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "append",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "astype",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "astype",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "float",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "float",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "transform_bng_to_wgs84",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "isna",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "isna",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "get",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "get",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "Marker",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "warning",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "str",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "len",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "notnull",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "isdigit",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "notnull",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "isdigit",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "Tooltip",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "strip",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "replace",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "replace",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "replace",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "replace",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "str",
        "line": 264
      },
      {
        "function": "_create_markers",
        "calls": "str",
        "line": 264
      },
      {
        "function": "_calculate_optimal_view",
        "calls": "median",
        "line": 366
      },
      {
        "function": "_calculate_optimal_view",
        "calls": "median",
        "line": 366
      },
      {
        "function": "_calculate_optimal_view",
        "calls": "max",
        "line": 366
      },
      {
        "function": "_calculate_optimal_view",
        "calls": "info",
        "line": 366
      },
      {
        "function": "_calculate_optimal_view",
        "calls": "max",
        "line": 366
      },
      {
        "function": "_calculate_optimal_view",
        "calls": "min",
        "line": 366
      },
      {
        "function": "_calculate_optimal_view",
        "calls": "max",
        "line": 366
      },
      {
        "function": "_calculate_optimal_view",
        "calls": "min",
        "line": 366
      },
      {
        "function": "_update_app_state",
        "calls": "get_app_state_manager",
        "line": 399
      },
      {
        "function": "_update_app_state",
        "calls": "update_borehole_data",
        "line": 399
      },
      {
        "function": "_update_app_state",
        "calls": "update_upload_state",
        "line": 399
      },
      {
        "function": "_update_app_state",
        "calls": "debug",
        "line": 399
      },
      {
        "function": "_update_app_state",
        "calls": "tolist",
        "line": 399
      },
      {
        "function": "_update_app_state",
        "calls": "list",
        "line": 399
      },
      {
        "function": "_update_app_state",
        "calls": "keys",
        "line": 399
      },
      {
        "function": "_update_app_state",
        "calls": "sum",
        "line": 399
      },
      {
        "function": "_update_app_state",
        "calls": "len",
        "line": 399
      },
      {
        "function": "_update_app_state",
        "calls": "values",
        "line": 399
      },
      {
        "function": "_format_depth_value",
        "calls": "strip",
        "line": 421
      },
      {
        "function": "_format_depth_value",
        "calls": "float",
        "line": 421
      },
      {
        "function": "_format_depth_value",
        "calls": "str",
        "line": 421
      },
      {
        "function": "_add_upload_summary",
        "calls": "Div",
        "line": 432
      },
      {
        "function": "_add_upload_summary",
        "calls": "insert",
        "line": 432
      },
      {
        "function": "_add_upload_summary",
        "calls": "P",
        "line": 432
      },
      {
        "function": "_add_upload_summary",
        "calls": "P",
        "line": 432
      },
      {
        "function": "_add_upload_summary",
        "calls": "P",
        "line": 432
      },
      {
        "function": "_add_upload_summary",
        "calls": "len",
        "line": 432
      },
      {
        "function": "_add_upload_summary",
        "calls": "len",
        "line": 432
      },
      {
        "function": "_add_file_breakdown",
        "calls": "keys",
        "line": 460
      },
      {
        "function": "_add_file_breakdown",
        "calls": "append",
        "line": 460
      },
      {
        "function": "_add_file_breakdown",
        "calls": "len",
        "line": 460
      },
      {
        "function": "_add_file_breakdown",
        "calls": "append",
        "line": 460
      },
      {
        "function": "_add_file_breakdown",
        "calls": "Div",
        "line": 460
      },
      {
        "function": "_add_file_breakdown",
        "calls": "Li",
        "line": 460
      },
      {
        "function": "_add_file_breakdown",
        "calls": "H4",
        "line": 460
      },
      {
        "function": "_add_file_breakdown",
        "calls": "Ul",
        "line": 460
      },
      {
        "function": "_add_file_breakdown",
        "calls": "B",
        "line": 460
      },
      {
        "function": "_add_file_breakdown",
        "calls": "len",
        "line": 460
      },
      {
        "function": "_create_error_message",
        "calls": "get_error_handler",
        "line": 487
      },
      {
        "function": "_create_error_message",
        "calls": "create_error",
        "line": 487
      },
      {
        "function": "_create_error_message",
        "calls": "_create_error_component",
        "line": 487
      },
      {
        "function": "handle_file_upload",
        "calls": "callback",
        "line": 49
      },
      {
        "function": "handle_file_upload",
        "calls": "log_callback_start",
        "line": 49
      },
      {
        "function": "handle_file_upload",
        "calls": "_process_upload",
        "line": 49
      },
      {
        "function": "handle_file_upload",
        "calls": "log_callback_end",
        "line": 49
      },
      {
        "function": "handle_file_upload",
        "calls": "Output",
        "line": 49
      },
      {
        "function": "handle_file_upload",
        "calls": "Output",
        "line": 49
      },
      {
        "function": "handle_file_upload",
        "calls": "Output",
        "line": 49
      },
      {
        "function": "handle_file_upload",
        "calls": "Output",
        "line": 49
      },
      {
        "function": "handle_file_upload",
        "calls": "Output",
        "line": 49
      },
      {
        "function": "handle_file_upload",
        "calls": "Output",
        "line": 49
      },
      {
        "function": "handle_file_upload",
        "calls": "Input",
        "line": 49
      },
      {
        "function": "handle_file_upload",
        "calls": "State",
        "line": 49
      },
      {
        "function": "handle_file_upload",
        "calls": "State",
        "line": 49
      },
      {
        "function": "handle_file_upload",
        "calls": "info",
        "line": 49
      },
      {
        "function": "handle_file_upload",
        "calls": "error",
        "line": 49
      },
      {
        "function": "handle_file_upload",
        "calls": "handle_error",
        "line": 49
      },
      {
        "function": "handle_file_upload",
        "calls": "len",
        "line": 49
      },
      {
        "function": "handle_file_upload",
        "calls": "get",
        "line": 49
      }
    ],
    "callbacks\\map_interactions.py": [
      {
        "function": "register_map_interaction_callbacks",
        "calls": "add_callback",
        "line": 667
      },
      {
        "function": "register_map_interaction_callbacks",
        "calls": "info",
        "line": 667
      },
      {
        "function": "register_map_interaction_callbacks",
        "calls": "MapInteractionCallback",
        "line": 667
      },
      {
        "function": "__init__",
        "calls": "__init__",
        "line": 39
      },
      {
        "function": "__init__",
        "calls": "super",
        "line": 39
      },
      {
        "function": "register",
        "calls": "callback",
        "line": 42
      },
      {
        "function": "register",
        "calls": "log_callback_start",
        "line": 42
      },
      {
        "function": "register",
        "calls": "_is_drawing_trigger",
        "line": 42
      },
      {
        "function": "register",
        "calls": "log_callback_end",
        "line": 42
      },
      {
        "function": "register",
        "calls": "Output",
        "line": 42
      },
      {
        "function": "register",
        "calls": "Output",
        "line": 42
      },
      {
        "function": "register",
        "calls": "Output",
        "line": 42
      },
      {
        "function": "register",
        "calls": "Output",
        "line": 42
      },
      {
        "function": "register",
        "calls": "Output",
        "line": 42
      },
      {
        "function": "register",
        "calls": "Output",
        "line": 42
      },
      {
        "function": "register",
        "calls": "Output",
        "line": 42
      },
      {
        "function": "register",
        "calls": "Output",
        "line": 42
      },
      {
        "function": "register",
        "calls": "Input",
        "line": 42
      },
      {
        "function": "register",
        "calls": "Input",
        "line": 42
      },
      {
        "function": "register",
        "calls": "Input",
        "line": 42
      },
      {
        "function": "register",
        "calls": "State",
        "line": 42
      },
      {
        "function": "register",
        "calls": "State",
        "line": 42
      },
      {
        "function": "register",
        "calls": "State",
        "line": 42
      },
      {
        "function": "register",
        "calls": "warning",
        "line": 42
      },
      {
        "function": "register",
        "calls": "_empty_response",
        "line": 42
      },
      {
        "function": "register",
        "calls": "_handle_shape_drawing",
        "line": 42
      },
      {
        "function": "register",
        "calls": "_is_checkbox_trigger",
        "line": 42
      },
      {
        "function": "register",
        "calls": "error",
        "line": 42
      },
      {
        "function": "register",
        "calls": "handle_error",
        "line": 42
      },
      {
        "function": "register",
        "calls": "_get_trigger",
        "line": 42
      },
      {
        "function": "register",
        "calls": "bool",
        "line": 42
      },
      {
        "function": "register",
        "calls": "_handle_checkbox_selection",
        "line": 42
      },
      {
        "function": "register",
        "calls": "_is_buffer_trigger",
        "line": 42
      },
      {
        "function": "register",
        "calls": "len",
        "line": 42
      },
      {
        "function": "register",
        "calls": "_handle_buffer_update",
        "line": 42
      },
      {
        "function": "register",
        "calls": "_empty_response",
        "line": 42
      },
      {
        "function": "_is_drawing_trigger",
        "calls": "get",
        "line": 131
      },
      {
        "function": "_is_buffer_trigger",
        "calls": "get",
        "line": 143
      },
      {
        "function": "_handle_shape_drawing",
        "calls": "info",
        "line": 166
      },
      {
        "function": "_handle_shape_drawing",
        "calls": "DataFrame",
        "line": 166
      },
      {
        "function": "_handle_shape_drawing",
        "calls": "get",
        "line": 166
      },
      {
        "function": "_handle_shape_drawing",
        "calls": "get",
        "line": 166
      },
      {
        "function": "_handle_shape_drawing",
        "calls": "info",
        "line": 166
      },
      {
        "function": "_handle_shape_drawing",
        "calls": "Div",
        "line": 166
      },
      {
        "function": "_handle_shape_drawing",
        "calls": "_error_response",
        "line": 166
      },
      {
        "function": "_handle_shape_drawing",
        "calls": "_handle_polyline_selection",
        "line": 166
      },
      {
        "function": "_handle_shape_drawing",
        "calls": "_handle_polygon_selection",
        "line": 166
      },
      {
        "function": "_handle_shape_drawing",
        "calls": "get",
        "line": 166
      },
      {
        "function": "_handle_polyline_selection",
        "calls": "info",
        "line": 201
      },
      {
        "function": "_handle_polyline_selection",
        "calls": "project_boreholes_to_polyline",
        "line": 201
      },
      {
        "function": "_handle_polyline_selection",
        "calls": "create_polyline_section",
        "line": 201
      },
      {
        "function": "_handle_polyline_selection",
        "calls": "create_buffer_visualization",
        "line": 201
      },
      {
        "function": "_handle_polyline_selection",
        "calls": "isinstance",
        "line": 201
      },
      {
        "function": "_handle_polyline_selection",
        "calls": "dict",
        "line": 201
      },
      {
        "function": "_handle_polyline_selection",
        "calls": "update",
        "line": 201
      },
      {
        "function": "_handle_polyline_selection",
        "calls": "get_app_state_manager",
        "line": 201
      },
      {
        "function": "_handle_polyline_selection",
        "calls": "update_selection_state",
        "line": 201
      },
      {
        "function": "_handle_polyline_selection",
        "calls": "_success_response",
        "line": 201
      },
      {
        "function": "_handle_polyline_selection",
        "calls": "get",
        "line": 201
      },
      {
        "function": "_handle_polyline_selection",
        "calls": "tolist",
        "line": 201
      },
      {
        "function": "_handle_polyline_selection",
        "calls": "extend",
        "line": 201
      },
      {
        "function": "_handle_polyline_selection",
        "calls": "append",
        "line": 201
      },
      {
        "function": "_handle_polyline_selection",
        "calls": "append",
        "line": 201
      },
      {
        "function": "_handle_polyline_selection",
        "calls": "len",
        "line": 201
      },
      {
        "function": "_handle_polyline_selection",
        "calls": "len",
        "line": 201
      },
      {
        "function": "_handle_polygon_selection",
        "calls": "filter_selection_by_shape",
        "line": 272
      },
      {
        "function": "_handle_polygon_selection",
        "calls": "dict",
        "line": 272
      },
      {
        "function": "_handle_polygon_selection",
        "calls": "update",
        "line": 272
      },
      {
        "function": "_handle_polygon_selection",
        "calls": "get_app_state_manager",
        "line": 272
      },
      {
        "function": "_handle_polygon_selection",
        "calls": "update_selection_state",
        "line": 272
      },
      {
        "function": "_handle_polygon_selection",
        "calls": "_success_response",
        "line": 272
      },
      {
        "function": "_handle_polygon_selection",
        "calls": "isinstance",
        "line": 272
      },
      {
        "function": "_handle_polygon_selection",
        "calls": "tolist",
        "line": 272
      },
      {
        "function": "_handle_polygon_selection",
        "calls": "isinstance",
        "line": 272
      },
      {
        "function": "_handle_polygon_selection",
        "calls": "len",
        "line": 272
      },
      {
        "function": "_handle_polygon_selection",
        "calls": "_calculate_pca_line",
        "line": 272
      },
      {
        "function": "_handle_polygon_selection",
        "calls": "isin",
        "line": 272
      },
      {
        "function": "_handle_polygon_selection",
        "calls": "len",
        "line": 272
      },
      {
        "function": "_handle_checkbox_selection",
        "calls": "info",
        "line": 326
      },
      {
        "function": "_handle_checkbox_selection",
        "calls": "DataFrame",
        "line": 326
      },
      {
        "function": "_handle_checkbox_selection",
        "calls": "get",
        "line": 326
      },
      {
        "function": "_handle_checkbox_selection",
        "calls": "get",
        "line": 326
      },
      {
        "function": "_handle_checkbox_selection",
        "calls": "get_app_state_manager",
        "line": 326
      },
      {
        "function": "_handle_checkbox_selection",
        "calls": "update_selection_state",
        "line": 326
      },
      {
        "function": "_handle_checkbox_selection",
        "calls": "_success_response",
        "line": 326
      },
      {
        "function": "_handle_checkbox_selection",
        "calls": "isin",
        "line": 326
      },
      {
        "function": "_handle_checkbox_selection",
        "calls": "get",
        "line": 326
      },
      {
        "function": "_handle_checkbox_selection",
        "calls": "create_polyline_section",
        "line": 326
      },
      {
        "function": "_handle_checkbox_selection",
        "calls": "create_buffer_visualization",
        "line": 326
      },
      {
        "function": "_handle_checkbox_selection",
        "calls": "isinstance",
        "line": 326
      },
      {
        "function": "_handle_checkbox_selection",
        "calls": "_calculate_pca_line",
        "line": 326
      },
      {
        "function": "_handle_checkbox_selection",
        "calls": "extend",
        "line": 326
      },
      {
        "function": "_handle_checkbox_selection",
        "calls": "append",
        "line": 326
      },
      {
        "function": "_handle_checkbox_selection",
        "calls": "append",
        "line": 326
      },
      {
        "function": "_handle_checkbox_selection",
        "calls": "len",
        "line": 326
      },
      {
        "function": "_handle_buffer_update",
        "calls": "info",
        "line": 383
      },
      {
        "function": "_handle_buffer_update",
        "calls": "DataFrame",
        "line": 383
      },
      {
        "function": "_handle_buffer_update",
        "calls": "project_boreholes_to_polyline",
        "line": 383
      },
      {
        "function": "_handle_buffer_update",
        "calls": "create_polyline_section",
        "line": 383
      },
      {
        "function": "_handle_buffer_update",
        "calls": "create_buffer_visualization",
        "line": 383
      },
      {
        "function": "_handle_buffer_update",
        "calls": "isinstance",
        "line": 383
      },
      {
        "function": "_handle_buffer_update",
        "calls": "dict",
        "line": 383
      },
      {
        "function": "_handle_buffer_update",
        "calls": "update",
        "line": 383
      },
      {
        "function": "_handle_buffer_update",
        "calls": "_success_response",
        "line": 383
      },
      {
        "function": "_handle_buffer_update",
        "calls": "tolist",
        "line": 383
      },
      {
        "function": "_handle_buffer_update",
        "calls": "extend",
        "line": 383
      },
      {
        "function": "_handle_buffer_update",
        "calls": "append",
        "line": 383
      },
      {
        "function": "_handle_buffer_update",
        "calls": "append",
        "line": 383
      },
      {
        "function": "_handle_buffer_update",
        "calls": "len",
        "line": 383
      },
      {
        "function": "_calculate_pca_line",
        "calls": "len",
        "line": 431
      },
      {
        "function": "_calculate_pca_line",
        "calls": "info",
        "line": 431
      },
      {
        "function": "_calculate_pca_line",
        "calls": "info",
        "line": 431
      },
      {
        "function": "_calculate_pca_line",
        "calls": "PCA",
        "line": 431
      },
      {
        "function": "_calculate_pca_line",
        "calls": "fit_transform",
        "line": 431
      },
      {
        "function": "_calculate_pca_line",
        "calls": "mean",
        "line": 431
      },
      {
        "function": "_calculate_pca_line",
        "calls": "get_coordinate_service",
        "line": 431
      },
      {
        "function": "_calculate_pca_line",
        "calls": "transform_bng_to_wgs84",
        "line": 431
      },
      {
        "function": "_calculate_pca_line",
        "calls": "transform_bng_to_wgs84",
        "line": 431
      },
      {
        "function": "_calculate_pca_line",
        "calls": "max",
        "line": 431
      },
      {
        "function": "_calculate_pca_line",
        "calls": "min",
        "line": 431
      },
      {
        "function": "_calculate_pca_line",
        "calls": "Polyline",
        "line": 431
      },
      {
        "function": "_calculate_pca_line",
        "calls": "error",
        "line": 431
      },
      {
        "function": "_calculate_pca_line",
        "calls": "len",
        "line": 431
      },
      {
        "function": "_calculate_pca_line",
        "calls": "Tooltip",
        "line": 431
      },
      {
        "function": "_create_checkbox_grid",
        "calls": "Div",
        "line": 480
      },
      {
        "function": "_create_checkbox_grid",
        "calls": "P",
        "line": 480
      },
      {
        "function": "_create_checkbox_grid",
        "calls": "Checklist",
        "line": 480
      },
      {
        "function": "_update_marker_colors",
        "calls": "DataFrame",
        "line": 508
      },
      {
        "function": "_update_marker_colors",
        "calls": "get_lazy_marker_manager",
        "line": 508
      },
      {
        "function": "_update_marker_colors",
        "calls": "get_visible_markers",
        "line": 508
      },
      {
        "function": "_update_marker_colors",
        "calls": "info",
        "line": 508
      },
      {
        "function": "_update_marker_colors",
        "calls": "len",
        "line": 508
      },
      {
        "function": "_update_marker_colors",
        "calls": "error",
        "line": 508
      },
      {
        "function": "_update_marker_colors",
        "calls": "_update_marker_colors_fallback",
        "line": 508
      },
      {
        "function": "_update_marker_colors",
        "calls": "len",
        "line": 508
      },
      {
        "function": "_update_marker_colors",
        "calls": "len",
        "line": 508
      },
      {
        "function": "_update_marker_colors_fallback",
        "calls": "DataFrame",
        "line": 544
      },
      {
        "function": "_update_marker_colors_fallback",
        "calls": "iterrows",
        "line": 544
      },
      {
        "function": "_update_marker_colors_fallback",
        "calls": "get",
        "line": 544
      },
      {
        "function": "_update_marker_colors_fallback",
        "calls": "get",
        "line": 544
      },
      {
        "function": "_update_marker_colors_fallback",
        "calls": "strip",
        "line": 544
      },
      {
        "function": "_update_marker_colors_fallback",
        "calls": "_format_depth_value",
        "line": 544
      },
      {
        "function": "_update_marker_colors_fallback",
        "calls": "_format_depth_value",
        "line": 544
      },
      {
        "function": "_update_marker_colors_fallback",
        "calls": "append",
        "line": 544
      },
      {
        "function": "_update_marker_colors_fallback",
        "calls": "error",
        "line": 544
      },
      {
        "function": "_update_marker_colors_fallback",
        "calls": "isna",
        "line": 544
      },
      {
        "function": "_update_marker_colors_fallback",
        "calls": "isna",
        "line": 544
      },
      {
        "function": "_update_marker_colors_fallback",
        "calls": "get",
        "line": 544
      },
      {
        "function": "_update_marker_colors_fallback",
        "calls": "get",
        "line": 544
      },
      {
        "function": "_update_marker_colors_fallback",
        "calls": "Marker",
        "line": 544
      },
      {
        "function": "_update_marker_colors_fallback",
        "calls": "str",
        "line": 544
      },
      {
        "function": "_update_marker_colors_fallback",
        "calls": "Tooltip",
        "line": 544
      },
      {
        "function": "_update_marker_colors_fallback",
        "calls": "strip",
        "line": 544
      },
      {
        "function": "_format_depth_value",
        "calls": "strip",
        "line": 603
      },
      {
        "function": "_format_depth_value",
        "calls": "float",
        "line": 603
      },
      {
        "function": "_format_depth_value",
        "calls": "str",
        "line": 603
      },
      {
        "function": "_success_response",
        "calls": "_create_checkbox_grid",
        "line": 614
      },
      {
        "function": "_success_response",
        "calls": "_update_marker_colors",
        "line": 614
      },
      {
        "function": "_success_response",
        "calls": "Div",
        "line": 614
      },
      {
        "function": "_error_response",
        "calls": "_update_marker_colors",
        "line": 648
      },
      {
        "function": "handle_map_interactions",
        "calls": "callback",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "log_callback_start",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "_is_drawing_trigger",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "log_callback_end",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "Output",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "Output",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "Output",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "Output",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "Output",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "Output",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "Output",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "Output",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "Input",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "Input",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "Input",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "State",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "State",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "State",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "warning",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "_empty_response",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "_handle_shape_drawing",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "_is_checkbox_trigger",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "error",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "handle_error",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "_get_trigger",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "bool",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "_handle_checkbox_selection",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "_is_buffer_trigger",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "len",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "_handle_buffer_update",
        "line": 68
      },
      {
        "function": "handle_map_interactions",
        "calls": "_empty_response",
        "line": 68
      }
    ],
    "callbacks\\marker_handling.py": [
      {
        "function": "__init__",
        "calls": "__init__",
        "line": 30
      },
      {
        "function": "__init__",
        "calls": "getLogger",
        "line": 30
      },
      {
        "function": "__init__",
        "calls": "get_error_handler",
        "line": 30
      },
      {
        "function": "__init__",
        "calls": "get_app_state_manager",
        "line": 30
      },
      {
        "function": "__init__",
        "calls": "super",
        "line": 30
      },
      {
        "function": "register",
        "calls": "_register_marker_click_callback",
        "line": 40
      },
      {
        "function": "register",
        "calls": "info",
        "line": 40
      },
      {
        "function": "_register_marker_click_callback",
        "calls": "callback",
        "line": 45
      },
      {
        "function": "_register_marker_click_callback",
        "calls": "_handle_marker_click_logic",
        "line": 45
      },
      {
        "function": "_register_marker_click_callback",
        "calls": "Output",
        "line": 45
      },
      {
        "function": "_register_marker_click_callback",
        "calls": "Output",
        "line": 45
      },
      {
        "function": "_register_marker_click_callback",
        "calls": "Input",
        "line": 45
      },
      {
        "function": "_register_marker_click_callback",
        "calls": "State",
        "line": 45
      },
      {
        "function": "_register_marker_click_callback",
        "calls": "State",
        "line": 45
      },
      {
        "function": "_register_marker_click_callback",
        "calls": "State",
        "line": 45
      },
      {
        "function": "_register_marker_click_callback",
        "calls": "error",
        "line": 45
      },
      {
        "function": "_register_marker_click_callback",
        "calls": "handle_error",
        "line": 45
      },
      {
        "function": "_register_marker_click_callback",
        "calls": "Div",
        "line": 45
      },
      {
        "function": "_register_marker_click_callback",
        "calls": "str",
        "line": 45
      },
      {
        "function": "_handle_marker_click_logic",
        "calls": "info",
        "line": 85
      },
      {
        "function": "_handle_marker_click_logic",
        "calls": "info",
        "line": 85
      },
      {
        "function": "_handle_marker_click_logic",
        "calls": "info",
        "line": 85
      },
      {
        "function": "_handle_marker_click_logic",
        "calls": "_find_clicked_marker_index",
        "line": 85
      },
      {
        "function": "_handle_marker_click_logic",
        "calls": "info",
        "line": 85
      },
      {
        "function": "_handle_marker_click_logic",
        "calls": "DataFrame",
        "line": 85
      },
      {
        "function": "_handle_marker_click_logic",
        "calls": "info",
        "line": 85
      },
      {
        "function": "_handle_marker_click_logic",
        "calls": "_generate_borehole_log_display",
        "line": 85
      },
      {
        "function": "_handle_marker_click_logic",
        "calls": "_update_marker_colors",
        "line": 85
      },
      {
        "function": "_handle_marker_click_logic",
        "calls": "all",
        "line": 85
      },
      {
        "function": "_handle_marker_click_logic",
        "calls": "info",
        "line": 85
      },
      {
        "function": "_handle_marker_click_logic",
        "calls": "info",
        "line": 85
      },
      {
        "function": "_handle_marker_click_logic",
        "calls": "warning",
        "line": 85
      },
      {
        "function": "_handle_marker_click_logic",
        "calls": "len",
        "line": 85
      },
      {
        "function": "_handle_marker_click_logic",
        "calls": "warning",
        "line": 85
      },
      {
        "function": "_handle_marker_click_logic",
        "calls": "Div",
        "line": 85
      },
      {
        "function": "_handle_marker_click_logic",
        "calls": "Div",
        "line": 85
      },
      {
        "function": "_find_clicked_marker_index",
        "calls": "enumerate",
        "line": 134
      },
      {
        "function": "_generate_borehole_log_display",
        "calls": "items",
        "line": 146
      },
      {
        "function": "_generate_borehole_log_display",
        "calls": "info",
        "line": 146
      },
      {
        "function": "_generate_borehole_log_display",
        "calls": "plot_borehole_log_from_ags_content",
        "line": 146
      },
      {
        "function": "_generate_borehole_log_display",
        "calls": "_create_borehole_log_html",
        "line": 146
      },
      {
        "function": "_generate_borehole_log_display",
        "calls": "Div",
        "line": 146
      },
      {
        "function": "_generate_borehole_log_display",
        "calls": "error",
        "line": 146
      },
      {
        "function": "_generate_borehole_log_display",
        "calls": "Div",
        "line": 146
      },
      {
        "function": "_generate_borehole_log_display",
        "calls": "len",
        "line": 146
      },
      {
        "function": "_generate_borehole_log_display",
        "calls": "str",
        "line": 146
      },
      {
        "function": "_create_borehole_log_html",
        "calls": "enumerate",
        "line": 187
      },
      {
        "function": "_create_borehole_log_html",
        "calls": "Div",
        "line": 187
      },
      {
        "function": "_create_borehole_log_html",
        "calls": "append",
        "line": 187
      },
      {
        "function": "_create_borehole_log_html",
        "calls": "append",
        "line": 187
      },
      {
        "function": "_create_borehole_log_html",
        "calls": "Img",
        "line": 187
      },
      {
        "function": "_create_borehole_log_html",
        "calls": "H3",
        "line": 187
      },
      {
        "function": "_create_borehole_log_html",
        "calls": "P",
        "line": 187
      },
      {
        "function": "_create_borehole_log_html",
        "calls": "Div",
        "line": 187
      },
      {
        "function": "_create_borehole_log_html",
        "calls": "len",
        "line": 187
      },
      {
        "function": "_create_borehole_log_html",
        "calls": "H4",
        "line": 187
      },
      {
        "function": "_create_borehole_log_html",
        "calls": "len",
        "line": 187
      },
      {
        "function": "_create_borehole_log_html",
        "calls": "len",
        "line": 187
      },
      {
        "function": "_update_marker_colors",
        "calls": "enumerate",
        "line": 244
      },
      {
        "function": "_update_marker_colors",
        "calls": "get",
        "line": 244
      },
      {
        "function": "_update_marker_colors",
        "calls": "copy",
        "line": 244
      },
      {
        "function": "_update_marker_colors",
        "calls": "copy",
        "line": 244
      },
      {
        "function": "_update_marker_colors",
        "calls": "append",
        "line": 244
      },
      {
        "function": "_update_marker_colors",
        "calls": "append",
        "line": 244
      },
      {
        "function": "_update_marker_colors",
        "calls": "copy",
        "line": 244
      },
      {
        "function": "_update_marker_colors",
        "calls": "copy",
        "line": 244
      },
      {
        "function": "create_selection_shape_visual",
        "calls": "get",
        "line": 276
      },
      {
        "function": "create_selection_shape_visual",
        "calls": "get",
        "line": 276
      },
      {
        "function": "create_selection_shape_visual",
        "calls": "error",
        "line": 276
      },
      {
        "function": "create_selection_shape_visual",
        "calls": "len",
        "line": 276
      },
      {
        "function": "create_selection_shape_visual",
        "calls": "Polygon",
        "line": 276
      },
      {
        "function": "create_selection_shape_visual",
        "calls": "len",
        "line": 276
      },
      {
        "function": "create_selection_shape_visual",
        "calls": "Polygon",
        "line": 276
      },
      {
        "function": "create_selection_shape_visual",
        "calls": "Tooltip",
        "line": 276
      },
      {
        "function": "create_selection_shape_visual",
        "calls": "Tooltip",
        "line": 276
      },
      {
        "function": "marker_click_handler",
        "calls": "callback",
        "line": 66
      },
      {
        "function": "marker_click_handler",
        "calls": "_handle_marker_click_logic",
        "line": 66
      },
      {
        "function": "marker_click_handler",
        "calls": "Output",
        "line": 66
      },
      {
        "function": "marker_click_handler",
        "calls": "Output",
        "line": 66
      },
      {
        "function": "marker_click_handler",
        "calls": "Input",
        "line": 66
      },
      {
        "function": "marker_click_handler",
        "calls": "State",
        "line": 66
      },
      {
        "function": "marker_click_handler",
        "calls": "State",
        "line": 66
      },
      {
        "function": "marker_click_handler",
        "calls": "State",
        "line": 66
      },
      {
        "function": "marker_click_handler",
        "calls": "error",
        "line": 66
      },
      {
        "function": "marker_click_handler",
        "calls": "handle_error",
        "line": 66
      },
      {
        "function": "marker_click_handler",
        "calls": "Div",
        "line": 66
      },
      {
        "function": "marker_click_handler",
        "calls": "str",
        "line": 66
      }
    ],
    "callbacks\\plot_generation.py": [
      {
        "function": "__init__",
        "calls": "__init__",
        "line": 35
      },
      {
        "function": "__init__",
        "calls": "getLogger",
        "line": 35
      },
      {
        "function": "__init__",
        "calls": "get_error_handler",
        "line": 35
      },
      {
        "function": "__init__",
        "calls": "get_app_state_manager",
        "line": 35
      },
      {
        "function": "__init__",
        "calls": "get_coordinate_service",
        "line": 35
      },
      {
        "function": "__init__",
        "calls": "super",
        "line": 35
      },
      {
        "function": "register",
        "calls": "_register_plot_generation_callback",
        "line": 42
      },
      {
        "function": "register",
        "calls": "_register_shape_clearing_callback",
        "line": 42
      },
      {
        "function": "register",
        "calls": "_register_map_update_clientside_callback",
        "line": 42
      },
      {
        "function": "register",
        "calls": "info",
        "line": 42
      },
      {
        "function": "_register_plot_generation_callback",
        "calls": "callback",
        "line": 49
      },
      {
        "function": "_register_plot_generation_callback",
        "calls": "info",
        "line": 49
      },
      {
        "function": "_register_plot_generation_callback",
        "calls": "info",
        "line": 49
      },
      {
        "function": "_register_plot_generation_callback",
        "calls": "_handle_plot_generation_logic",
        "line": 49
      },
      {
        "function": "_register_plot_generation_callback",
        "calls": "Output",
        "line": 49
      },
      {
        "function": "_register_plot_generation_callback",
        "calls": "Output",
        "line": 49
      },
      {
        "function": "_register_plot_generation_callback",
        "calls": "Output",
        "line": 49
      },
      {
        "function": "_register_plot_generation_callback",
        "calls": "Input",
        "line": 49
      },
      {
        "function": "_register_plot_generation_callback",
        "calls": "Input",
        "line": 49
      },
      {
        "function": "_register_plot_generation_callback",
        "calls": "Input",
        "line": 49
      },
      {
        "function": "_register_plot_generation_callback",
        "calls": "State",
        "line": 49
      },
      {
        "function": "_register_plot_generation_callback",
        "calls": "error",
        "line": 49
      },
      {
        "function": "_register_plot_generation_callback",
        "calls": "handle_error",
        "line": 49
      },
      {
        "function": "_register_plot_generation_callback",
        "calls": "str",
        "line": 49
      },
      {
        "function": "_handle_plot_generation_logic",
        "calls": "items",
        "line": 90
      },
      {
        "function": "_handle_plot_generation_logic",
        "calls": "_process_polyline_data",
        "line": 90
      },
      {
        "function": "_handle_plot_generation_logic",
        "calls": "plot_section_from_ags_content",
        "line": 90
      },
      {
        "function": "_handle_plot_generation_logic",
        "calls": "_process_plot_figure",
        "line": 90
      },
      {
        "function": "_handle_plot_generation_logic",
        "calls": "error",
        "line": 90
      },
      {
        "function": "_handle_plot_generation_logic",
        "calls": "handle_error",
        "line": 90
      },
      {
        "function": "_process_polyline_data",
        "calls": "LineString",
        "line": 131
      },
      {
        "function": "_process_polyline_data",
        "calls": "zip",
        "line": 131
      },
      {
        "function": "_process_polyline_data",
        "calls": "transform_wgs84_to_utm",
        "line": 131
      },
      {
        "function": "_process_polyline_data",
        "calls": "list",
        "line": 131
      },
      {
        "function": "_process_polyline_data",
        "calls": "info",
        "line": 131
      },
      {
        "function": "_process_polyline_data",
        "calls": "info",
        "line": 131
      },
      {
        "function": "_process_polyline_data",
        "calls": "info",
        "line": 131
      },
      {
        "function": "_process_polyline_data",
        "calls": "zip",
        "line": 131
      },
      {
        "function": "_process_polyline_data",
        "calls": "error",
        "line": 131
      },
      {
        "function": "_process_polyline_data",
        "calls": "info",
        "line": 131
      },
      {
        "function": "_process_polyline_data",
        "calls": "len",
        "line": 131
      },
      {
        "function": "_process_polyline_data",
        "calls": "len",
        "line": 131
      },
      {
        "function": "_process_plot_figure",
        "calls": "BytesIO",
        "line": 177
      },
      {
        "function": "_process_plot_figure",
        "calls": "savefig",
        "line": 177
      },
      {
        "function": "_process_plot_figure",
        "calls": "seek",
        "line": 177
      },
      {
        "function": "_process_plot_figure",
        "calls": "read",
        "line": 177
      },
      {
        "function": "_process_plot_figure",
        "calls": "decode",
        "line": 177
      },
      {
        "function": "_process_plot_figure",
        "calls": "Img",
        "line": 177
      },
      {
        "function": "_process_plot_figure",
        "calls": "close",
        "line": 177
      },
      {
        "function": "_process_plot_figure",
        "calls": "send_bytes",
        "line": 177
      },
      {
        "function": "_process_plot_figure",
        "calls": "b64encode",
        "line": 177
      },
      {
        "function": "_register_shape_clearing_callback",
        "calls": "callback",
        "line": 216
      },
      {
        "function": "_register_shape_clearing_callback",
        "calls": "Output",
        "line": 216
      },
      {
        "function": "_register_shape_clearing_callback",
        "calls": "Input",
        "line": 216
      },
      {
        "function": "_register_shape_clearing_callback",
        "calls": "get",
        "line": 216
      },
      {
        "function": "_register_shape_clearing_callback",
        "calls": "info",
        "line": 216
      },
      {
        "function": "_register_shape_clearing_callback",
        "calls": "timestamp",
        "line": 216
      },
      {
        "function": "_register_shape_clearing_callback",
        "calls": "len",
        "line": 216
      },
      {
        "function": "_register_shape_clearing_callback",
        "calls": "get",
        "line": 216
      },
      {
        "function": "_register_shape_clearing_callback",
        "calls": "now",
        "line": 216
      },
      {
        "function": "_register_shape_clearing_callback",
        "calls": "len",
        "line": 216
      },
      {
        "function": "_register_shape_clearing_callback",
        "calls": "get",
        "line": 216
      },
      {
        "function": "_register_map_update_clientside_callback",
        "calls": "clientside_callback",
        "line": 234
      },
      {
        "function": "_register_map_update_clientside_callback",
        "calls": "Output",
        "line": 234
      },
      {
        "function": "_register_map_update_clientside_callback",
        "calls": "Input",
        "line": 234
      },
      {
        "function": "handle_plot_generation",
        "calls": "callback",
        "line": 68
      },
      {
        "function": "handle_plot_generation",
        "calls": "info",
        "line": 68
      },
      {
        "function": "handle_plot_generation",
        "calls": "info",
        "line": 68
      },
      {
        "function": "handle_plot_generation",
        "calls": "_handle_plot_generation_logic",
        "line": 68
      },
      {
        "function": "handle_plot_generation",
        "calls": "Output",
        "line": 68
      },
      {
        "function": "handle_plot_generation",
        "calls": "Output",
        "line": 68
      },
      {
        "function": "handle_plot_generation",
        "calls": "Output",
        "line": 68
      },
      {
        "function": "handle_plot_generation",
        "calls": "Input",
        "line": 68
      },
      {
        "function": "handle_plot_generation",
        "calls": "Input",
        "line": 68
      },
      {
        "function": "handle_plot_generation",
        "calls": "Input",
        "line": 68
      },
      {
        "function": "handle_plot_generation",
        "calls": "State",
        "line": 68
      },
      {
        "function": "handle_plot_generation",
        "calls": "error",
        "line": 68
      },
      {
        "function": "handle_plot_generation",
        "calls": "handle_error",
        "line": 68
      },
      {
        "function": "handle_plot_generation",
        "calls": "str",
        "line": 68
      },
      {
        "function": "clear_all_shapes",
        "calls": "callback",
        "line": 224
      },
      {
        "function": "clear_all_shapes",
        "calls": "Output",
        "line": 224
      },
      {
        "function": "clear_all_shapes",
        "calls": "Input",
        "line": 224
      },
      {
        "function": "clear_all_shapes",
        "calls": "get",
        "line": 224
      },
      {
        "function": "clear_all_shapes",
        "calls": "info",
        "line": 224
      },
      {
        "function": "clear_all_shapes",
        "calls": "timestamp",
        "line": 224
      },
      {
        "function": "clear_all_shapes",
        "calls": "len",
        "line": 224
      },
      {
        "function": "clear_all_shapes",
        "calls": "get",
        "line": 224
      },
      {
        "function": "clear_all_shapes",
        "calls": "now",
        "line": 224
      },
      {
        "function": "clear_all_shapes",
        "calls": "len",
        "line": 224
      },
      {
        "function": "clear_all_shapes",
        "calls": "get",
        "line": 224
      }
    ],
    "callbacks\\search_functionality.py": [
      {
        "function": "__init__",
        "calls": "__init__",
        "line": 29
      },
      {
        "function": "__init__",
        "calls": "getLogger",
        "line": 29
      },
      {
        "function": "__init__",
        "calls": "get_error_handler",
        "line": 29
      },
      {
        "function": "__init__",
        "calls": "get_app_state_manager",
        "line": 29
      },
      {
        "function": "__init__",
        "calls": "get_coordinate_service",
        "line": 29
      },
      {
        "function": "__init__",
        "calls": "super",
        "line": 29
      },
      {
        "function": "register",
        "calls": "_register_search_dropdown_callback",
        "line": 36
      },
      {
        "function": "register",
        "calls": "_register_search_button_toggle_callback",
        "line": 36
      },
      {
        "function": "register",
        "calls": "_register_search_go_callback",
        "line": 36
      },
      {
        "function": "register",
        "calls": "info",
        "line": 36
      },
      {
        "function": "_register_search_dropdown_callback",
        "calls": "callback",
        "line": 43
      },
      {
        "function": "_register_search_dropdown_callback",
        "calls": "info",
        "line": 43
      },
      {
        "function": "_register_search_dropdown_callback",
        "calls": "Output",
        "line": 43
      },
      {
        "function": "_register_search_dropdown_callback",
        "calls": "Output",
        "line": 43
      },
      {
        "function": "_register_search_dropdown_callback",
        "calls": "Input",
        "line": 43
      },
      {
        "function": "_register_search_dropdown_callback",
        "calls": "_update_search_dropdown_logic",
        "line": 43
      },
      {
        "function": "_register_search_dropdown_callback",
        "calls": "error",
        "line": 43
      },
      {
        "function": "_register_search_dropdown_callback",
        "calls": "handle_error",
        "line": 43
      },
      {
        "function": "_register_search_dropdown_callback",
        "calls": "str",
        "line": 43
      },
      {
        "function": "_update_search_dropdown_logic",
        "calls": "DataFrame",
        "line": 66
      },
      {
        "function": "_update_search_dropdown_logic",
        "calls": "iterrows",
        "line": 66
      },
      {
        "function": "_update_search_dropdown_logic",
        "calls": "sort",
        "line": 66
      },
      {
        "function": "_update_search_dropdown_logic",
        "calls": "info",
        "line": 66
      },
      {
        "function": "_update_search_dropdown_logic",
        "calls": "info",
        "line": 66
      },
      {
        "function": "_update_search_dropdown_logic",
        "calls": "info",
        "line": 66
      },
      {
        "function": "_update_search_dropdown_logic",
        "calls": "strip",
        "line": 66
      },
      {
        "function": "_update_search_dropdown_logic",
        "calls": "get",
        "line": 66
      },
      {
        "function": "_update_search_dropdown_logic",
        "calls": "get",
        "line": 66
      },
      {
        "function": "_update_search_dropdown_logic",
        "calls": "append",
        "line": 66
      },
      {
        "function": "_update_search_dropdown_logic",
        "calls": "strip",
        "line": 66
      },
      {
        "function": "_update_search_dropdown_logic",
        "calls": "strip",
        "line": 66
      },
      {
        "function": "_update_search_dropdown_logic",
        "calls": "str",
        "line": 66
      },
      {
        "function": "_update_search_dropdown_logic",
        "calls": "float",
        "line": 66
      },
      {
        "function": "_update_search_dropdown_logic",
        "calls": "append",
        "line": 66
      },
      {
        "function": "_update_search_dropdown_logic",
        "calls": "float",
        "line": 66
      },
      {
        "function": "_update_search_dropdown_logic",
        "calls": "append",
        "line": 66
      },
      {
        "function": "_update_search_dropdown_logic",
        "calls": "lower",
        "line": 66
      },
      {
        "function": "_update_search_dropdown_logic",
        "calls": "len",
        "line": 66
      },
      {
        "function": "_update_search_dropdown_logic",
        "calls": "str",
        "line": 66
      },
      {
        "function": "_update_search_dropdown_logic",
        "calls": "str",
        "line": 66
      },
      {
        "function": "_update_search_dropdown_logic",
        "calls": "join",
        "line": 66
      },
      {
        "function": "_register_search_button_toggle_callback",
        "calls": "callback",
        "line": 125
      },
      {
        "function": "_register_search_button_toggle_callback",
        "calls": "Output",
        "line": 125
      },
      {
        "function": "_register_search_button_toggle_callback",
        "calls": "Output",
        "line": 125
      },
      {
        "function": "_register_search_button_toggle_callback",
        "calls": "Input",
        "line": 125
      },
      {
        "function": "_register_search_go_callback",
        "calls": "callback",
        "line": 140
      },
      {
        "function": "_register_search_go_callback",
        "calls": "info",
        "line": 140
      },
      {
        "function": "_register_search_go_callback",
        "calls": "Input",
        "line": 140
      },
      {
        "function": "_register_search_go_callback",
        "calls": "_handle_search_go_logic",
        "line": 140
      },
      {
        "function": "_register_search_go_callback",
        "calls": "Output",
        "line": 140
      },
      {
        "function": "_register_search_go_callback",
        "calls": "Output",
        "line": 140
      },
      {
        "function": "_register_search_go_callback",
        "calls": "Output",
        "line": 140
      },
      {
        "function": "_register_search_go_callback",
        "calls": "Output",
        "line": 140
      },
      {
        "function": "_register_search_go_callback",
        "calls": "Output",
        "line": 140
      },
      {
        "function": "_register_search_go_callback",
        "calls": "Output",
        "line": 140
      },
      {
        "function": "_register_search_go_callback",
        "calls": "State",
        "line": 140
      },
      {
        "function": "_register_search_go_callback",
        "calls": "State",
        "line": 140
      },
      {
        "function": "_register_search_go_callback",
        "calls": "State",
        "line": 140
      },
      {
        "function": "_register_search_go_callback",
        "calls": "State",
        "line": 140
      },
      {
        "function": "_register_search_go_callback",
        "calls": "error",
        "line": 140
      },
      {
        "function": "_register_search_go_callback",
        "calls": "handle_error",
        "line": 140
      },
      {
        "function": "_register_search_go_callback",
        "calls": "Div",
        "line": 140
      },
      {
        "function": "_register_search_go_callback",
        "calls": "str",
        "line": 140
      },
      {
        "function": "_handle_search_go_logic",
        "calls": "DataFrame",
        "line": 200
      },
      {
        "function": "_handle_search_go_logic",
        "calls": "strip",
        "line": 200
      },
      {
        "function": "_handle_search_go_logic",
        "calls": "info",
        "line": 200
      },
      {
        "function": "_handle_search_go_logic",
        "calls": "get",
        "line": 200
      },
      {
        "function": "_handle_search_go_logic",
        "calls": "get",
        "line": 200
      },
      {
        "function": "_handle_search_go_logic",
        "calls": "Div",
        "line": 200
      },
      {
        "function": "_handle_search_go_logic",
        "calls": "Div",
        "line": 200
      },
      {
        "function": "_handle_search_go_logic",
        "calls": "len",
        "line": 200
      },
      {
        "function": "_handle_search_go_logic",
        "calls": "Div",
        "line": 200
      },
      {
        "function": "_handle_search_go_logic",
        "calls": "isna",
        "line": 200
      },
      {
        "function": "_handle_search_go_logic",
        "calls": "isna",
        "line": 200
      },
      {
        "function": "_handle_search_go_logic",
        "calls": "Div",
        "line": 200
      },
      {
        "function": "_handle_search_go_logic",
        "calls": "transform_bng_to_wgs84",
        "line": 200
      },
      {
        "function": "_handle_search_go_logic",
        "calls": "info",
        "line": 200
      },
      {
        "function": "_handle_search_go_logic",
        "calls": "_generate_borehole_log",
        "line": 200
      },
      {
        "function": "_handle_search_go_logic",
        "calls": "Div",
        "line": 200
      },
      {
        "function": "_handle_search_go_logic",
        "calls": "info",
        "line": 200
      },
      {
        "function": "_handle_search_go_logic",
        "calls": "str",
        "line": 200
      },
      {
        "function": "_handle_search_go_logic",
        "calls": "error",
        "line": 200
      },
      {
        "function": "_handle_search_go_logic",
        "calls": "Div",
        "line": 200
      },
      {
        "function": "_handle_search_go_logic",
        "calls": "str",
        "line": 200
      },
      {
        "function": "_generate_borehole_log",
        "calls": "items",
        "line": 285
      },
      {
        "function": "_generate_borehole_log",
        "calls": "plot_borehole_log_from_ags_content",
        "line": 285
      },
      {
        "function": "_generate_borehole_log",
        "calls": "Img",
        "line": 285
      },
      {
        "function": "_generate_borehole_log",
        "calls": "Div",
        "line": 285
      },
      {
        "function": "_generate_borehole_log",
        "calls": "error",
        "line": 285
      },
      {
        "function": "_generate_borehole_log",
        "calls": "Div",
        "line": 285
      },
      {
        "function": "_generate_borehole_log",
        "calls": "len",
        "line": 285
      },
      {
        "function": "_generate_borehole_log",
        "calls": "str",
        "line": 285
      },
      {
        "function": "update_search_dropdown",
        "calls": "callback",
        "line": 52
      },
      {
        "function": "update_search_dropdown",
        "calls": "info",
        "line": 52
      },
      {
        "function": "update_search_dropdown",
        "calls": "Output",
        "line": 52
      },
      {
        "function": "update_search_dropdown",
        "calls": "Output",
        "line": 52
      },
      {
        "function": "update_search_dropdown",
        "calls": "Input",
        "line": 52
      },
      {
        "function": "update_search_dropdown",
        "calls": "_update_search_dropdown_logic",
        "line": 52
      },
      {
        "function": "update_search_dropdown",
        "calls": "error",
        "line": 52
      },
      {
        "function": "update_search_dropdown",
        "calls": "handle_error",
        "line": 52
      },
      {
        "function": "update_search_dropdown",
        "calls": "str",
        "line": 52
      },
      {
        "function": "toggle_search_button",
        "calls": "callback",
        "line": 133
      },
      {
        "function": "toggle_search_button",
        "calls": "Output",
        "line": 133
      },
      {
        "function": "toggle_search_button",
        "calls": "Output",
        "line": 133
      },
      {
        "function": "toggle_search_button",
        "calls": "Input",
        "line": 133
      },
      {
        "function": "handle_search_go",
        "calls": "callback",
        "line": 161
      },
      {
        "function": "handle_search_go",
        "calls": "info",
        "line": 161
      },
      {
        "function": "handle_search_go",
        "calls": "Input",
        "line": 161
      },
      {
        "function": "handle_search_go",
        "calls": "_handle_search_go_logic",
        "line": 161
      },
      {
        "function": "handle_search_go",
        "calls": "Output",
        "line": 161
      },
      {
        "function": "handle_search_go",
        "calls": "Output",
        "line": 161
      },
      {
        "function": "handle_search_go",
        "calls": "Output",
        "line": 161
      },
      {
        "function": "handle_search_go",
        "calls": "Output",
        "line": 161
      },
      {
        "function": "handle_search_go",
        "calls": "Output",
        "line": 161
      },
      {
        "function": "handle_search_go",
        "calls": "Output",
        "line": 161
      },
      {
        "function": "handle_search_go",
        "calls": "State",
        "line": 161
      },
      {
        "function": "handle_search_go",
        "calls": "State",
        "line": 161
      },
      {
        "function": "handle_search_go",
        "calls": "State",
        "line": 161
      },
      {
        "function": "handle_search_go",
        "calls": "State",
        "line": 161
      },
      {
        "function": "handle_search_go",
        "calls": "error",
        "line": 161
      },
      {
        "function": "handle_search_go",
        "calls": "handle_error",
        "line": 161
      },
      {
        "function": "handle_search_go",
        "calls": "Div",
        "line": 161
      },
      {
        "function": "handle_search_go",
        "calls": "str",
        "line": 161
      }
    ],
    "callbacks\\__init__.py": [
      {
        "function": "get_callback_manager",
        "calls": "CallbackManager",
        "line": 78
      },
      {
        "function": "get_callback_manager",
        "calls": "info",
        "line": 78
      },
      {
        "function": "register_all_callbacks",
        "calls": "get_callback_manager",
        "line": 87
      },
      {
        "function": "register_all_callbacks",
        "calls": "register_all",
        "line": 87
      },
      {
        "function": "register_all_callbacks",
        "calls": "get_callback_summary",
        "line": 87
      },
      {
        "function": "register_all_callbacks",
        "calls": "info",
        "line": 87
      },
      {
        "function": "register_all_callbacks",
        "calls": "FileUploadCallback",
        "line": 87
      },
      {
        "function": "register_all_callbacks",
        "calls": "MapInteractionCallback",
        "line": 87
      },
      {
        "function": "register_all_callbacks",
        "calls": "PlotGenerationCallback",
        "line": 87
      },
      {
        "function": "register_all_callbacks",
        "calls": "SearchFunctionalityCallback",
        "line": 87
      },
      {
        "function": "register_all_callbacks",
        "calls": "MarkerHandlingCallback",
        "line": 87
      },
      {
        "function": "register_all_callbacks",
        "calls": "add_callback",
        "line": 87
      },
      {
        "function": "register_all_callbacks",
        "calls": "len",
        "line": 87
      },
      {
        "function": "__init__",
        "calls": "getLogger",
        "line": 40
      },
      {
        "function": "add_callback",
        "calls": "append",
        "line": 44
      },
      {
        "function": "add_callback",
        "calls": "debug",
        "line": 44
      },
      {
        "function": "register_all",
        "calls": "register",
        "line": 49
      },
      {
        "function": "register_all",
        "calls": "info",
        "line": 49
      },
      {
        "function": "register_all",
        "calls": "error",
        "line": 49
      },
      {
        "function": "get_callback_summary",
        "calls": "append",
        "line": 59
      },
      {
        "function": "get_callback_summary",
        "calls": "len",
        "line": 59
      }
    ],
    "old_streamlit_files\\app.py": [
      {
        "function": "setup_bh_circle_event_bridge",
        "calls": "html",
        "line": 5
      },
      {
        "function": "setup_bh_circle_event_bridge",
        "calls": "text_input",
        "line": 5
      },
      {
        "function": "setup_bh_circle_event_bridge",
        "calls": "loads",
        "line": 5
      },
      {
        "function": "setup_bh_circle_event_bridge",
        "calls": "filter_selection_by_shape",
        "line": 5
      },
      {
        "function": "setup_bh_circle_event_bridge",
        "calls": "len",
        "line": 5
      },
      {
        "function": "setup_bh_circle_event_bridge",
        "calls": "sqrt",
        "line": 5
      },
      {
        "function": "setup_bh_circle_event_bridge",
        "calls": "idxmin",
        "line": 5
      },
      {
        "function": "load_all_loca_data_cached",
        "calls": "cache_data",
        "line": 99
      },
      {
        "function": "load_all_loca_data_cached",
        "calls": "load_all_loca_data",
        "line": 99
      },
      {
        "function": "transform_loca_df",
        "calls": "cache_data",
        "line": 104
      },
      {
        "function": "transform_loca_df",
        "calls": "from_crs",
        "line": 104
      },
      {
        "function": "transform_loca_df",
        "calls": "copy",
        "line": 104
      },
      {
        "function": "transform_loca_df",
        "calls": "apply",
        "line": 104
      },
      {
        "function": "transform_loca_df",
        "calls": "Series",
        "line": 104
      },
      {
        "function": "transform_loca_df",
        "calls": "transform",
        "line": 104
      },
      {
        "function": "get_selection_hash",
        "calls": "hash",
        "line": 144
      },
      {
        "function": "get_selection_hash",
        "calls": "tuple",
        "line": 144
      },
      {
        "function": "get_selection_hash",
        "calls": "tolist",
        "line": 144
      }
    ],
    "old_streamlit_files\\borehole_log.py": [
      {
        "function": "render_borehole_log",
        "calls": "join",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "parse_ags_geol_section",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "subheader",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "get",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "copy",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "subplots",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "subplots_adjust",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "unique",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "reset_index",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "set",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "iterrows",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "plot",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "set_xlim",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "max",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "min",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "set_ylim",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "set_xlabel",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "set_ylabel",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "set_xticks",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "get_legend_handles_labels",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "tight_layout",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "columns",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "items",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "warning",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "gettempdir",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "open",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "write",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "warning",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "toast",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "float",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "abs",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "abs",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "tab20",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "get",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "max",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "min",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "legend",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "pyplot",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "enumerate",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "locals",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "sort_values",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "abs",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "abs",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "fill_betweenx",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "add",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "fill_betweenx",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "add",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "abs",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "abs",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "text",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "apply",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "apply",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "str",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "str",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "get",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "abs",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "abs",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "text",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "get",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "str",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "abs",
        "line": 7
      },
      {
        "function": "render_borehole_log",
        "calls": "abs",
        "line": 7
      }
    ],
    "old_streamlit_files\\borehole_selection.py": [
      {
        "function": "render_checkbox_grid",
        "calls": "tolist",
        "line": 4
      },
      {
        "function": "render_checkbox_grid",
        "calls": "range",
        "line": 4
      },
      {
        "function": "render_checkbox_grid",
        "calls": "columns",
        "line": 4
      },
      {
        "function": "render_checkbox_grid",
        "calls": "range",
        "line": 4
      },
      {
        "function": "render_checkbox_grid",
        "calls": "len",
        "line": 4
      },
      {
        "function": "render_checkbox_grid",
        "calls": "len",
        "line": 4
      },
      {
        "function": "render_checkbox_grid",
        "calls": "checkbox",
        "line": 4
      },
      {
        "function": "render_checkbox_grid",
        "calls": "append",
        "line": 4
      }
    ],
    "old_streamlit_files\\data_loader.py": [
      {
        "function": "parse_group",
        "calls": "splitlines",
        "line": 7
      },
      {
        "function": "parse_group",
        "calls": "list",
        "line": 7
      },
      {
        "function": "parse_group",
        "calls": "DataFrame",
        "line": 7
      },
      {
        "function": "parse_group",
        "calls": "reader",
        "line": 7
      },
      {
        "function": "parse_group",
        "calls": "append",
        "line": 7
      },
      {
        "function": "parse_group",
        "calls": "len",
        "line": 7
      },
      {
        "function": "parse_group",
        "calls": "len",
        "line": 7
      },
      {
        "function": "parse_group",
        "calls": "len",
        "line": 7
      },
      {
        "function": "load_all_loca_data",
        "calls": "set",
        "line": 34
      },
      {
        "function": "load_all_loca_data",
        "calls": "parse_group",
        "line": 34
      },
      {
        "function": "load_all_loca_data",
        "calls": "dropna",
        "line": 34
      },
      {
        "function": "load_all_loca_data",
        "calls": "apply",
        "line": 34
      },
      {
        "function": "load_all_loca_data",
        "calls": "update",
        "line": 34
      },
      {
        "function": "load_all_loca_data",
        "calls": "append",
        "line": 34
      },
      {
        "function": "load_all_loca_data",
        "calls": "concat",
        "line": 34
      },
      {
        "function": "load_all_loca_data",
        "calls": "tolist",
        "line": 34
      },
      {
        "function": "load_all_loca_data",
        "calls": "to_numeric",
        "line": 34
      },
      {
        "function": "load_all_loca_data",
        "calls": "splitext",
        "line": 34
      }
    ],
    "old_streamlit_files\\map_render.py": [
      {
        "function": "render_map",
        "calls": "get",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "get",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "Map",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "add_to",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "add_to",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "iterrows",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "Draw",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "add_to",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "add_to",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "get",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "get",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "Popup",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "add_to",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "get",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "get",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "DataFrame",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "median",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "median",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "TileLayer",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "TileLayer",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "LayerControl",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "add_to",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "get",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "any",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "get",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "get",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "get",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "get",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "Marker",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "add_to",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "Polygon",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "add_to",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "get",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "any",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "len",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "PCA",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "fit_transform",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "copy",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "sort_values",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "get",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "get",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "add_to",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "Icon",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "Polygon",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "median",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "median",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "LineString",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "shapely_transform",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "buffer",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "shapely_transform",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "add_to",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "mean",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "median",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "transform",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "transform",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "PolyLine",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "int",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "from_crs",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "from_crs",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "print",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "isnull",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "sum",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "PolyLine",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "GeoJson",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "range",
        "line": 8
      },
      {
        "function": "render_map",
        "calls": "len",
        "line": 8
      }
    ],
    "old_streamlit_files\\map_utils.py": [
      {
        "function": "filter_selection_by_shape",
        "calls": "DataFrame",
        "line": 7
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "DataFrame",
        "line": 7
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "min",
        "line": 7
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "max",
        "line": 7
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "min",
        "line": 7
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "max",
        "line": 7
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "Polygon",
        "line": 7
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "apply",
        "line": 7
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "LineString",
        "line": 7
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "median",
        "line": 7
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "median",
        "line": 7
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "shapely_transform",
        "line": 7
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "buffer",
        "line": 7
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "apply",
        "line": 7
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "contains",
        "line": 7
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "int",
        "line": 7
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "from_crs",
        "line": 7
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "Point",
        "line": 7
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "contains",
        "line": 7
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "shapely_transform",
        "line": 7
      },
      {
        "function": "filter_selection_by_shape",
        "calls": "Point",
        "line": 7
      }
    ],
    "old_streamlit_files\\section_logic.py": [
      {
        "function": "generate_section_plot",
        "calls": "to_dict",
        "line": 9
      },
      {
        "function": "generate_section_plot",
        "calls": "get",
        "line": 9
      },
      {
        "function": "generate_section_plot",
        "calls": "items",
        "line": 9
      },
      {
        "function": "generate_section_plot",
        "calls": "get",
        "line": 9
      },
      {
        "function": "generate_section_plot",
        "calls": "get",
        "line": 9
      },
      {
        "function": "generate_section_plot",
        "calls": "join",
        "line": 9
      },
      {
        "function": "generate_section_plot",
        "calls": "plot_section_from_ags",
        "line": 9
      },
      {
        "function": "generate_section_plot",
        "calls": "from_crs",
        "line": 9
      },
      {
        "function": "generate_section_plot",
        "calls": "PCA",
        "line": 9
      },
      {
        "function": "generate_section_plot",
        "calls": "fit_transform",
        "line": 9
      },
      {
        "function": "generate_section_plot",
        "calls": "gettempdir",
        "line": 9
      },
      {
        "function": "generate_section_plot",
        "calls": "open",
        "line": 9
      },
      {
        "function": "generate_section_plot",
        "calls": "write",
        "line": 9
      },
      {
        "function": "generate_section_plot",
        "calls": "pyplot",
        "line": 9
      },
      {
        "function": "generate_section_plot",
        "calls": "warning",
        "line": 9
      },
      {
        "function": "generate_section_plot",
        "calls": "set_index",
        "line": 9
      },
      {
        "function": "generate_section_plot",
        "calls": "transform",
        "line": 9
      },
      {
        "function": "generate_section_plot",
        "calls": "any",
        "line": 9
      },
      {
        "function": "generate_section_plot",
        "calls": "mean",
        "line": 9
      },
      {
        "function": "generate_section_plot",
        "calls": "max",
        "line": 9
      },
      {
        "function": "generate_section_plot",
        "calls": "min",
        "line": 9
      },
      {
        "function": "generate_section_plot",
        "calls": "tuple",
        "line": 9
      },
      {
        "function": "generate_section_plot",
        "calls": "tuple",
        "line": 9
      },
      {
        "function": "generate_section_plot",
        "calls": "get",
        "line": 9
      },
      {
        "function": "generate_section_plot",
        "calls": "any",
        "line": 9
      },
      {
        "function": "generate_section_plot",
        "calls": "isnull",
        "line": 9
      }
    ],
    "old_streamlit_files\\section_plot.py": [
      {
        "function": "parse_ags_geol_section",
        "calls": "parse_lines",
        "line": 20
      },
      {
        "function": "parse_ags_geol_section",
        "calls": "DataFrame",
        "line": 20
      },
      {
        "function": "parse_ags_geol_section",
        "calls": "DataFrame",
        "line": 20
      },
      {
        "function": "parse_ags_geol_section",
        "calls": "open",
        "line": 20
      },
      {
        "function": "parse_ags_geol_section",
        "calls": "readlines",
        "line": 20
      },
      {
        "function": "parse_ags_geol_section",
        "calls": "list",
        "line": 20
      },
      {
        "function": "parse_ags_geol_section",
        "calls": "strip",
        "line": 20
      },
      {
        "function": "parse_ags_geol_section",
        "calls": "strip",
        "line": 20
      },
      {
        "function": "parse_ags_geol_section",
        "calls": "DataFrame",
        "line": 20
      },
      {
        "function": "parse_ags_geol_section",
        "calls": "reader",
        "line": 20
      },
      {
        "function": "parse_ags_geol_section",
        "calls": "append",
        "line": 20
      },
      {
        "function": "parse_ags_geol_section",
        "calls": "to_numeric",
        "line": 20
      },
      {
        "function": "parse_ags_geol_section",
        "calls": "append",
        "line": 20
      },
      {
        "function": "parse_ags_geol_section",
        "calls": "to_numeric",
        "line": 20
      },
      {
        "function": "parse_ags_geol_section",
        "calls": "append",
        "line": 20
      },
      {
        "function": "parse_ags_geol_section",
        "calls": "len",
        "line": 20
      },
      {
        "function": "parse_ags_geol_section",
        "calls": "len",
        "line": 20
      },
      {
        "function": "parse_ags_geol_section",
        "calls": "len",
        "line": 20
      },
      {
        "function": "parse_ags_geol_section",
        "calls": "len",
        "line": 20
      },
      {
        "function": "parse_ags_geol_section",
        "calls": "len",
        "line": 20
      },
      {
        "function": "parse_ags_geol_section",
        "calls": "len",
        "line": 20
      },
      {
        "function": "parse_ags_geol_section",
        "calls": "len",
        "line": 20
      },
      {
        "function": "parse_ags_geol_section",
        "calls": "len",
        "line": 20
      },
      {
        "function": "parse_ags_geol_section",
        "calls": "len",
        "line": 20
      },
      {
        "function": "plot_borehole_sections",
        "calls": "merge",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "unique",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "dropna",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "sort_values",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "reindex",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "tolist",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "to_dict",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "unique",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "len",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "max",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "min",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "subplots",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "set",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "enumerate",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "array",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "argsort",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "plot",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "array",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "enumerate",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "set_title",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "int",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "int",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "arange",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "set_xticks",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "set_xticklabels",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "set_xlabel",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "set_ylabel",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "max",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "min",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "set_ylim",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "set_xlim",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "set",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "legend",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "tight_layout",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "len",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "print",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "print",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "merge",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "to_numeric",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "abs",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "abs",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "dict",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "tab20",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "reset_index",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "iterrows",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "max",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "annotate",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "basename",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "endswith",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "max",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "min",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "first",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "first",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "isinstance",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "LineString",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "zip",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "dict",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "hypot",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "dict",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "zip",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "first",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "enumerate",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "get",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "fill_betweenx",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "append",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "append",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "print",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "print",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "min",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "floor",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "ceil",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "max",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "min",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "min",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "max",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "append",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "add",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "print",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "exit",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "len",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "Point",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "append",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "zip",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "zip",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "search",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "sort_values",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "add",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "append",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "append",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "print",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "print",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "len",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "lower",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "Line2D",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "project",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "str",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "str",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "group",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "text",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "str",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "min",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "max",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "min",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "min",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "max",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "int",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "isna",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "isna",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "groupby",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "groupby",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "groupby",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "append",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "append",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "str",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "text",
        "line": 96
      },
      {
        "function": "plot_borehole_sections",
        "calls": "str",
        "line": 96
      },
      {
        "function": "plot_section_from_ags",
        "calls": "parse_ags_geol_section",
        "line": 424
      },
      {
        "function": "plot_section_from_ags",
        "calls": "basename",
        "line": 424
      },
      {
        "function": "plot_section_from_ags",
        "calls": "endswith",
        "line": 424
      },
      {
        "function": "plot_section_from_ags",
        "calls": "plot_borehole_sections",
        "line": 424
      },
      {
        "function": "plot_section_from_ags",
        "calls": "print",
        "line": 424
      },
      {
        "function": "plot_section_from_ags",
        "calls": "isin",
        "line": 424
      },
      {
        "function": "plot_section_from_ags",
        "calls": "isin",
        "line": 424
      },
      {
        "function": "plot_section_from_ags",
        "calls": "lower",
        "line": 424
      },
      {
        "function": "parse_lines",
        "calls": "list",
        "line": 26
      },
      {
        "function": "parse_lines",
        "calls": "reader",
        "line": 26
      }
    ],
    "old_streamlit_files\\utils.py": [
      {
        "function": "latlon_to_osgb36",
        "calls": "from_crs",
        "line": 5
      },
      {
        "function": "latlon_to_osgb36",
        "calls": "transform",
        "line": 5
      },
      {
        "function": "osgb36_to_latlon",
        "calls": "from_crs",
        "line": 11
      },
      {
        "function": "osgb36_to_latlon",
        "calls": "transform",
        "line": 11
      },
      {
        "function": "assign_color_map",
        "calls": "get_cmap",
        "line": 24
      },
      {
        "function": "assign_color_map",
        "calls": "cmap",
        "line": 24
      },
      {
        "function": "assign_color_map",
        "calls": "enumerate",
        "line": 24
      },
      {
        "function": "safe_temp_path",
        "calls": "basename",
        "line": 32
      },
      {
        "function": "safe_temp_path",
        "calls": "join",
        "line": 32
      },
      {
        "function": "euclidean_distance",
        "calls": "hypot",
        "line": 40
      }
    ],
    "state_management\\app_state.py": [
      {
        "function": "get_app_state_manager",
        "calls": "AppState",
        "line": 270
      },
      {
        "function": "get_app_state_manager",
        "calls": "info",
        "line": 270
      },
      {
        "function": "reset_app_state_manager",
        "calls": "info",
        "line": 288
      },
      {
        "function": "__init__",
        "calls": "Lock",
        "line": 33
      },
      {
        "function": "__init__",
        "calls": "BoreholeData",
        "line": 33
      },
      {
        "function": "__init__",
        "calls": "MapState",
        "line": 33
      },
      {
        "function": "__init__",
        "calls": "SelectionState",
        "line": 33
      },
      {
        "function": "__init__",
        "calls": "PlotState",
        "line": 33
      },
      {
        "function": "__init__",
        "calls": "UploadState",
        "line": 33
      },
      {
        "function": "__init__",
        "calls": "info",
        "line": 33
      },
      {
        "function": "update_borehole_data",
        "calls": "items",
        "line": 75
      },
      {
        "function": "update_borehole_data",
        "calls": "now",
        "line": 75
      },
      {
        "function": "update_borehole_data",
        "calls": "_increment_version",
        "line": 75
      },
      {
        "function": "update_borehole_data",
        "calls": "debug",
        "line": 75
      },
      {
        "function": "update_borehole_data",
        "calls": "hasattr",
        "line": 75
      },
      {
        "function": "update_borehole_data",
        "calls": "setattr",
        "line": 75
      },
      {
        "function": "update_borehole_data",
        "calls": "warning",
        "line": 75
      },
      {
        "function": "update_borehole_data",
        "calls": "list",
        "line": 75
      },
      {
        "function": "update_borehole_data",
        "calls": "keys",
        "line": 75
      },
      {
        "function": "update_map_state",
        "calls": "items",
        "line": 88
      },
      {
        "function": "update_map_state",
        "calls": "_increment_version",
        "line": 88
      },
      {
        "function": "update_map_state",
        "calls": "debug",
        "line": 88
      },
      {
        "function": "update_map_state",
        "calls": "hasattr",
        "line": 88
      },
      {
        "function": "update_map_state",
        "calls": "setattr",
        "line": 88
      },
      {
        "function": "update_map_state",
        "calls": "warning",
        "line": 88
      },
      {
        "function": "update_map_state",
        "calls": "list",
        "line": 88
      },
      {
        "function": "update_map_state",
        "calls": "keys",
        "line": 88
      },
      {
        "function": "update_selection_state",
        "calls": "items",
        "line": 100
      },
      {
        "function": "update_selection_state",
        "calls": "now",
        "line": 100
      },
      {
        "function": "update_selection_state",
        "calls": "_increment_version",
        "line": 100
      },
      {
        "function": "update_selection_state",
        "calls": "debug",
        "line": 100
      },
      {
        "function": "update_selection_state",
        "calls": "hasattr",
        "line": 100
      },
      {
        "function": "update_selection_state",
        "calls": "setattr",
        "line": 100
      },
      {
        "function": "update_selection_state",
        "calls": "warning",
        "line": 100
      },
      {
        "function": "update_selection_state",
        "calls": "list",
        "line": 100
      },
      {
        "function": "update_selection_state",
        "calls": "keys",
        "line": 100
      },
      {
        "function": "update_plot_state",
        "calls": "items",
        "line": 113
      },
      {
        "function": "update_plot_state",
        "calls": "_increment_version",
        "line": 113
      },
      {
        "function": "update_plot_state",
        "calls": "debug",
        "line": 113
      },
      {
        "function": "update_plot_state",
        "calls": "hasattr",
        "line": 113
      },
      {
        "function": "update_plot_state",
        "calls": "setattr",
        "line": 113
      },
      {
        "function": "update_plot_state",
        "calls": "warning",
        "line": 113
      },
      {
        "function": "update_plot_state",
        "calls": "list",
        "line": 113
      },
      {
        "function": "update_plot_state",
        "calls": "keys",
        "line": 113
      },
      {
        "function": "update_upload_state",
        "calls": "items",
        "line": 125
      },
      {
        "function": "update_upload_state",
        "calls": "_increment_version",
        "line": 125
      },
      {
        "function": "update_upload_state",
        "calls": "debug",
        "line": 125
      },
      {
        "function": "update_upload_state",
        "calls": "hasattr",
        "line": 125
      },
      {
        "function": "update_upload_state",
        "calls": "setattr",
        "line": 125
      },
      {
        "function": "update_upload_state",
        "calls": "warning",
        "line": 125
      },
      {
        "function": "update_upload_state",
        "calls": "list",
        "line": 125
      },
      {
        "function": "update_upload_state",
        "calls": "keys",
        "line": 125
      },
      {
        "function": "clear_all_state",
        "calls": "BoreholeData",
        "line": 137
      },
      {
        "function": "clear_all_state",
        "calls": "MapState",
        "line": 137
      },
      {
        "function": "clear_all_state",
        "calls": "SelectionState",
        "line": 137
      },
      {
        "function": "clear_all_state",
        "calls": "PlotState",
        "line": 137
      },
      {
        "function": "clear_all_state",
        "calls": "UploadState",
        "line": 137
      },
      {
        "function": "clear_all_state",
        "calls": "_increment_version",
        "line": 137
      },
      {
        "function": "clear_all_state",
        "calls": "info",
        "line": 137
      },
      {
        "function": "get_state_summary",
        "calls": "get_borehole_count",
        "line": 148
      },
      {
        "function": "get_state_summary",
        "calls": "len",
        "line": 148
      },
      {
        "function": "get_state_summary",
        "calls": "len",
        "line": 148
      },
      {
        "function": "get_state_summary",
        "calls": "isoformat",
        "line": 148
      },
      {
        "function": "add_change_listener",
        "calls": "append",
        "line": 162
      },
      {
        "function": "remove_change_listener",
        "calls": "remove",
        "line": 167
      },
      {
        "function": "_increment_version",
        "calls": "listener",
        "line": 173
      },
      {
        "function": "_increment_version",
        "calls": "error",
        "line": 173
      },
      {
        "function": "to_dash_store_format",
        "calls": "to_dict",
        "line": 182
      },
      {
        "function": "to_dash_store_format",
        "calls": "list",
        "line": 182
      },
      {
        "function": "from_dash_store_format",
        "calls": "_increment_version",
        "line": 210
      },
      {
        "function": "from_dash_store_format",
        "calls": "debug",
        "line": 210
      },
      {
        "function": "from_dash_store_format",
        "calls": "DataFrame",
        "line": 210
      },
      {
        "function": "from_dash_store_format",
        "calls": "tuple",
        "line": 210
      }
    ],
    "state_management\\state_models.py": [
      {
        "function": "get_borehole_count",
        "calls": "len",
        "line": 30
      },
      {
        "function": "update_center",
        "calls": "now",
        "line": 57
      },
      {
        "function": "set_bounds_from_coordinates",
        "calls": "min",
        "line": 64
      },
      {
        "function": "set_bounds_from_coordinates",
        "calls": "min",
        "line": 64
      },
      {
        "function": "set_bounds_from_coordinates",
        "calls": "max",
        "line": 64
      },
      {
        "function": "set_bounds_from_coordinates",
        "calls": "max",
        "line": 64
      },
      {
        "function": "clear_selection",
        "calls": "clear",
        "line": 87
      },
      {
        "function": "clear_selection",
        "calls": "now",
        "line": 87
      },
      {
        "function": "update_selection",
        "calls": "copy",
        "line": 96
      },
      {
        "function": "update_selection",
        "calls": "now",
        "line": 96
      },
      {
        "function": "add_polyline_selection",
        "calls": "copy",
        "line": 102
      },
      {
        "function": "add_polyline_selection",
        "calls": "copy",
        "line": 102
      },
      {
        "function": "add_polyline_selection",
        "calls": "now",
        "line": 102
      },
      {
        "function": "complete_generation",
        "calls": "now",
        "line": 133
      },
      {
        "function": "start_upload",
        "calls": "clear",
        "line": 157
      },
      {
        "function": "complete_upload",
        "calls": "copy",
        "line": 162
      },
      {
        "function": "complete_upload",
        "calls": "now",
        "line": 162
      },
      {
        "function": "complete_upload",
        "calls": "copy",
        "line": 162
      },
      {
        "function": "clear_upload",
        "calls": "clear",
        "line": 172
      },
      {
        "function": "clear_upload",
        "calls": "clear",
        "line": 172
      }
    ]
  },
  "statistics": {
    "file_types": {
      "core": 28,
      "main": 1,
      "config": 3,
      "service": 1,
      "model": 5,
      "utility": 6,
      "test": 22,
      "event": 4
    },
    "complexity_distribution": {
      "low": 28,
      "medium": 24,
      "high": 18
    }
  }
}